=>DLT Project

     =move file
          bcj3 > admintemplatetwo > assets
          exercisetwo > public

          bcj3 > admintemplatetwo > css, js
          exercisetwo > public > assets > disc (disc folder created)

     =Dashboard page
          default dashboard page to customized dashboards page 

          php artisan make:controller DashboardsController -r
     
     =In DashboardsController.php

     =In Web
          Route::get("/dashboards",[DashboardsController::class,'index'])->name("dashboard.index");
          *use App\Http\Controllers\DashboardsController;

     =In View
          dashboards >
          =create index.blade.php

          =create adminindex.blade.php
          =create adminheader.blade.php (<!DOCTYPE HTML - <body>)
          =create adminfooter.blade.php (</body> - </html>)
          =create adminleftsitebar.blae.php (Start -End Left Navbar)


          =In adminindex.blde.php
               @include("layouts.adminheader")

               <div>
                    <!-- Start Site Setting -->
                    <div id="sitesettings" class="sitesettings">
                         <div class="sitesettings-item"><a href="javascript:void(0);" id="sitetoggle" class="sitetoggle"><i class="fas fa-cog ani-rotates"></i></a></div>
                    </div>
                    <!-- End Site Settin -->

                    <!-- Start Left Side Bar -->
                    @include("layouts.adminleftsidebar")
                    <!-- End Left Side Bar -->

                    <!-- Start Content Area -->
                    @yield("content")
                    <!-- End Content Area -->
               </div>
         
               @include("layouts.adminfooter")

     
          =In index.blade.php
               @extends("layouts.adminindex")

               @section("content")
                    <!-- Start Content Area -->
                    <section>
                         ....
                    </section>
                    <!-- End Content Area -->
               @endsection

          =In adminheader.blade.php
               <!-- Application Name -->
               <title>{{ config('app.name') }}</title>
               <!-- fav icon -->
               <link href="{{ asset('assets/img/fav/favicon.png') }}" rel="icon" type="image/png" sizes="16x16"/>
               <!-- jqueryui css1 js1 -->
               <link href="{{asset('./assets/libs/jquery-ui-1.13.2.custom/jquery-ui.min.css')}}" rel="stylesheet" type="text/css">
               <!-- custom css css1 -->
               <link href="{{ asset('assets/disc/css/style.css') }}" rel="stylesheet" type="text/css"/>
          
               <!-- Extra CSS -->
               @yield('css')

               =.env
                    APP_NAME="DLT Project"
          =In adminfooter.blade.php
               <!-- jqueryui css1 js1 -->
               <script src="{{asset('./assets/libs/jquery-ui-1.13.2.custom/jquery-ui.min.js')}}"></script>
               <!-- custom js js1 -->
               <script src="{{ asset('assets/disc/js/app.js') }}" type="text/javascript"></script>

          
     =>Display Authenticated user name
          =In app > Provider > AppServiceProvider.php
               public function boot(): void
               {
                    View::composer('*',function($view){
                         $view->with("userdata",Auth::user());
                    });
               }
               *use Illuminate\Support\Facades\View;
               *use Illuminate\Support\Facades\Auth;

          =In adminleftsidebar.blade.php
               <span class="text-muted small me-2">{{ $userdata["name"] }}</span>

     =>After login/register Redirect
          app > Providers > RouteServiceProvider.php

               // public const HOME = '/dashboard';
               public const HOME = '/dashboards';
          
          *user is redirectd to dashboards after sucessful authentication.

     =create filder students >
     =index.blade.php
     =create.blade.php

     =>Sticky Form
          -When validation error occur, all form field is empty. To protect the user from repeatedly filling the field.
          -get the previous filled value if error occur
               old('inputname')
          
          =In create.blade.php
               <input type="text" name="firstname" id="firstname" class="form-control form-control-sm rounded-0" placeholder="Enter First name" value="{{ old('firstname') }}"/>
               <textarea name="remark" id="remark" class="form-control rounded-0" rows="5" placeholder="Enter Remark">{{ old('remark')}}</textarea>

     =>Limiting text length
          =In index.blade.php
               <td>{{Str::limit($student->remark,10)}}</td>

     =>Formattng date time (laravel)
          =In index.blade.php
               <td>{{ $student->created_at->format('d M Y') }}</td>
               <td>{{ $student->updated_at->format('d M Y') }}</td>

     =>Delete Best Practice 
          =In index.blade.php
                    <td>
                         <a href="{{ route('students.edit',$student->id) }}" class="text-info"><i class="fas fa-pen"></i></a>
                         <!-- <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$student->id}}"><i class="fas fa-trash-alt"></i></a> -->
                         <!-- <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a> -->
                         <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$student->regnumber}}"><i class="fas fa-trash-alt"></i></a>
                    
                    </td>
                    ....
                    <!-- <form id="formdelete-{{ $student->id }}" class="" action="{{route('students.destroy',$student->id)}}" method="POST"> -->
                    <!-- <form id="formdelete-{{ $idx }}" class="" action="{{route('students.destroy',$student->id)}}" method="POST"> -->
                    <form id="formdelete-{{ $student->regnumber }}" class="" action="{{route('students.destroy',$student->id)}}" method="POST">
                         @csrf
                         @method("DELETE")
                    </form>

               @section("scripts")
                    <script type="text/javascript">
                         $(document).ready(function(){
                              $(".delete-btns").click(function(){
                                   // console.log('hay');
                         
                                   var getidx = $(this).data("idx");
                                   // console.log(getidx);

                                   if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                                        $('#formdelete-'+getidx).submit();
                                        return true;
                                   }else{
                                        false;
                                   }
                              });
                         });
                    </script>
               @endsection

          -Comfirm user to delete this student id (it is not very user-friendly. It can be complex).
          -Comfirm user to delete this current number or registration number (it is secretly delete the student id in background).

     =>user_id, status_id join
          =In Model (Student.php)
               public function user(){
                    return $this->belongsTo("App\Models\User");
               }

               public function status(){
                    // return $this->belongsTo(Status::class); // send all column
                    // return $this->belongsTo(Status::class)->select("name"); // send single column
                    return $this->belongsTo(Status::class)->select(["id","name","slug"]); // send multi column
               }

          =In index.blade.php
               <td>{{ $student->status->name }}</td>
               <td>{{ $student->user["name"] }}</td>
          =In show.blade.php
               <i class="fas fa-user fa-sm"></i> <span>{{$student["user"]["name"]}}</span>

          
          *show user name and status name by joining the tables

     =>Formattng date time (php)
          =In show.blade.php
               <i class="fas fa-calendar-alt fa-sm"></i> <span>{{date('d M Y',strtotime($student->created_at))}} {{date('h:i:s A',strtotime($student->created_at))}}</span>
               <br/>
               <i class="fas fa-edit fa-sm"></i> <span>{{date('d M Y h:i:s A',strtotime($student->updated_at))}}</span>

     =>Setting server timezone
          config > app.php
               'timezone' => 'Asia/Yangon',

     =>Update & Validate
          =In StudentsController.php
               public function update(Request $request, string $id)
               {
                    $this->validate($request,[
                         // "regnumber" => "required|unique:students,regnumber",
                         "regnumber" => "required|unique:students,regnumber,".$id,
                         "firstname"=>"required",
                         "lastname"=>"required",
                         "remark" => "max:1000"
                    ]);

                    $user = Auth::user();
                    $user_id = $user["id"];

                    $student = Student::findOrFail($id);
                    $student->regnumber = $request["regnumber"];
                    $student->firstname = $request["firstname"];
                    $student->lastname = $request["lastname"];
                    $student->slug = Str::slug($request["firstname"]);
                    $student->remark = $request["remark"];
                    $student->user_id = $user_id;

                    $student->save();
                    return redirect(route("students.index"));
               }

          *slug name will be updated, when the firstname is modified
          - validation error and the updated information is not stored 
               if check "regnumber" Unique and we only change firstname, not the regnumber field
          -Unique check the field is not exist in the database table

          - Forcing A Unique Rule To Ignore A Given ID
               unique rule pass for the student id.
               *update() must carefully specify id to ignore unique rule

     => Small resource CRUD (Single Page)
          =>Create/Store + index
               =index.blade.php
                    <div class="col-md-12">
                         <!-- http://127.0.0.1:8000/statuses -->
                         <form action="{{route('statuses.store')}}" method="POST">
                              {{ csrf_field() }}
                              <div class="row align-items-end">
                                   <div class="col-md-6">
                                        <label for="name">Name <span class="text-danger">*</span></label>
                                        <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                   </div>

                                   <div class="col-md-6 ">
                                        <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                        <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                                   </div>
                              </div>
                         </form>
                    </div>
                    ....

                    <tbody>
                         @foreach($statuses as $idx=>$status)
                         <tr>
                              <td>{{++$idx}}</td>
                              <td>{{ $status->name }}</td>
                              <td>{{ $status->user["name"] }}</td>
                              <td>{{ $status->created_at->format('d M Y') }}</td>
                              <td>{{ $status->updated_at->format('d M Y') }}</td>
                              
                         </tr>
                         @endforeach
                    </tbody>

               =In StatusesController.php
                    public function index()
                    {
                         $statuses = Status::all();
                         return view("statuses.index",compact("statuses"));
                    }

                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|unique:statuses,name",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $status = new Status();
                         $status->name = $request["name"];
                         $status->slug = Str::slug($request["name"]);
                         $status->user_id = $user_id;

                         $status->save();
                         return redirect(route("statuses.index"));
                    }
                    *This time use Request.
                    -We will study StatusCreateRequest later.

                    -No longer require create().
          
          =>Read 
               -Don't need to use show() because resource is too small.
          =>Delete
               =In index.blade.php
                    <td>
                         <a href="{{ route('statuses.edit',$status->id) }}" class="text-info"><i class="fas fa-pen"></i></a>
                         <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                    
                    </td>
                    <form id="formdelete-{{ $idx }}" class="" action="{{route('statuses.destroy',$status->id)}}" method="POST">
                         @csrf
                         @method("DELETE")
                    </form>
               =In StatusesController.php
                    public function destroy(string $id)
                    {
                         $student = Status::findOrFail($id);
                         $student->delete();
                         return redirect()->back();
                    }
          
          =>Edit/Update + index (Single Page)
               =In index.blade.php
                    <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$status->id}}" data-name="{{$status->name}}"><i class="fas fa-pen"></i></a>
                    ....

                    <!-- START MODAL AREA -->
                         <!-- start edit modal -->
                              <div id="editmodal" class="modal fade">
                                   <div class="modal-dialog modal-sm modal-dialog-centered">
                                        <div class="modal-content">
                                             <div class="modal-header">
                                                  <h6 class="modal-title">Edit Form</h6>
                                                  <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                             </div>

                                             <div class="modal-body">
                                                  <form id="formaction" action="" method="POST">
                                                       {{ csrf_field() }}
                                                       {{ method_field('PUT') }}
                                                       <div class="row align-items-end">
                                                            <div class="col-md-8">
                                                                 <label for="editname">Name <span class="text-danger">*</span></label>
                                                                 <input type="text" name="name" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                                            </div>
                                   
                                                            <div class="col-md-2">
                                                                 <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                            </div>
                                                       </div>
                                                  </form>
                                             </div>

                                             <div class="modal-footer">

                                             </div>
                                        </div>
                                   </div>
                              </div>
                         <!-- end edit modal -->
                    <!-- END MODAL AREA -->      

                    ....

                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         // console.log($(this).attr("data-id"),$(this).attr("data-name"));
                         
                         $("#editname").val($(this).attr("data-name"));
                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("action",`/statuses/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form
               
               =In StatusesController.php

                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => "required|unique:statuses,name,".$id,
                         ]);

                         $user = Auth::user();
                         $user_id = $user['id'];

                         $status = Status::findOrFail($id);
                         $status->name = $request["name"];
                         $status->slug = Str::slug($request["name"]);
                         $status->user_id = $user_id;

                         $status->save();
                         return redirect(route("statuses.index"));
                    }
                    -No longer require edit().

               *Show the current item information in edit modal 
                    -modal box with bootstrap
                    -link modal box with edit btn
                    -"id", "name" pass from edit btn
                    -clicking edit btn, set "name" to the edit form input field 

               *if modal form is set to action="{{route('statuses.update',$status->id)}}",
                    the url is http://127.0.0.1:8000/statuses/14
                    -change in any item will only change the last item because it is outside the loop
                    -if there is no row in database, it will get error (undefined variable) since it didn't even enter the loop 
               
               *atomatically change update url of current item
                    -clicking edit btn, dynamically set edit form action url with the current item "id" 


     =>Image + Select box
          php artisan make:controller RolesController -r
          php artisan make:model Role -m 

          =In Web
               *under Auth
               Route::resource("roles",RolesController::class);

          =Migration
               =create_roles_table.php
                    $table->string("image")->nullable();
                    $table->string("name");
                    $table->string("slug");
                    $table->unsignedBigInteger("status_id")->default("3");
                    $table->unsignedBigInteger("user_id");

               php artisan migrate:status
               php artisan migrate

          =In Model (Role.php)
               protected $table = "roles";
               protected $primaryKey = "id";
               protected $fillable = [
                    "image",
                    "name",
                    "slug",
                    "status_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }

          =>Single Image Preview
               =In create.blade.php
                    jQuery image preview html css js        
                    filereader.onload = function(e){
                         $(output).html(""); 
                         $($.parseHTML('<img>')).attr('src',e.target.result).appendTo(output);
                    }
                    *Firstly repeatedly choosing image show unnecessary previous selected image.
                         -Solution for this is, output element's html is set empty, preparing ready to show new image.

          =>Status Option
               =In RolesController.php
                    public function create()
                    {    
                         //$statuses = Status::all(); // get all statuses
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("roles.create",compact("statuses"));
                    }

               =In create.blade.php
                    <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                         <!-- <option value="3">On</option>
                         <option value="4">On</option> -->

                         @foreach($statuses as $status)
                              <option value="{{$status->id}}">{{ $status->name }}</option>
                         @endforeach
                    </select>

                    *dynamically get statuses from database
          
          =>Image Store With Selected Role
               =In RolesController.php
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|max:50|unique:roles,name",
                              "image" => "image|mimes:jpg,jpeg,png|max:1024",
                              "status_id" => "required|in:3,4",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $role = new Role();
                         $role->name = $request["name"];
                         $role->slug = Str::slug($request["name"]);
                         $role->status_id = $request["status_id"];
                         $role->user_id = $user_id;

                         // Single Image Upload
                         if(file_exists($request["image"])){
                              $file = $request["image"];
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$role['id'].$fname;
                              $file->move(public_path("assets/img/roles"),$imagenewname);
            
                              $filepath = "assets/img/roles/".$imagenewname;
                              $role->image = $filepath;
                         }    

                         $role->save();
                         return redirect(route("roles.index"));
                    }
                    *update() needed to be careful than store() if UNIQUE rule is declared,
                         other rules should be defined in front of UNIQUE for the clarity.
                    -Whatever view status_id change, validation rule is not match unless 3 or 4.
          
                    
                    public > foldername = routename
                         $file->move(public_path("roles/img"),$imagenewname);
                         $filepath = "roles/img".$imagenewname;

                    *error
                         Not Found
                         The requested resource /roles was not found on this server.
                    -However, roles/index can't be opened, create and other page can be opened.
                    -Although error occur, the role record and image file (public>roles) are inserted successfully.
          
          =>Image View
               =index.blade.php    
                    <td><img src="{{ asset($role->image) }}" class="rounded-circle" alt="{{$role->name}}" width="20" height="20"/> <a href="{{route('roles.show',$role->id)}}">{{$role->name}}</a></td>
                    
               *asset() use for the file in project folder
               *real world project use aws(amazone web service) and image store as http link
                    so directly give src="$role->image"

          =>Image Edit With Selected Role
               =In RolesController.php
                    public function edit(string $id)
                    {
                         $role = Role::findOrFail($id);
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("roles.edit")->with("role",$role)->with("statuses",$statuses);
                    }

               option value = 2 
               equal to
               column value = 2

               <option value="1">myanmar</option>
               "country" column = 2
               *'selected' attribute is to an select option 

               =In index.blade.php
                    <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                         @foreach($statuses as $status)
                              <option value="{{$status->id}}" 
                                   @if($status['id'] === $role->status_id)
                                        selected
                                   @endif
                              >{{ $status->name }}</option>
                         @endforeach
                    </select>
                    -show the statuses and highlight the selected status

                    <form action="/roles/{{$role->id}}" method="POST" enctype="multipart/form-data">
                         @csrf
                         @method("PUT")

                         <div class="row">

                              <div class="col-md-4">
                                   <div class="row">
                                        <div class="col-md-6 text-sm-center">
                                             <img src="{{ asset($role->image) }}" class="" alt="{{$role->name}}" width="200"/>
                                        </div>
                                        <div class="col-md-6">
                                             <label for="image" class="gallery"><span>Choose Images</span></label>
                                        </div>
                                   </div>  
                              </div>
                    -one part show the previous image and another part show the newly changed image

          =>Image Update
               =In RolesController.php  
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => ["required","max:50","unique:roles,name,".$id],
                              "image" => ["image","mimes:jpg,jpeg,png","max:1024"],
                              "status_id" => ["required","in:3,4"],
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $role = Role::findOrFail($id);
                         $role->name = $request["name"];
                         $role->slug = Str::slug($request["name"]);
                         $role->status_id = $request["status_id"];
                         $role->user_id = $user_id;

                         // Remove Old Image
                         if($request->hasFile("image")){
                              $path = $role->image;

                              if(File::exists($path)){
                                   File::delete($path);
                              }
                         }

                         // Single Image Upload
                         if($request->hasFile("image")){
                              $file = $request->file("image");
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$role['id'].$fname;
                              $file->move(public_path("assets/img/roles"),$imagenewname);
                              
                              $filepath = "assets/img/roles/".$imagenewname;
                              $role->image = $filepath;
                         }    

                         $role->save();
                         return redirect(route("roles.index"));
                    }
                    *Validation can be written as array.
          
          =>Image Delete
               =In RolesController.php
                    public function destroy(string $id)
                    {
                         $role = Role::findOrFail($id);
                         
                         // Remove Old Image
                         $path = $role->image;
                         if(File::exists($path)){
                              File::delete($path);
                         }
                         
                         $role->delete();
                         return redirect()->back();
                    }
          -laravel has reload and reloading problem.
          -Adding javascript is the solution for the problem. (Single File Create/Edit)

          Laravel 
          -Large Solid File is given.
          -Long Time To download the file

          React js
          -Break the heavy workloads into Components
          -Combine seperate components into a single file
          -better performance

     =>Fix Analysis
          Statuses
               'Active'
               'Inactive'
               'On'
               'Off'
               'Online'
               'Offline'
               'Public'
               'Private'
               'Friend Only'
               'Member Only'
               'Only Me'
               'Enable'
               'Disable'
               'Ban'
               'Unban'
               'Block'
               'Unblock'
               'Terminate'

     =>Small resource + Select box
          php artisan make:controller TypesController 

          =In Migration
               php artisan make:model Type -m
               =create_types_table.php
                    up()
                         $table->string("name")->unique();
                         $table->string("slug");
                         $table->unsignedBigInteger("status_id");
                         $table->unsignedBigInteger("user_id");
                         $table->timestamps();

               php artisan migrate:status
               php artisan migrate

          =In Web
               Route::resource("types",TypesController::class);

          =>Check Route
               php artisan route:list
               php artisan route:clear
               php artisan route:cache

               *if the code is all fine and route is not ready
                    it must be the problem of cache, so clear the cache. 
          
          =>Create/Store + index With Selected Option
               =In TypesController.php
                    public function index()
                    {
                         $types = Type::all();
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("types.index",compact("types","statuses"));
                    }
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|max:50|unique:types",
                              "status_id" => "required|in:3,4",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $type = new Type();
                         $type->name = $request["name"];
                         $type->slug = Str::slug($request["name"]);
                         $type->status_id = $request["status_id"];
                         $type->user_id = $user_id;
                         $type->save();
                         return redirect(route("types.index"));
                    }
               =In index.blade.php
                    <div class="col-md-12">
                         <form action="{{route('types.store')}}" method="POST">
                              {{ csrf_field() }}

                              <div class="row align-items-end">
                                   <div class="col-md-4">
                                        <label for="name">Name <span class="text-danger">*</span></label>
                                        <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Type Name" value="{{ old('name') }}"/>
                                   </div>

                                   <div class="col-md-4">
                                        <label for="status_id">Status</label>
                                        <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                             @foreach($statuses as $status)
                                                  <option value="{{$status['id']}}">{{$status['name']}}</option>
                                             @endforeach     
                                        </select>
                                   </div>

                                   <div class="col-md-4">
                                        <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                        <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                                   </div>
                              </div>
                         </form>
                    </div>
                    ....
                    <tbody>
                         @foreach($types as $idx=>$type)
                         <tr>
                              <td>{{++$idx}}</td>
                              <td>{{$type["name"]}}</td>
                              <td>{{ $type->status->name }}</td>
                              <td>{{ $type["user"]["name"] }}</td>
                              <td>{{ $type->created_at->format('d M Y') }}</td>
                              <td>{{ $type->updated_at->format('d M Y') }}</td>
                              <td>
                                   <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$status->id}}" data-name="{{$status->name}}"><i class="fas fa-pen"></i></a>
                                   <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                              </td>
                              <form id="formdelete-{{ $idx }}" class="" action="{{route('types.destroy',$type->id)}}" method="POST">
                                   @csrf
                                   @method("DELETE")
                              </form>
                         </tr>
                         @endforeach
                    </tbody>

          =>Delete
               public function destroy(string $id)
               {
                    $type = Type::findOrFail($id);
                    $type->delete();
                    return redirect()->back();
               }

          =>Edit/Update + index With Selected Option
               =In index.blade.php 
                    <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$type->id}}" data-name="{{$type->name}}" data-status="{{$type->status_id}}"><i class="fas fa-pen"></i></a>
                    ....

                    <!-- START MODAL AREA -->
                         <!-- start edit modal -->
                         <div id="editmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Edit Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="POST">
                                                  {{ csrf_field() }}
                                                  {{ method_field('PUT') }}
                                                  <div class="row align-items-end">
                                                       <div class="col-md-7">
                                                            <label for="editname">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="name" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                                       </div>
                                                       
                                                       <div class="col-md-3 form-group">
                                                            <label for="editstatus_id">Status</label>
                                                            <select name="status_id" id="editstatus_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($statuses as $status)
                                                                      <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>
                                                       
                              
                                                       <div class="col-md-2">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- end edit modal -->
                    <!-- END MODAL AREA -->
                    ....
                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         
                         $("#editname").val($(this).attr("data-name"));
                         $("#editstatus_id").val($(this).data("status"));
                         
                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("action",`/types/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form
               *setting select box value automatically select that value 

               =In TypesController.php
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => ["required","max:50","unique:types,name,".$id],
                              "status_id" => ["required","in:3,4"],
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         $type = Type::findOrFail($id);
                         $type->name = $request["name"];
                         $type->slug = Str::slug($request["name"]);
                         $type->status_id = $request["status_id"];
                         $type->user_id = $user_id;
                         $type->save();
                         return redirect(route("types.index"));
                    }

               *It immediately change the newly updated status.Because of php reload feature.
               *Later version will integrate switch to on/of and it doesn't update the value instantly.
               
          -----------------------------------------------------------------
          -hw
               create resources like statuses
                    city
                    country
                    gender

               php artisan make:model City -m
               php artisan make:model Country -m
               php artisan make:model Gender -m

               php artisan make:controller CitiesController -r
               php artisan make:controller CountriesController -r
               php artisan make:controller GendersController -r

               =Migration
                    up()
                         $table->string("name");
                         $table->string("slug");
                         $table->unsignedBigInteger('user_id');
               =In Model

                    protected $table = "statuses";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "name",
                         "slug",
                         "user_id"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }
          
          -hw
               category 
               tag

               (name, slug, status_id, user_id)
          ----------------------------------------------------------

     =>On/Off Switch Button 
          =Create Category & Tag as types
          
          =>Migration

               php artisan make:model Category -m
               php artisan make:model Tag -m

               =create_categories_table.php
               =create_tags_table.php
                    $table->string("name")->unique();
                    $table->string("slug");  
                    $table->unsignedBigInteger("status_id");
                    $table->unsignedBigInteger("user_id");

               php artisan make:controller TagsController -r
               php artisan make:controller CategoriesController -r

          =In categories > index.blade.php
               <td>
                    <div class="form-check form-switch">
                         <input type="checkbox" class="form-check-input" {{ $category->status_id === 3 ? "checked" : "" }} />
                    </div>
               </td>

          Tags
               WDF
               CSS Animation
               jQuery
               Bootstrap Projects
               Mysql
               Tailwind CSS
               JSON & Firebase
               ES6
               PHP
               Laravel
               React
               Node 
               Linux (Ubuntu)
               AWS

     =>Class
          
          =Migration
               php artisan make:model Post -m
               
               =crate_posts_table.php
                    $table->string("image")->nullable();
                    $table->string("title");
                    $table->string("slug");
                    $table->longText("content");
                    $table->decimal("fee",8,2)->default(0);
                    $table->date("startdate")->nullable();
                    $table->date("enddate")->nullable();
                    $table->time("starttime")->nullable();
                    $table->time("endtime")->nullable();
                    $table->unsignedBigInteger("type_id");
                    $table->unsignedBigInteger("tag_id");
                    $table->unsignedBigInteger("attshow")->default("4");
                    $table->unsignedBigInteger("status_id")->default("1");
                    $table->unsignedBigInteger("user_id");

               php artisan migrate:status
               php artisan migrate

               =In Model (Post)
                    protected $table = "posts";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "image",
                         "title",
                         "slug",
                         "content",
                         "fee",
                         "startdate",
                         "enddate",
                         "starttime",
                         "starttime",
                         "type_id",
                         "tag_id",
                         "attshow",
                         "status_id",
                         "user_id"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }

                    public function status(){
                         return $this->belongsTo(Status::class);
                    }

                    public function tag(){
                         return $this->belongsTo(Tag::class);
                    }

                    public function type(){
                         return $this->belongsTo(Type::class);
                    }

          php artisan make:controller PostsController

     
          =>Create Post (Class)
               =In PostsController.php
                    public function create()
                    {    
                         $attshows = Status::whereIn("id",[3,4])->get();
                         $statuses = Status::whereIn("id",[7,10,11])->get();
                         $tags = Tag::where("status_id",3)->get();
                         $types = Type::whereIn("id",[1,2])->get();

                         return view("posts.create",compact("attshows","statuses","tags","types"));
                    }
                    *attshows for whether to show or not to show this class in attendance form - on/off (it is the borrowed property from the statuses)
                    *statuses for visibility of this class (private/public/member only)
                    *tags for the course of this class to filter the classes with the course name
                    *types for the kind of this class (free or paid)

               =In create.blade.php
                    ....
                    <div class="col-md-6">
                         <label for="type_id">Type <span class="text-danger">*</span></label>
                         <select name="type_id" id="type_id" class="form-control form-control-sm rounded-0">
                              @foreach($types as $type)
                                   <option value="{{$type->id}}">{{ $type->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-6 mb-3">
                         <label for="fee">Fee <span class="text-danger">*</span></label>
                         <input type="number" name="fee" id="fee" class="form-control form-control-sm rounded-0" placeholder="Class Fee" value="{{ old('fee') }}"/>
                    </div>

                    <div class="col-md-12 mb-3">
                         <label for="content">Content <span class="text-danger">*</span></label>
                         <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{ old('content') }}</textarea>
                    </div>

                    <div class="col-md-3">
                         <label for="tag_id">Type <span class="text-danger">*</span></label>
                         <select name="tag_id" id="tag_id" class="form-control form-control-sm rounded-0">
                              @foreach($tags as $tag)
                                   <option value="{{$tag->id}}">{{ $tag->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-3">
                         <label for="attshow">Show on Att Form <span class="text-danger">*</span></label>
                         <select name="attshow" id="attshow" class="form-control form-control-sm rounded-0">
                              @foreach($attshows as $attshow)
                                   <option value="{{$attshow->id}}">{{ $attshow->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-3">
                         <label for="name">Status <span class="text-danger">*</span></label>
                         <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                              @foreach($statuses as $status)
                                   <option value="{{$status->id}}">{{ $status->name }}</option>
                              @endforeach
                         </select>
                    </div>
                    ....

               =>Hide File Input  
                    =In create.blade.php     
                    <div class="row">
                         <div class="col-md-12 mb-3">
                              <label for="image" class="gallery"><span>Choose Images</span></label>
                              <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ old('image')}}" hidden/>
                         </div>

                         <div class="col-md-6 mb-3">
                              <label for="startdate">Start Date <span class="text-danger">*</span></label>
                              <input type="date" name="startdate" id="startdate" class="form-control form-control-sm rounded-0" value="{{ old('startdate') }}"/>
                         </div>

                         <div class="col-md-6 mb-3">
                              <label for="enddate">End Date <span class="text-danger">*</span></label>
                              <input type="date" name="enddate" id="enddate" class="form-control form-control-sm rounded-0" value="{{ old('enddate') }}"/>
                         </div>

                         <div class="col-md-6 mb-3">
                              <label for="starttime">Start Time <span class="text-danger">*</span></label>
                              <input type="time" name="starttime" id="starttime" class="form-control form-control-sm rounded-0" value="{{ old('starttime') }}"/>
                         </div>

                         <div class="col-md-6 mb-3">
                              <label for="endtime">End Time <span class="text-danger">*</span></label>
                              <input type="time" name="endtime" id="endtime" class="form-control form-control-sm rounded-0" value="{{ old('endtime') }}"/>
                         </div>
                    </div>

          =>Store Post 
               =In PostsController.php
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "image" => "image|mimes:jpg,jpeg,png|max:1024",
                              "title" => "required|max:50|unique:posts,title",
                              "content" => "required",
                              "fee" => "required",
                              "startdate" => "required",
                              "enddate" => "required",
                              "starttime" => "required",
                              "endtime" => "required",
                              "type_id" => "required|in:1,2",
                              "tag_id" => "required",
                              "attshow" => "required|in:3,4",
                              "status_id" => "required|in:7,10,11",   
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $post = new Post();
                         $post->title = $request["title"];
                         $post->slug = Str::slug($request["name"]);
                         $post->content = $request["content"];
                         $post->fee = $request["fee"];
                         $post->startdate = $request["startdate"];
                         $post->enddate = $request["enddate"];
                         $post->starttime = $request["starttime"];
                         $post->endtime = $request["endtime"];
                         $post->type_id = $request["type_id"];
                         $post->tag_id = $request["tag_id"];
                         $post->attshow = $request["attshow"];
                         $post->status_id = $request["status_id"];
                         $post->user_id = $user_id;

                         // Single Image Upload
                         if(file_exists($request["image"])){
                              $file = $request["image"];
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$post['id'].$fname;
                              // $file->move(public_path("posts/img"),$imagenewname);
                              $file->move(public_path("assets/img/posts"),$imagenewname);
                              
                              $filepath = "assets/img/posts/".$imagenewname;
                              $post->image = $filepath;
                         }    

                         $post->save();
                         return redirect(route("posts.index"));
                    }

          =>List All Posts
               
               =>Joining Customize Foriegn Key name

                    =In PostsController.php
                         public function attstatus(){
                                        // related, foreignKey
                              return $this->belongsTo(Status::class,"attshow");
                                                       // related, foreignKey, ownerKey
                              // return $this->belongsTo(Status::class,"attshow","id");
                         }

                         
                         public function type(){
                                                            // related
                              // return $this->belongsTo(Type::class);
                                                            // related, foreignKey
                              // return $this->belongsTo(Type::class,"type_id");
                                                       // related, foreignKey, ownerKey
                              return $this->belongsTo(Type::class,"type_id","id");

                         }
                    
                    *laravel automatically recognize foreign key name by the naming convention rule of 'basetable_column'
                    *Customize foreign key name require additional parameter to pass.
                    *$this->belongsTo(relatedtable,foreignkey,primarykey);

                    =In index.blade.php
                         @foreach($posts as $idx=>$post)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td><img src="{{ asset($post->image) }}" class="rounded-circle" alt="{{$post->title}}" width="20" height="20"/> <a href="{{route('posts.show',$post->id)}}">{{ Str::limit($post->title,20) }}</a></td>
                                   <td>{{ $post->startdate }}</td>
                                   <td>{{ $post->enddate }}</td>
                                   <td>{{ $post->starttime }}</td>
                                   <td>{{ $post->endtime }}</td>
                                   <td>{{ $post->fee }}</td>
                                   <td>{{ $post->type->name }}</td>
                                   <td>{{ $post->tag->name }}</td>
                                   <td>{{ $post->attstatus["name"] }}</td>
                                   <td>{{ $post->status["name"] }}</td>
                                   <td>{{ $post->user["name"] }}</td>
                                   <td>{{ $post->created_at->format('d M Y') }}</td>
                                   <td>{{ $post->updated_at->format('d M Y') }}</td>
                                   <td>
                                        <a href="{{ route('posts.edit',$post->id) }}" class="text-info"><i class="fas fa-pen"></i></a>
                                        <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                                   </td>
                                   <form id="formdelete-{{ $idx }}" class="" action="{{route('posts.destroy',$post->id)}}" method="POST">
                                        @csrf
                                        @method("DELETE")
                                   </form>
                              </tr>
                              @endforeach
                    =>Be Careful
                         column name = method name
                         *Error

                         <td>{{ $post->attshow["name"] }}</td>

                          public function attstatus(){
                              return $this->belongsTo(Status::class,"attshow");
                         }

          =>Edit Post
               =In PostsController.php
                    public function edit(string $id)
                    {

                         $post = Post::findOrFail($id);
                         $attshows = Status::whereIn("id",[3,4])->get();
                         $statuses = Status::whereIn("id",[7,10,11])->get();
                         $tags = Tag::where("status_id",3)->get();
                         $types = Type::whereIn("id",[1,2])->get();

                         return view("posts.edit")->with("post",$post)->with("attshows",$attshows)->with("statuses",$statuses)->with("tags",$tags)->with("types",$types);
                    }

               =In edit.blade.php
                    <div class="col-md-12 mb-3">
                         <label for="title">Title <span class="text-danger">*</span></label>
                         <input type="text" name="title" id="title" class="form-control form-control-sm rounded-0" placeholder="Enter Post Title" value="{{ $post->title }}"/>
                    </div>

                    <div class="col-md-6">
                         <label for="type_id">Type <span class="text-danger">*</span></label>
                         <select name="type_id" id="type_id" class="form-control form-control-sm rounded-0">
                              @foreach($types as $type)
                                   <option value="{{$type->id}}"
                                        @if($type["id"] === $post["type_id"])
                                             selected
                                        @endif
                                   >{{ $type->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-6 mb-3">
                         <label for="fee">Fee <span class="text-danger">*</span></label>
                         <input type="number" name="fee" id="fee" class="form-control form-control-sm rounded-0" placeholder="Class Fee" value="{{ $post->fee }}"/>
                    </div>

                    <div class="col-md-12 mb-3">
                         <label for="content">Content <span class="text-danger">*</span></label>
                         <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{$post->content}}</textarea>
                    </div>

                    <div class="col-md-3">
                         <label for="tag_id">Type <span class="text-danger">*</span></label>
                         <select name="tag_id" id="tag_id" class="form-control form-control-sm rounded-0">
                              @foreach($tags as $tag)
                                   <option value="{{$tag->id}}"
                                        @if($tag->id === $post["tag_id"])
                                             selected
                                        @endif
                                   >{{ $tag->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-3">
                         <label for="attshow">Show on Att Form <span class="text-danger">*</span></label>
                         <select name="attshow" id="attshow" class="form-control form-control-sm rounded-0">
                              @foreach($attshows as $attshow)
                                   <option value="{{$attshow->id}}"
                                        @if($attshow["id"] === $post["attshow"])
                                             selected
                                        @endif
                                   >{{ $attshow->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-3">
                         <label for="name">Status <span class="text-danger">*</span></label>
                         <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                              @foreach($statuses as $status)
                                   <option value="{{$status->id}}" {{ ($status->id === $post->status_id) ? "selected" : "" }} >{{ $status->name }}</option>
                              @endforeach
                         </select>
                    </div>

               *Ternary Operator Condition Checking

               =>Old New Image Show
                    =In edit.blade.php
                         <div class="row">
                              <div class="col-md-6 text-sm-center">
                                   <img src="{{asset($post->image)}}" width="200" alt="{{$post->title}}"/>
                              </div>
                              <div class="col-md-6">
                                   <label for="image" class="gallery"><span>Choose Images</span></label>
                                   <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ $post->image }}" hidden/>
                              </div>
                         </div>

          =>Update Post
               =In PostsController.php
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "image" => "image|mimes:jpg,jpeg,png|max:1024",
                              "title" => "required|max:50|unique:posts,title,".$id,
                              "content" => "required",
                              "fee" => "required",
                              "startdate" => "required",
                              "enddate" => "required",
                              "starttime" => "required",
                              "endtime" => "required",
                              "type_id" => "required|in:1,2",
                              "tag_id" => "required",
                              "attshow" => "required|in:3,4",
                              "status_id" => "required|in:7,10,11",   
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         $post = Post::findOrFail($id);
                         $post->title = $request["title"];
                         $post->slug = Str::slug($request["name"]);
                         $post->content = $request["content"];
                         $post->fee = $request["fee"];
                         $post->startdate = $request["startdate"];
                         $post->enddate = $request["enddate"];
                         $post->starttime = $request["starttime"];
                         $post->endtime = $request["endtime"];
                         $post->type_id = $request["type_id"];
                         $post->tag_id = $request["tag_id"];
                         $post->attshow = $request["attshow"];
                         $post->status_id = $request["status_id"];
                         $post->user_id = $user_id;


                         // Remove Old Image
                         if($request->hasFile("image")){
                              $path = $post->image;

                              if(File::exists($path)){
                                   File::delete($path);
                              }
                         }

                         // Single Image Update
                         if($request->hasFile("image")){
                              $file = $request->file("image");
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$post['id'].$fname;
                              $file->move(public_path("assets/img/posts"),$imagenewname);
                              
                              $filepath = "assets/img/posts/".$imagenewname;
                              $post->image = $filepath;
                         }    

                         $post->save();
                         return redirect(route("posts.index"));
                    }

          =>Delete Post
               =In PostsController.php  
                    public function destroy(string $id)
                    {
                         $post = Post::findOrFail($id);
                         
                         // Remove Old Image
                         $path = $post->image;
                         if(File::exists($path)){
                              File::delete($path);
                         }
                         
                         $post->delete();
                         return redirect()->back();
                    }

          =>Show Post
               =In PostsController.php
                    public function show(string $id)
                    {
                         $post = Post::findOrFail($id);
                         return view("posts.show",["post"=>$post]);
                    }
               =In show.blade.php
                    <div class="col-md-6">
                         <i class="fas fa-user fa-sm"></i> <span>{{$post["tag"]["name"]}}</span>
                         <br/>
                         <i class="fas fa-user fa-sm"></i> <span>{{$post["type"]["name"]}} : {{$post->fee}} </span>
                         <br/>
                         <i class="fas fa-user fa-sm"></i> <span>{{$post["user"]["name"]}}</span>
                    </div>
                    <div class="col-md-6">
                         <i class="fas fa-file fa-sm"></i> <span>{{$post["attstatus"]["name"]}}</span>
                         <br/>
                         <i class="fas fa-calendar-alt fa-sm"></i> <span>{{date('d M Y',strtotime($post->created_at))}} | {{date('h:i:s A',strtotime($post->created_at))}}</span>
                         <br/>
                         <i class="fas fa-edit fa-sm"></i> <span>{{date('d M Y h:i:s A',strtotime($post->updated_at))}}</span>
                    </div>
               
          =>Commenting Feature
               =Migration
                    php artisan make:model Comment -m

                    =create_comments_table.php
                         $table->text("description");
                         $table->unsignedBigInteger("user_id");
                         $table->unsignedBigInteger("commentable_id");
                         $table->string("commentable_type");

                    php artisan migrate:status
                    php artisan migrate
               
               =In Model (Comment.php)

                    protected $table = "comments";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "description",
                         "user_id",
                         "commentable_id",
                         "commentable_type"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }
                    
               php artisan make:controller CommentsController

               =In CommentsController.php
                    public function store(Request $request)
                    {

                         $user = Auth::user();
                         $user_id = $user->id;

                         Comment::create([
                              "description"=>$request["description"],
                              "user_id"=>$user_id,
                              "commentable_id"=>$request["commentable_id"],
                              "commentable_type"=>$request["commentable_type"],
                         ]);
                         return redirect()->back();
                    }

               =In show.blade.php
                    <form action="{{route('comments.store')}}" method="POST">
                         @csrf
                         <div class="col-md-12 d-flex justify-between">
                              <textarea name="description" id="description"  class="form-control border-0 rounded-0" rows="1" style="resize:none;" placeholder="Comment here...."></textarea>
                              <button type="submit" class="btn btn-info btn-sm text-light ms-3"><i class="fas fa-paper-plane"></i></button>
                         </div>

                         <!-- Start Hidden Fields -->
                         <input type="hidden" name="commentable_id" id="commentable_id" value="{{$post->id}}" />
                         <input type="hidden" name="commentable_type" id="commentable_type" value="App\Models\Post" />
                         <!-- Start Hidden Fields -->

                    </form>

                    *commentable_id, commentable_type is passed as hidden field.
                         -user don't need to manually choose this fields
                         -it must be filled by the system

               =In Web 
                    Route::resource("comments",CommentsController::class);

               =>Showing others related comments
                    =In Model (Comments)
                         public function commentable(){
                              return $this->morphTo();
                         }
                    =In Model (Post, User)
                         public function comments(){
                              return $this->morphMany(Comment::class,"commentable");
                         }
                    
                    =In PostsController.php
                         public function show(string $id)
                         {
                              $post = Post::findOrFail($id);
                              // $comments = Comment::where("commentable_id",$post->id)->where("commentable_type","App\Models\Posts")->orderBy("created_at","desc")->get();
                              $comments = $post->comments()->orderBy("updated_at","desc")->get();
                              return view("posts.show",["post"=>$post,"comments"=>$comments]);
                         }
                         
                         *Simple comments retrieve must check "commentable_id" and "commenetable_type"   
                         *Relationship retrieve no need to to check commentable columns
                         *latest comments reach at the top with orderBy()

                    =In show.blade.php
                         <ul class="list-group chat-boxs">
                              @foreach($comments as $comment)
                                   <li class="list-group-item mt-2">
                                        <div>
                                             <p>{{$comment->description}}</p>
                                        </div>
                                        <div>
                                             <span class="small fw-bold  float-end">{{$comment->user["name"] }} | {{$comment->created_at->diffForHumans()}}</span>
                                             
                                        </div>
                                        
                                   </li>
                              @endforeach
                         </ul>

                         ....
                         @section("css")
                              <style type="text/css">
                                   .chat-boxs{
                                        height: 200px;
                                        overflow-y : scroll;
                                   }
                              </style>     

                         @endsection

                         *show comment details 
                         *human readable date formate changing
                         *add scroll bar for many comments
                    
          =>Class Days
               php artisan make:controller DaysController

               =>Migration
                    php artisan make:model Day -m              

                    =create_days_table.php
                         $table->string("name")->unique();
                         $table->string("slug");
                         $table->unsignedBigInteger("status_id");
                         $table->unsignedBigInteger("user_id");
                    
                    php artisan migrate:status
                    php artisan migrate
               
               =>In Web
                    Route::resource("days",DaysController::class);
               Days
                    Sunday
                    Monday
                    Tuesday
                    Wednesday
                    Thursday
                    Friday
                    Saturday

               =>Create Modal    
                    =In categories > index.blade.php
                         <a href="#createmodal" class="btn btn-primary btn-sm rounded-0" data-bs-toggle="modal">Create</a>

                         <!-- start create modal -->
                              <div id="createmodal" class="modal fade">
                                   <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content rounded-0">
                                             <div class="modal-header">
                                                  <h6 class="modal-title">Create Form</h6>
                                                  <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                             </div>

                                             <div class="modal-body">
                                                  <form id="{{route('categories.store')}}" action="" method="POST">
                                                       {{ csrf_field() }}
                                                       <div class="row align-items-end">
                                                            <div class="col-md-7">
                                                                 <label for="name">Name <span class="text-danger">*</span></label>
                                                                 <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                                            </div>
                                                            
                                                            <div class="col-md-3 form-group">
                                                                 <label for="status_id">Status</label>
                                                                 <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                                                      @foreach($statuses as $status)
                                                                           <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                      @endforeach     
                                                                 </select>
                                                            </div>
                                                            
                                   
                                                            <div class="col-md-2">
                                                                 <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                            </div>
                                                       </div>
                                                  </form>
                                             </div>

                                             <div class="modal-footer">

                                             </div>
                                        </div>
                                   </div>
                              </div>
                         <!-- end create modal -->

                         *data-bs-target="" don't need to set for <a> tag 
                         because <a> tag include href="" for target element

               =>Days in Create Post
                    =In PostsController.php
                         public function create()
                         {    
                              $attshows = Status::whereIn("id",[3,4])->get();
                              $days = Day::where("status_id",3)->get();
                              $statuses = Status::whereIn("id",[7,10,11])->get();
                              $tags = Tag::where("status_id",3)->get();
                              $types = Type::whereIn("id",[1,2])->get();

                              return view("posts.create",compact("attshows","days","statuses","tags","types"));
                         }
                    =In posts > create.blade.php
                         <div class="col-md-12 for-group">
                              <label for="">Days</label>
                              <div class="d-flex flex-wrap">
                                   @foreach($days as $idx=>$day)
                                        <div class="form-check form-switch mx-3">
                                             <input type="checkbox" name="day_id[]" id="day_id{{$idx}}" class="form-check-input" value="{{$day->id}}" checked/> <label for="day_id{{$idx}}">{{$day->name}}</label>
                                        </div>
                                   @endforeach
                              </div>
                         </div>

               =>Days of Post Storing method
                    Method 1
                         -days are stored at "posts" table
                              by adding 7 columns  
                         -these columns type are boolean
                    Method 2
                         -days are stored at "posts" table
                              by adding only 1 column  

                         -That column will be JSON format

                    Method 3
                         Many to Many
                         dayable
                         id post_id day_id

               =>Days of Post Store With (Polymorphic Many to Many)                              
                    =Migration
                         php artisan make:model Dayable -m
                         
                         =create_dayables_table.php
                              $table->integer("day_id");
                              $table->integer("dayable_id");
                              $table->string("dayable_type");
                         *id, and timestamps are dropped at this time.

                         php artisan migrate:status
                         php artisan migrate
                    
                    =In Model (Day)
                         protected $table = "dayables";
                         protected $fillable = [
                              "day_id",
                              "dayable_id",
                              "dayable_type"
                         ];
                    
                    =In PostsController.php
                         $post->save();

     
                         if($post->id){
                              // dd($request["day_id"]);

                              // create dayable
                              // Method 1
                              // if(count($request["day_id"]) > 0){
                                   
                              //     foreach($request["day_id"] as $key=>$value){
                              //         Dayable::create([
                              //             // "day_id"=>$request["day_id"][$key],
                              //             "day_id"=>$value,
                              //             "dayable_id"=>$post->id,
                              //             "dayable_type"=>$request["dayable_type"]
                              //         ]);
                              //     }
                              // }

                              // Methd 2
                              if(count($request["day_id"]) > 0){
                                             
                                   foreach($request["day_id"] as $key=>$value){
                                        $day = [
                                        // "day_id"=>$request["day_id"][$key],
                                        "day_id"=>$value,
                                        "dayable_id"=>$post["id"],
                                        "dayable_type"=>$request["dayable_type"]
                                        ];
                                        Dayable::insert($day);
                                   }
                              }

                         }
                         

                         *store days after saving post.
                         *Successfully saved post id is already generated. It is ready for use.
                         
                         *day_id is given as array. This array need to iterate a looping.
                              array:7 [
                              0 => "1"
                              1 => "2"
                              2 => "3"
                              3 => "4"
                              4 => "5"
                              5 => "6"
                              6 => "7"
                              ]
                              -only the checked days are in the arrays.
                         
                         *dayable_type can be written directly at the Controller because it is only for the post.
                              In CommentController, it can not be written directly and given from the form.

                    =In create.blade.php
                         <!-- start hidden field -->
                                   <input type="hidden" name="dayable_type" id="dayable_type" value="App\Models\Post" />
                         <!-- end hidden field -->
                    
                    *error(Unknown column 'updated_at' in 'field list')
                         timestamps() are dropped at the migrations. Laravel automatically insert these columns.
                    
                    =In Model Dayable.php
                         protected $timestamps = false;

                    *error (Access level to App\Models\Dayable::$timestamps must be public)
                         public $timestamps = false;
                    
                    *while error occur, new post is successfully saved to the posts table. becausse these errors occur after saving post.

                    *after inserting a post, days related to this post is stored in dayable table.
                    "dayables"
                    day_id    dayable_id     dayable_type
                    2         18             App\Model\Post
                    4         18   
                    6         18

               =>Days in Edit Post
                    =In Model (Post.php)
                         public function days(){
                              return $this->morphToMany(Day::class,"dayable");
                         }
                    
                    =In Model (Day.php)
                         public function posts(){
                              return $this->morphedByMany(Post::class,"dayable");
                         }

                    =In PostsController.php
                         public function edit(string $id)
                         {

                              $post = Post::findOrFail($id);
                              // dd($post); // Post object
                              $days = Day::where("status_id",3)->get();
                              $dayables = $post->days()->get();
                              // dd($dayables); // Day object
                              $attshows = Status::whereIn("id",[3,4])->get();
                              $statuses = Status::whereIn("id",[7,10,11])->get();
                              $tags = Tag::where("status_id",3)->get();
                              $types = Type::whereIn("id",[1,2])->get();

                              return view("posts.edit")->with("post",$post)->with("attshows",$attshows)->with("days",$days)->with("dayables",$dayables)->with("statuses",$statuses)->with("tags",$tags)->with("types",$types);
                         }
                         *Query laravel executing in background (study from error)
                              select `days`.*, `dayables`.`dayable_id` as `pivot_dayable_id`, `dayables`.`dayable_type` as `pivot_dayable_type` from `days` inner join `dayables` on `days`.`id` = `dayables`.`dayable_id` where `dayables`.`dayable_id` = 18 and `dayables`.`dayable_type` = App\Models\Post
                         *$dayables get the relative days with the post
                         *not working
                              @if($dayable['day_id'] === $day['id'])
                              -because it is retrieved from dummy table and not from regular table.
                         *Regular Post Object
                              App\Models\Post {#1411 ▼ // app\Http\Controllers\PostsController.php:137
                              #connection: "mysql"
                              #table: "posts"
                              #primaryKey: "id"
                              ....
                              #original: array:17 [
                                   "id" => 18
                                   "image" => null
                                   "title" => "React Js Batch 10"
                                   "slug" => ""
                                   "content" => "hello sir"
                                   "fee" => "90000.00"
                                   "startdate" => "2023-12-22"
                                   "enddate" => "2024-01-30"
                                   "starttime" => "06:17:00"
                                   "endtime" => "08:20:00"
                                   "type_id" => 1
                                   "tag_id" => 11
                                   "attshow" => 3
                                   "status_id" => 7
                                   "user_id" => 1
                                   "created_at" => "2024-01-14 17:18:36"
                                   "updated_at" => "2024-01-14 17:18:36"
                              ]

                         *Eloquent Collection Object
                              Illuminate\Database\Eloquent\Collection {#1415 ▼ // app\Http\Controllers\PostsController.php:140
                                   #items: array:3 [▼
                                   0 => App\Models\Day {#1404 ▼
                                        #connection: "mysql"
                                        #table: "days"
                                        #primaryKey: "id"
                                        ....
                                        #original: array:10 [▼
                                        "id" => 2
                                        "name" => "Monday"
                                        "slug" => "monday"
                                        "status_id" => 3
                                        "user_id" => 1
                                        "created_at" => "2024-01-13 15:27:05"
                                        "updated_at" => "2024-01-13 15:27:05"
                                        "pivot_dayable_id" => 18
                                        "pivot_day_id" => 2
                                        "pivot_dayable_type" => "App\Models\Post"
                                        ]
                                        ....
                                   }
                                   1 => App\Models\Day {#1427 ▶}
                                   2 => App\Models\Day {#1430 ▶}
                                   ]
                                   #escapeWhenCastingToString: false
                              }
                              *Dummy table columlns can be retrived with keyword pivot
                         
                         -it is essential to check 'original'
                         
                         *not working
                              @if($dayable['pivot_day_id'] === $day['id'])
                              -it has specific method to retrieve pivot.

                    =In posts > edit.blade.php
                         @foreach($days as $idx=>$day)
                              <div class="form-check form-switch mx-3">
                                   <input type="checkbox" name="day_id[]" id="day_id{{$idx}}" class="form-check-input" value="{{$day->id}}" 
                                        @foreach($dayables as $dayable)
                                             @if($dayable['id'] === $day['id'])
                                                  checked
                                             @endif
                                        @endforeach
                                   /> 
                                   <label for="day_id{{$idx}}">{{$day->name}}</label>
                              </div>
                         @endforeach

               =>Days in Show Post
                    =In PostsController.php
                         public function show(string $id)
                         {
                              $post = Post::findOrFail($id);
                              // $comments = Comment::where("commentable_id",$post->id)->where("commentable_type","App\Models\Posts")->orderBy("created_at","desc")->get();
                              $comments = $post->comments()->orderBy("updated_at","desc")->get();
                              $dayables = $post->days()->get();
                              return view("posts.show",["post"=>$post,"comments"=>$comments,"dayables"=>$dayables]);
                         }
                    =In posts > show.blade.php
                         <div class="col-md-6">
                              <i class="fas fa-calendar fa-sm"></i>
                              <span>
                                   @foreach($dayables as $dayable)
                                             {{$dayable["name"]}}, 
                                   @endforeach
                              </span>
                         </div>

               =>Days of Post Update
                    three condition
                    -remove existing days
                    -add days
                    -add and remove days

                    =My own method 1
                         $post->save();

                         if($request["day_id"] > 0){
                              // dd($request["day_id"]);
                              $post->days()->sync($request["day_id"]);
                         }else{
                              $post->days()->detach();
                         }

                    =Chingu method
                         if(count($request["day_id"] > 0)){
                              $post->days()->detach();

                              foreach($request["day_id"] as $key=>$value){
                                   Dayable::create([
                                   "day_id"=>$value,
                                   "dayable_id"=>$post->id,
                                   "dayable_type"=>$request["dayable_type"]
                                   ]);
                              }
                         }

                         *error - when no date is specified.
                              -at code of condition, count()
                         
                              
                         *code operation
                              firstly remove all days related with the post
                              lastly add the selected days for the post
                              at "dayable" table
                              -before edit
                                   day_id    dayable_id
                                   1         1
                                   1         2
                                   2         2
                              -after edit (adding another day for post one)
                                   day_id    dayable_id
                                   1         2
                                   2         2
                                   1         1
                                   4         1
                    
                    =My own method 2
                         $post->save();
                         
                         $post->days()->detach();
                         if(!empty($request["day_id"])){
                              foreach($request["day_id"] as $key=>$value){
                                   Dayable::create([
                                   "day_id"=>$value,
                                   "dayable_id"=>$post->id,
                                   "dayable_type"=>$request["dayable_type"]
                                   ]);
                              }
                         }
                         
                         
                    =With JS method
                         =In posts > edit.blade.php
                              @foreach($days as $idx=>$day)
                                   <div class="form-check form-switch mx-3">
                                        <input type="checkbox" name="day_id[]" id="day_id{{$idx}}" class="form-check-input dayactions" value="{{$day->id}}" 
                              ....

                              // Start Day Action
                              $(".dayactions").click(function(){
                                   var checkboxs = $("input[type='checkbox']");
                                   // console.log(checkboxs);
                                   
                                   var checked = checkboxs.filter(":checked").map(function(){
                                        // return this.value;
                                        $(this).attr("name","newday_id[]");
                                   });

                                   var unchecked = checkboxs.not(":checked").map(function(uncheck){
                                        // return this.value;
                                        $(this).attr("name","oldday_id[]");
                                        
                                        // console.log(uncheck);
                                   });

                                   // check or uncheck
                                   // if($(this).prop('checked')){
                                   //      // console.log("yes");
                                   //      console.log("checked");
                                   // }else{
                                   //      // console.log("no");
                                   //      console.log("unchecked");
                                   // }
                              });
                              // End Day Action
                              
                         *seperate the days into the group of checked and unchecked.
                         -checked group = newday_id
                         -unchecked group = oldday_id

                         =In PostsController.php
                               $post->save();
                              
                              // Start Day Action
                              // dd($request["newday_id"]); // null ,or [1 3 5]
                              
                                   if(isset($request["newday_id"])){
                                        // remove all day first
                                        foreach($request["newday_id"] as $key=>$value){
                                             $dayable = Dayable::where("dayable_id",$post["id"])->where("dayable_type",$request["dayable_type"]);
                                             $dayable->delete();
                                        }
                                        // add renewday
                                        foreach($request["newday_id"] as $key=>$value){
                                             $day = [
                                             // "day_id"=>$request["day_id"][$key],
                                             "day_id"=>$request["newday_id"][$key],
                                             "dayable_id"=>$post["id"],
                                             "dayable_type"=>$request["dayable_type"]
                                             ];
                                             Dayable::insert($day);
                                        }
                                   }
                              // End Day Action
                              -firstly remove all days related with the post
                              -lastly add the new days for the post
                              *no error but not working - when no date is specified.
                              
                              -problem solved
                                   if(isset($request["newday_id"]) || isset($request["oldday_id"])){
                                        // remove all days
                                        if(!empty($request["newday_id"])){
                                             
                                             // add new days
                                        }
                                   }


     =>Attendance Form
          =Migration
          php artisan make:model Attendance -m
          
          =crate_attendances_table.php
               $table->date("classdate");
               $table->unsignedBigInteger("post_id");
               $table->string("attcode");    
               $table->unsignedBigInteger("user_id");        
               

          php artisan migrate:status
          php artisan migrate

          php artisan make:controller AttendancesController

          =In Model (Attendance.php)
               protected $table = "attendances";
               protected $primaryKey = "id";
               protected $fillable = [
                    "classdate",
                    "post_id",
                    "attcode",
                    "user_id"
               ];

               public function post(){
                    return $this->belongsTo(Post::class);
               }

               public function user(){
                    return $this->belongsTo(User::class);
               }

          =>Create/Store Attendance + index

               =In AttendancesController.php
                    public function index()
                    {
                         $attendances = Attendance::all();
                         // $posts = Post::where("attshow",3)->get();
                         $posts = DB::table("posts")->where("attshow",3)->orderBy("title","asc")->get();
                         return view("attendances.index",compact("attendances","posts"));
                    }

                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "classdate" => "required|date",
                              "post_id" => "required",
                              "attcode" => "required"
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $attendance = new attendance();
                         $attendance->classdate = $request["classdate"];
                         $attendance->post_id = $request["post_id"];
                         $attendance->attcode = $request["attcode"];
                         $attendance->user_id = $user_id;
                         
                         $attendance->save();
                         return redirect(route("attendances.index"));
                    }
               
               =In index.blade.php
                    <form action="{{route('attendances.store')}}" method="POST">
                         {{ csrf_field() }}

                         <div class="row align-items-end">
                              <div class="col-md-3">
                                   <label for="classdate">Class Date <span class="text-danger">*</span></label>
                                   <input type="date" name="classdate" id="classdate" class="form-control form-control-sm rounded-0" value="{{ old('classdate') }}"/>
                              </div>

                              <div class="col-md-3">
                                   <label for="post_id">Class <span class="text-danger">*</span></label>
                                   <select name="post_id" id="post_id" class="form-control form-control-sm rounded-0">
                                        @foreach($posts as $post)
                                             {{-- <option value="{{$post['id']}}">{{$post['title']}}</option> --}}
                                             <option value="{{$post->id}}">{{$post->title}}</option> 
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-3">
                                   <label for="attcode">Attendance Code <span class="text-danger">*</span></label>
                                   <input type="text" name="attcode" id="attcode" class="form-control form-control-sm rounded-0" value="{{ old('attcode') }}"/>
                              </div>

                              <div class="col-md-3">
                                   <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                   <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                              </div>
                         </div>
                    </form>
               
               ** Retrieve data with DB:: method need to be careful
                    -can only get data as object
                    -can not get data as array
                         *error (Cannot use object of type stdClass as array)

               =>List Attendances

                    =In index.blade.php
                         <table id="mytable" class="table table-sm table-hover border">
               
                              <thead>
                                   <th>No</th>
                                   <th>Class</th>
                                   <th>Att Code</th>
                                   <th>By</th>
                                   <th>Class Date</th>
                                   <th>Created At</th>
                                   <th>Updated At</th>
                                   <th>Action</th>
                              </thead>
                    
                              <tbody>
                                   @foreach($attendances as $idx=>$attendance)
                                   <tr>
                                        <td>{{++$idx}}</td>
                                        <td>{{$attendance->post["title"]}}</td>
                                        <td>{{ $attendance->attcode }}</td>
                                        <td>{{ $attendance["user"]["name"] }}</td>
                                        <td>{{ $attendance->classdate }}</td>
                                        <td>{{ $attendance->created_at->format('d M Y') }}</td>
                                        <td>{{ $attendance->updated_at->format('d M Y') }}</td>
                                        <td>
                                             <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$attendance->id}}" data-name="{{$attendance->name}}" data-status="{{$attendance->status_id}}"><i class="fas fa-pen"></i></a>
                                        </td>
                                   </tr>
                                   @endforeach
                              </tbody>
                    
                         </table>

          =>Edit/Update Attendance + index
               =In index.blade.php
                    ....
                    <td>
                         <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$attendance->id}}" data-post_id="{{$attendance->post_id}}" data-attcode="{{$attendance->attcode}}"><i class="fas fa-pen"></i></a>
                    </td>
                    ....
                    
                    <!-- start edit modal -->
                         <div id="editmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Edit Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="POST">
                                                  {{ csrf_field() }}
                                                  {{ method_field('PUT') }}
                                                  <div class="row align-items-end">
                                                       
                                                       <div class="col-md-7 form-group">
                                                            <label for="editpost_id">Class <span class="text-danger">*</span></label>
                                                            <select name="post_id" id="editpost_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($posts as $post)
                                                                      {{-- <option value="{{$post['id']}}">{{$post['title']}}</option> --}} 
                                                                      <option value="{{$post->id}}">{{$post->title}}</option> 
                                                                 @endforeach     
                                                            </select>
                                                       </div>

                                                       <div class="col-md-3">
                                                            <label for="editattcode">Att Code <span class="text-danger">*</span></label>
                                                            <input type="text" name="attcode" id="editattcode" class="form-control form-control-sm rounded-0" value="{{ old('classdate') }}"/>
                                                       </div>
                                                       
                              
                                                       <div class="col-md-2">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                    <!-- end edit modal -->
                    ....
                    @section("scripts")
                         <script type="text/javascript">
                              $(document).ready(function(){
                                   // Start Edit Form
                                   $(document).on("click",".editform",function(e){
                                        
                                        $("#editpost_id").val($(this).attr("data-post_id"));
                                        $("#editattcode").val($(this).data("attcode"));
                                        
                                        const getid = $(this).attr("data-id");
                                        $("#formaction").attr("action",`/attendances/${getid}`);

                                        e.preventDefault();
                                   });
                                   // End Edit Form
                                   
                              });
                         </script>
                    @endsection
               
               =In AttendancesController.php
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "post_id" => "required",
                              "attcode" => "required"
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         $attendance = Attendance::findOrFail($id);
                         $attendance->post_id = $request["post_id"];
                         $attendance->attcode = $request["attcode"];
                         $attendance->user_id = $user_id;
                         $attendance->save();
                         return redirect(route("attendances.index"));
                    }

     =>Enrollment

          php artisan make:model Stage -m

          =Migration
               =create_stages_table.php
                    $table->string("name")->unique();
                    $table->string("slug");  
                    $table->unsignedBigInteger("status_id");
                    $table->unsignedBigInteger("user_id");

          php atisan migratel:status
          php artisan migrate

          =In Model (Stage.php)

          php artisan make:controller StagesController

          "stages"
               Approved
               Pending
               Reject
               Complete
               Incomplete
               Loading
               Processing
               Passed
               Request
               Waiting
               Verifying
               Verified

          php artisan make:model Enroll -m 

          =Migration
               =create_enrolls_table
                    $table->string("image")->nullable();
                    $table->unsignedBigInteger('post_id')->comment("new class");
                    $table->unsignedBigInteger('user_id');
                    $table->enum('stage_id',[1,2,3])->default(2)->comment("1=Approved, 2= Pending, 3=Reject");
                    $table->text("remark")->nullable();
               
               *comment() - to remark something for the column
               =In phpmyadmin
               -see at table 'Structure' Tab
               -see at 'Browse' Tab
     
          php atisan migratel:status
          php artisan migrate

          =In Model (Enroll.php)
               protected $table = "enrolls";
               protected $primaryKey = "id";
               protected $fillable = [
                    "image",
                    "post_id",
                    "user_id",
                    "stage_id",
                    "remark"
               ];

               public function stage(){
                    return $this->belongsTo(Stage::class);
               }

               public function user(){
                    return $this->belongsTo(User::class);
               }

          =In posts > show.blade.php
               ....
               <a href="{{route('posts.index')}}" class="btn btn-secondary btn-sm rounded-0">Close</a>
               <a href="#createmodal" class="btn btn-primary btn-sm rounded-0" data-bs-toggle="modal">Enroll</a>
               ....
               <!-- START MODAL AREA -->
                    <!-- start create modal -->
                    <div id="createmodal" class="modal fade">
                         <div class="modal-dialog modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Enroll Form</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <form id="" action="{{route('categories.store')}}" method="POST" enctype="multipart/form-data">
                                             {{ csrf_field() }}
                                             <div class="row align-items-end">
                                                  <div class="col-md-12 mb-3">
                                                       <label for="image" class="gallery"><span>Choose Images</span></label>
                                                       <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ old('image')}}" hidden/>
                                                  </div>
                                                  <div class="col-md-10">
                                                       <label for="remark">Remark <span class="text-danger">*</span></label>
                                                       <textarea type="text" name="remark" id="remark" class="form-control form-control-sm rounded-0" rows="3" placeholder="Enter Remark">{{ old('remark') }}</textarea>
                                                  </div>
                                                  
                                   
                                                  <div class="col-md-2">
                                                       <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                  </div>

                                                  <!-- Start Hidden Fields -->
                                                  <input type="hidden" name="post_id" value="{{$post->id}}" />
                                                  <!-- Start Hidden Fields -->
                                             </div>
                                        </form>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end create modal -->
               <!-- END MODAL AREA -->
               ....
               @section("css")....
               @section("scripts")....
          *form fields data can't be received at controller if not include
               enctype="multipart/form-data" 
          =In Controller
               php artisan make:controller EnrollsController
          
          =In EnrollsController.php
               public function store(Request $request)
               {
                    $this->validate($request,[
                         "image" => "image|mimes:jpg,jpeg,png|max:1024",
                    ]);

                    $user = Auth::user();
                    $user_id = $user->id;

                    $enroll = new Enroll();
                    $enroll->post_id = $request["post_id"];
                    $enroll->remark = $request["remark"];
                    $enroll->user_id = $user_id;

                    // Single Image Upload
                    if(file_exists($request["image"])){
                         $file = $request["image"];
                         $fname = $file->getClientOriginalName();
                         $imagenewname = uniqid($user_id).$enroll['id'].$fname;
                         // $file->move(public_path("enrolls/img"),$imagenewname);
                         $file->move(public_path("assets/img/enrolls"),$imagenewname);
                         
                         $filepath = "assets/img/enrolls/".$imagenewname;
                         $enroll->image = $filepath;
                    }    

                    $enroll->save();
                    return redirect()->back();
               }

               =>Restrict One User for only One Class
                    =In Post.php
                         public function checkenroll($userid){
                              return DB::table("enrolls")->where("post_id",$this->id)->where("user_id",$userid)->exists();
                         }

                    =In PostsController.php
                         public function show(string $id)
                         {    
                              $post = Post::findOrFail($id);
                              // dd($post->checkenroll(1)); // true
                              ....
                         }
                    =In posts > show.blade.php    
                         <a href="{{route('posts.index')}}" class="btn btn-secondary btn-sm rounded-0">Close</a>
                         @if(!$post->checkenroll($userdata->id))
                              <a href="#createmodal" class="btn btn-primary btn-sm rounded-0" data-bs-toggle="modal">Enroll</a>
                         @endif;    
                         <hr/>
                    
                    *'Enroll' button is hidden for the already enrolled post.
                    *'Enroll' button appear for the the post that is not enroled yet.

                    *$userdata represent authenticated user.

                    users
                    name           email
                    --------------------
                    admin          admin@gmail.com
                    aung aung      admin@gmail.com
                    su su          susu@gmail.com
                    yu yu          yuyu@gmail.com
