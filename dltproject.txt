=>DLT Project

     =move file
          bcj3 > admintemplatetwo > assets
          exercisetwo > public

          bcj3 > admintemplatetwo > css, js
          exercisetwo > public > assets > disc (disc folder created)

     =Dashboard page
          default dashboard page to customized dashboards page 

          php artisan make:controller DashboardsController -r
     
     =In DashboardsController.php

     =In Web
          Route::get("/dashboards",[DashboardsController::class,'index'])->name("dashboard.index");
          *use App\Http\Controllers\DashboardsController;

     =In View
          dashboards >
          =create index.blade.php

          =create adminindex.blade.php
          =create adminheader.blade.php (<!DOCTYPE HTML - <body>)
          =create adminfooter.blade.php (</body> - </html>)
          =create adminleftsitebar.blae.php (Start -End Left Navbar)


          =In adminindex.blde.php
               @include("layouts.adminheader")

               <div>
                    <!-- Start Site Setting -->
                    <div id="sitesettings" class="sitesettings">
                         <div class="sitesettings-item"><a href="javascript:void(0);" id="sitetoggle" class="sitetoggle"><i class="fas fa-cog ani-rotates"></i></a></div>
                    </div>
                    <!-- End Site Settin -->

                    <!-- Start Left Side Bar -->
                    @include("layouts.adminleftsidebar")
                    <!-- End Left Side Bar -->

                    <!-- Start Content Area -->
                    @yield("content")
                    <!-- End Content Area -->
               </div>
         
               @include("layouts.adminfooter")

     
          =In index.blade.php
               @extends("layouts.adminindex")

               @section("content")
                    <!-- Start Content Area -->
                    <section>
                         ....
                    </section>
                    <!-- End Content Area -->
               @endsection

          =In adminheader.blade.php
               <!-- Application Name -->
               <title>{{ config('app.name') }}</title>
               <!-- fav icon -->
               <link href="{{ asset('assets/img/fav/favicon.png') }}" rel="icon" type="image/png" sizes="16x16"/>
               <!-- jqueryui css1 js1 -->
               <link href="{{asset('./assets/libs/jquery-ui-1.13.2.custom/jquery-ui.min.css')}}" rel="stylesheet" type="text/css">
               <!-- custom css css1 -->
               <link href="{{ asset('assets/disc/css/style.css') }}" rel="stylesheet" type="text/css"/>
          
               <!-- Extra CSS -->
               @yield('css')

               =.env
                    APP_NAME="DLT Project"
          =In adminfooter.blade.php
               <!-- jqueryui css1 js1 -->
               <script src="{{asset('./assets/libs/jquery-ui-1.13.2.custom/jquery-ui.min.js')}}"></script>
               <!-- custom js js1 -->
               <script src="{{ asset('assets/disc/js/app.js') }}" type="text/javascript"></script>

          
     =>Display Authenticated user name
          =In app > Provider > AppServiceProvider.php
               public function boot(): void
               {
                    View::composer('*',function($view){
                         $view->with("userdata",Auth::user());
                    });
               }
               *use Illuminate\Support\Facades\View;
               *use Illuminate\Support\Facades\Auth;

          =In adminleftsidebar.blade.php
               <span class="text-muted small me-2">{{ $userdata["name"] }}</span>

     =>After login/register Redirect
          app > Providers > RouteServiceProvider.php

               // public const HOME = '/dashboard';
               public const HOME = '/dashboards';
          
          *user is redirectd to dashboards after sucessful authentication.

     =create filder students >
     =index.blade.php
     =create.blade.php

     =>Sticky Form
          -When validation error occur, all form field is empty. To protect the user from repeatedly filling the field.
          -get the previous filled value if error occur
               old('inputname')
          
          =In create.blade.php
               <input type="text" name="firstname" id="firstname" class="form-control form-control-sm rounded-0" placeholder="Enter First name" value="{{ old('firstname') }}"/>
               <textarea name="remark" id="remark" class="form-control rounded-0" rows="5" placeholder="Enter Remark">{{ old('remark')}}</textarea>

     =>Limiting text length
          =In index.blade.php
               <td>{{Str::limit($student->remark,10)}}</td>

     =>Formattng date time (laravel)
          =In index.blade.php
               <td>{{ $student->created_at->format('d M Y') }}</td>
               <td>{{ $student->updated_at->format('d M Y') }}</td>

     =>Delete Best Practice 
          =In index.blade.php
                    <td>
                         <a href="{{ route('students.edit',$student->id) }}" class="text-info"><i class="fas fa-pen"></i></a>
                         <!-- <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$student->id}}"><i class="fas fa-trash-alt"></i></a> -->
                         <!-- <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a> -->
                         <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$student->regnumber}}"><i class="fas fa-trash-alt"></i></a>
                    
                    </td>
                    ....
                    <!-- <form id="formdelete-{{ $student->id }}" class="" action="{{route('students.destroy',$student->id)}}" method="POST"> -->
                    <!-- <form id="formdelete-{{ $idx }}" class="" action="{{route('students.destroy',$student->id)}}" method="POST"> -->
                    <form id="formdelete-{{ $student->regnumber }}" class="" action="{{route('students.destroy',$student->id)}}" method="POST">
                         @csrf
                         @method("DELETE")
                    </form>

               @section("scripts")
                    <script type="text/javascript">
                         $(document).ready(function(){
                              $(".delete-btns").click(function(){
                                   // console.log('hay');
                         
                                   var getidx = $(this).data("idx");
                                   // console.log(getidx);

                                   if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                                        $('#formdelete-'+getidx).submit();
                                        return true;
                                   }else{
                                        false;
                                   }
                              });
                         });
                    </script>
               @endsection

          -Comfirm user to delete this student id (it is not very user-friendly. It can be complex).
          -Comfirm user to delete this current number or registration number (it is secretly delete the student id in background).

     =>user_id, status_id join
          =In Model (Student.php)
               public function user(){
                    return $this->belongsTo("App\Models\User");
               }

               public function status(){
                    // return $this->belongsTo(Status::class); // send all column
                    // return $this->belongsTo(Status::class)->select("name"); // send single column
                    return $this->belongsTo(Status::class)->select(["id","name","slug"]); // send multi column
               }

          =In index.blade.php
               <td>{{ $student->status->name }}</td>
               <td>{{ $student->user["name"] }}</td>
          =In show.blade.php
               <i class="fas fa-user fa-sm"></i> <span>{{$student["user"]["name"]}}</span>

          
          *show user name and status name by joining the tables

     =>Formattng date time (php)
          =In show.blade.php
               <i class="fas fa-calendar-alt fa-sm"></i> <span>{{date('d M Y',strtotime($student->created_at))}} {{date('h:i:s A',strtotime($student->created_at))}}</span>
               <br/>
               <i class="fas fa-edit fa-sm"></i> <span>{{date('d M Y h:i:s A',strtotime($student->updated_at))}}</span>

     =>Setting server timezone
          config > app.php
               'timezone' => 'Asia/Yangon',

     =>Update & Validate
          =In StudentsController.php
               public function update(Request $request, string $id)
               {
                    $this->validate($request,[
                         // "regnumber" => "required|unique:students,regnumber",
                         "regnumber" => "required|unique:students,regnumber,".$id,
                         "firstname"=>"required",
                         "lastname"=>"required",
                         "remark" => "max:1000"
                    ]);

                    $user = Auth::user();
                    $user_id = $user["id"];

                    $student = Student::findOrFail($id);
                    $student->regnumber = $request["regnumber"];
                    $student->firstname = $request["firstname"];
                    $student->lastname = $request["lastname"];
                    $student->slug = Str::slug($request["firstname"]);
                    $student->remark = $request["remark"];
                    $student->user_id = $user_id;

                    $student->save();
                    return redirect(route("students.index"));
               }

          *slug name will be updated, when the firstname is modified
          - validation error and the updated information is not stored 
               if check "regnumber" Unique and we only change firstname, not the regnumber field
          -Unique check the field is not exist in the database table

          - Forcing A Unique Rule To Ignore A Given ID
               unique rule pass for the student id.
               *update() must carefully specify id to ignore unique rule

     => Small resource CRUD (Single Page)
          =>Create/Store + index
               =index.blade.php
                    <div class="col-md-12">
                         <!-- http://127.0.0.1:8000/statuses -->
                         <form action="{{route('statuses.store')}}" method="POST">
                              {{ csrf_field() }}
                              <div class="row align-items-end">
                                   <div class="col-md-6">
                                        <label for="name">Name <span class="text-danger">*</span></label>
                                        <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                   </div>

                                   <div class="col-md-6 ">
                                        <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                        <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                                   </div>
                              </div>
                         </form>
                    </div>
                    ....

                    <tbody>
                         @foreach($statuses as $idx=>$status)
                         <tr>
                              <td>{{++$idx}}</td>
                              <td>{{ $status->name }}</td>
                              <td>{{ $status->user["name"] }}</td>
                              <td>{{ $status->created_at->format('d M Y') }}</td>
                              <td>{{ $status->updated_at->format('d M Y') }}</td>
                              
                         </tr>
                         @endforeach
                    </tbody>

               =In StatusesController.php
                    public function index()
                    {
                         $statuses = Status::all();
                         return view("statuses.index",compact("statuses"));
                    }

                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|unique:statuses,name",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $status = new Status();
                         $status->name = $request["name"];
                         $status->slug = Str::slug($request["name"]);
                         $status->user_id = $user_id;

                         $status->save();
                         return redirect(route("statuses.index"));
                    }
                    *This time use Request.
                    -We will study StatusCreateRequest later.

                    -No longer require create().
          
          =>Read 
               -Don't need to use show() because resource is too small.
          =>Delete
               =In index.blade.php
                    <td>
                         <a href="{{ route('statuses.edit',$status->id) }}" class="text-info"><i class="fas fa-pen"></i></a>
                         <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                    
                    </td>
                    <form id="formdelete-{{ $idx }}" class="" action="{{route('statuses.destroy',$status->id)}}" method="POST">
                         @csrf
                         @method("DELETE")
                    </form>
               =In StatusesController.php
                    public function destroy(string $id)
                    {
                         $student = Status::findOrFail($id);
                         $student->delete();
                         return redirect()->back();
                    }
          
          =>Edit/Update + index (Single Page)
               =In index.blade.php
                    <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$status->id}}" data-name="{{$status->name}}"><i class="fas fa-pen"></i></a>
                    ....

                    <!-- START MODAL AREA -->
                         <!-- start edit modal -->
                              <div id="editmodal" class="modal fade">
                                   <div class="modal-dialog modal-sm modal-dialog-centered">
                                        <div class="modal-content">
                                             <div class="modal-header">
                                                  <h6 class="modal-title">Edit Form</h6>
                                                  <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                             </div>

                                             <div class="modal-body">
                                                  <form id="formaction" action="" method="POST">
                                                       {{ csrf_field() }}
                                                       {{ method_field('PUT') }}
                                                       <div class="row align-items-end">
                                                            <div class="col-md-8">
                                                                 <label for="editname">Name <span class="text-danger">*</span></label>
                                                                 <input type="text" name="name" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                                            </div>
                                   
                                                            <div class="col-md-2">
                                                                 <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                            </div>
                                                       </div>
                                                  </form>
                                             </div>

                                             <div class="modal-footer">

                                             </div>
                                        </div>
                                   </div>
                              </div>
                         <!-- end edit modal -->
                    <!-- END MODAL AREA -->      

                    ....

                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         // console.log($(this).attr("data-id"),$(this).attr("data-name"));
                         
                         $("#editname").val($(this).attr("data-name"));
                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("action",`/statuses/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form
               
               =In StatusesController.php

                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => "required|unique:statuses,name,".$id,
                         ]);

                         $user = Auth::user();
                         $user_id = $user['id'];

                         $status = Status::findOrFail($id);
                         $status->name = $request["name"];
                         $status->slug = Str::slug($request["name"]);
                         $status->user_id = $user_id;

                         $status->save();
                         return redirect(route("statuses.index"));
                    }
                    -No longer require edit().

               *Show the current item information in edit modal 
                    -modal box with bootstrap
                    -link modal box with edit btn
                    -"id", "name" pass from edit btn
                    -clicking edit btn, set "name" to the edit form input field 

               *if modal form is set to action="{{route('statuses.update',$status->id)}}",
                    the url is http://127.0.0.1:8000/statuses/14
                    -change in any item will only change the last item because it is outside the loop
                    -if there is no row in database, it will get error (undefined variable) since it didn't even enter the loop 
               
               *atomatically change update url of current item
                    -clicking edit btn, dynamically set edit form action url with the current item "id" 


     =>Image + Select box
          php artisan make:controller RolesController -r
          php artisan make:model Role -m 

          =In Web
               *under Auth
               Route::resource("roles",RolesController::class);

          =Migration
               =create_roles_table.php
                    $table->string("image")->nullable();
                    $table->string("name");
                    $table->string("slug");
                    $table->unsignedBigInteger("status_id")->default("3");
                    $table->unsignedBigInteger("user_id");

               php artisan migrate:status
               php artisan migrate

          =In Model (Role.php)
               protected $table = "roles";
               protected $primaryKey = "id";
               protected $fillable = [
                    "image",
                    "name",
                    "slug",
                    "status_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }

          =>Single Image Preview
               =In create.blade.php
                    jQuery image preview html css js        
                    filereader.onload = function(e){
                         $(output).html(""); 
                         $($.parseHTML('<img>')).attr('src',e.target.result).appendTo(output);
                    }
                    *Firstly repeatedly choosing image show unnecessary previous selected image.
                         -Solution for this is, output element's html is set empty, preparing ready to show new image.

          =>Status Option
               =In RolesController.php
                    public function create()
                    {    
                         //$statuses = Status::all(); // get all statuses
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("roles.create",compact("statuses"));
                    }

               =In create.blade.php
                    <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                         <!-- <option value="3">On</option>
                         <option value="4">On</option> -->

                         @foreach($statuses as $status)
                              <option value="{{$status->id}}">{{ $status->name }}</option>
                         @endforeach
                    </select>

                    *dynamically get statuses from database
          
          =>Image Store With Selected Role
               =In RolesController.php
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|max:50|unique:roles,name",
                              "image" => "image|mimes:jpg,jpeg,png|max:1024",
                              "status_id" => "required|in:3,4",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $role = new Role();
                         $role->name = $request["name"];
                         $role->slug = Str::slug($request["name"]);
                         $role->status_id = $request["status_id"];
                         $role->user_id = $user_id;

                         // Single Image Upload
                         if(file_exists($request["image"])){
                              $file = $request["image"];
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$role['id'].$fname;
                              $file->move(public_path("assets/img/roles"),$imagenewname);
            
                              $filepath = "assets/img/roles/".$imagenewname;
                              $role->image = $filepath;
                         }    

                         $role->save();
                         return redirect(route("roles.index"));
                    }
                    *update() needed to be careful than store() if UNIQUE rule is declared,
                         other rules should be defined in front of UNIQUE for the clarity.
                    -Whatever view status_id change, validation rule is not match unless 3 or 4.
          
                    
                    public > foldername = routename
                         $file->move(public_path("roles/img"),$imagenewname);
                         $filepath = "roles/img".$imagenewname;

                    *error
                         Not Found
                         The requested resource /roles was not found on this server.
                    -However, roles/index can't be opened, create and other page can be opened.
                    -Although error occur, the role record and image file (public>roles) are inserted successfully.
          
          =>Image View
               =index.blade.php    
                    <td><img src="{{ asset($role->image) }}" class="rounded-circle" alt="{{$role->name}}" width="20" height="20"/> <a href="{{route('roles.show',$role->id)}}">{{$role->name}}</a></td>
                    
               *asset() use for the file in project folder
               *real world project use aws(amazone web service) and image store as http link
                    so directly give src="$role->image"

          =>Image Edit With Selected Role
               =In RolesController.php
                    public function edit(string $id)
                    {
                         $role = Role::findOrFail($id);
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("roles.edit")->with("role",$role)->with("statuses",$statuses);
                    }

               option value = 2 
               equal to
               column value = 2

               <option value="1">myanmar</option>
               "country" column = 2
               *'selected' attribute is to an select option 

               =In index.blade.php
                    <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                         @foreach($statuses as $status)
                              <option value="{{$status->id}}" 
                                   @if($status['id'] === $role->status_id)
                                        selected
                                   @endif
                              >{{ $status->name }}</option>
                         @endforeach
                    </select>
                    -show the statuses and highlight the selected status

                    <form action="/roles/{{$role->id}}" method="POST" enctype="multipart/form-data">
                         @csrf
                         @method("PUT")

                         <div class="row">

                              <div class="col-md-4">
                                   <div class="row">
                                        <div class="col-md-6 text-sm-center">
                                             <img src="{{ asset($role->image) }}" class="" alt="{{$role->name}}" width="200"/>
                                        </div>
                                        <div class="col-md-6">
                                             <label for="image" class="gallery"><span>Choose Images</span></label>
                                        </div>
                                   </div>  
                              </div>
                    -one part show the previous image and another part show the newly changed image

          =>Image Update
               =In RolesController.php  
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => ["required","max:50","unique:roles,name,".$id],
                              "image" => ["image","mimes:jpg,jpeg,png","max:1024"],
                              "status_id" => ["required","in:3,4"],
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $role = Role::findOrFail($id);
                         $role->name = $request["name"];
                         $role->slug = Str::slug($request["name"]);
                         $role->status_id = $request["status_id"];
                         $role->user_id = $user_id;

                         // Remove Old Image
                         if($request->hasFile("image")){
                              $path = $role->image;

                              if(File::exists($path)){
                                   File::delete($path);
                              }
                         }

                         // Single Image Upload
                         if($request->hasFile("image")){
                              $file = $request->file("image");
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$role['id'].$fname;
                              $file->move(public_path("assets/img/roles"),$imagenewname);
                              
                              $filepath = "assets/img/roles/".$imagenewname;
                              $role->image = $filepath;
                         }    

                         $role->save();
                         return redirect(route("roles.index"));
                    }
                    *Validation can be written as array.
          
          =>Image Delete
               =In RolesController.php
                    public function destroy(string $id)
                    {
                         $role = Role::findOrFail($id);
                         
                         // Remove Old Image
                         $path = $role->image;
                         if(File::exists($path)){
                              File::delete($path);
                         }
                         
                         $role->delete();
                         return redirect()->back();
                    }
          -laravel has reload and reloading problem.
          -Adding javascript is the solution for the problem. (Single File Create/Edit)

          Laravel 
          -Large Solid File is given.
          -Long Time To download the file

          React js
          -Break the heavy workloads into Components
          -Combine seperate components into a single file
          -better performance

     =>Fix Analysis
          Statuses
               'Active'
               'Inactive'
               'On'
               'Off'
               'Online'
               'Offline'
               'Public'
               'Private'
               'Friend Only'
               'Member Only'
               'Only Me'
               'Enable'
               'Disable'
               'Ban'
               'Unban'
               'Block'
               'Unblock'
               'Terminate'

     =>Small resource + Select box
          php artisan make:controller TypesController 

          =In Migration
               php artisan make:model Type -m
               =create_types_table.php
                    up()
                         $table->string("name")->unique();
                         $table->string("slug");
                         $table->unsignedBigInteger("status_id");
                         $table->unsignedBigInteger("user_id");
                         $table->timestamps();

               php artisan migrate:status
               php artisan migrate

          =In Web
               Route::resource("types",TypesController::class);

          =>Check Route
               php artisan route:list
               php artisan route:clear
               php artisan route:cache

               *if the code is all fine and route is not ready
                    it must be the problem of cache, so clear the cache. 
          
          =>Create/Store + index With Selected Option
               =In TypesController.php
                    public function index()
                    {
                         $types = Type::all();
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("types.index",compact("types","statuses"));
                    }
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|max:50|unique:types",
                              "status_id" => "required|in:3,4",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $type = new Type();
                         $type->name = $request["name"];
                         $type->slug = Str::slug($request["name"]);
                         $type->status_id = $request["status_id"];
                         $type->user_id = $user_id;
                         $type->save();
                         return redirect(route("types.index"));
                    }
               =In index.blade.php
                    <div class="col-md-12">
                         <form action="{{route('types.store')}}" method="POST">
                              {{ csrf_field() }}

                              <div class="row align-items-end">
                                   <div class="col-md-4">
                                        <label for="name">Name <span class="text-danger">*</span></label>
                                        <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Type Name" value="{{ old('name') }}"/>
                                   </div>

                                   <div class="col-md-4">
                                        <label for="status_id">Status</label>
                                        <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                             @foreach($statuses as $status)
                                                  <option value="{{$status['id']}}">{{$status['name']}}</option>
                                             @endforeach     
                                        </select>
                                   </div>

                                   <div class="col-md-4">
                                        <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                        <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                                   </div>
                              </div>
                         </form>
                    </div>
                    ....
                    <tbody>
                         @foreach($types as $idx=>$type)
                         <tr>
                              <td>{{++$idx}}</td>
                              <td>{{$type["name"]}}</td>
                              <td>{{ $type->status->name }}</td>
                              <td>{{ $type["user"]["name"] }}</td>
                              <td>{{ $type->created_at->format('d M Y') }}</td>
                              <td>{{ $type->updated_at->format('d M Y') }}</td>
                              <td>
                                   <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$status->id}}" data-name="{{$status->name}}"><i class="fas fa-pen"></i></a>
                                   <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                              </td>
                              <form id="formdelete-{{ $idx }}" class="" action="{{route('types.destroy',$type->id)}}" method="POST">
                                   @csrf
                                   @method("DELETE")
                              </form>
                         </tr>
                         @endforeach
                    </tbody>

          =>Delete
               public function destroy(string $id)
               {
                    $type = Type::findOrFail($id);
                    $type->delete();
                    return redirect()->back();
               }

          =>Edit/Update + index With Selected Option
               =In index.blade.php 
                    <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$type->id}}" data-name="{{$type->name}}" data-status="{{$type->status_id}}"><i class="fas fa-pen"></i></a>
                    ....

                    <!-- START MODAL AREA -->
                         <!-- start edit modal -->
                         <div id="editmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Edit Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="POST">
                                                  {{ csrf_field() }}
                                                  {{ method_field('PUT') }}
                                                  <div class="row align-items-end">
                                                       <div class="col-md-7">
                                                            <label for="editname">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="name" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                                       </div>
                                                       
                                                       <div class="col-md-3 form-group">
                                                            <label for="editstatus_id">Status</label>
                                                            <select name="status_id" id="editstatus_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($statuses as $status)
                                                                      <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>
                                                       
                              
                                                       <div class="col-md-2">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- end edit modal -->
                    <!-- END MODAL AREA -->
                    ....
                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         
                         $("#editname").val($(this).attr("data-name"));
                         $("#editstatus_id").val($(this).data("status"));
                         
                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("action",`/types/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form
               *setting select box value automatically select that value 

               =In TypesController.php
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => ["required","max:50","unique:types,name,".$id],
                              "status_id" => ["required","in:3,4"],
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         $type = Type::findOrFail($id);
                         $type->name = $request["name"];
                         $type->slug = Str::slug($request["name"]);
                         $type->status_id = $request["status_id"];
                         $type->user_id = $user_id;
                         $type->save();
                         return redirect(route("types.index"));
                    }

               *It immediately change the newly updated status.Because of php reload feature.
               *Later version will integrate switch to on/of and it doesn't update the value instantly.
               
          -----------------------------------------------------------------
          -hw
               create resources like statuses
                    city
                    country
                    gender

               php artisan make:model City -m
               php artisan make:model Country -m
               php artisan make:model Gender -m

               php artisan make:controller CitiesController -r
               php artisan make:controller CountriesController -r
               php artisan make:controller GendersController -r

               =Migration
                    up()
                         $table->string("name");
                         $table->string("slug");
                         $table->unsignedBigInteger('user_id');
               =In Model

                    protected $table = "statuses";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "name",
                         "slug",
                         "user_id"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }
          
          -hw
               category 
               tag

               (name, slug, status_id, user_id)
          ----------------------------------------------------------

     =>On/Off Switch Button 
          =Create Category & Tag as types
          
          =>Migration

               php artisan make:model Category -m
               php artisan make:model Tag -m

               =create_categories_table.php
               =create_tags_table.php
                    $table->string("name")->unique();
                    $table->string("slug");  
                    $table->unsignedBigInteger("status_id");
                    $table->unsignedBigInteger("user_id");

               php artisan make:controller TagsController -r
               php artisan make:controller CategoriesController -r

          =In categories > index.blade.php
               <td>
                    <div class="form-check form-switch">
                         <input type="checkbox" class="form-check-input" {{ $category->status_id === 3 ? "checked" : "" }} />
                    </div>
               </td>

          Tags
               WDF
               CSS Animation
               jQuery
               Bootstrap Projects
               Mysql
               Tailwind CSS
               JSON & Firebase
               ES6
               PHP
               Laravel
               React
               Node 
               Linux (Ubuntu)
               AWS

     =>Class
          
          =Migration
               php artisan make:model Post -m
               
               =crate_posts_table.php
                    $table->string("image")->nullable();
                    $table->string("title");
                    $table->string("slug");
                    $table->longText("content");
                    $table->decimal("fee",8,2)->default(0);
                    $table->date("startdate")->nullable();
                    $table->date("enddate")->nullable();
                    $table->time("starttime")->nullable();
                    $table->time("endtime")->nullable();
                    $table->unsignedBigInteger("type_id");
                    $table->unsignedBigInteger("tag_id");
                    $table->unsignedBigInteger("attshow")->default("4");
                    $table->unsignedBigInteger("status_id")->default("1");
                    $table->unsignedBigInteger("user_id");

               php artisan migrate:status
               php artisan migrate

               =In Model (Post)
                    protected $table = "posts";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "image",
                         "title",
                         "slug",
                         "content",
                         "fee",
                         "startdate",
                         "enddate",
                         "starttime",
                         "starttime",
                         "type_id",
                         "tag_id",
                         "attshow",
                         "status_id",
                         "user_id"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }

                    public function status(){
                         return $this->belongsTo(Status::class);
                    }

                    public function tag(){
                         return $this->belongsTo(Tag::class);
                    }

                    public function type(){
                         return $this->belongsTo(Type::class);
                    }

          php artisan make:controller PostsController

     
          =>Create Post (Class)
               =In PostsController.php
                    public function create()
                    {    
                         $attshows = Status::whereIn("id",[3,4])->get();
                         $statuses = Status::whereIn("id",[7,10,11])->get();
                         $tags = Tag::where("status_id",3)->get();
                         $types = Type::whereIn("id",[1,2])->get();

                         return view("posts.create",compact("attshows","statuses","tags","types"));
                    }
                    *attshows for whether to show or not to show this class in attendance form - on/off (it is the borrowed property from the statuses)
                    *statuses for visibility of this class (private/public/member only)
                    *tags for the course of this class to filter the classes with the course name
                    *types for the kind of this class (free or paid)

               =In create.blade.php
                    ....
                    <div class="col-md-6">
                         <label for="type_id">Type <span class="text-danger">*</span></label>
                         <select name="type_id" id="type_id" class="form-control form-control-sm rounded-0">
                              @foreach($types as $type)
                                   <option value="{{$type->id}}">{{ $type->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-6 mb-3">
                         <label for="fee">Fee <span class="text-danger">*</span></label>
                         <input type="number" name="fee" id="fee" class="form-control form-control-sm rounded-0" placeholder="Class Fee" value="{{ old('fee') }}"/>
                    </div>

                    <div class="col-md-12 mb-3">
                         <label for="content">Content <span class="text-danger">*</span></label>
                         <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{ old('content') }}</textarea>
                    </div>

                    <div class="col-md-3">
                         <label for="tag_id">Type <span class="text-danger">*</span></label>
                         <select name="tag_id" id="tag_id" class="form-control form-control-sm rounded-0">
                              @foreach($tags as $tag)
                                   <option value="{{$tag->id}}">{{ $tag->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-3">
                         <label for="attshow">Show on Att Form <span class="text-danger">*</span></label>
                         <select name="attshow" id="attshow" class="form-control form-control-sm rounded-0">
                              @foreach($attshows as $attshow)
                                   <option value="{{$attshow->id}}">{{ $attshow->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-3">
                         <label for="name">Status <span class="text-danger">*</span></label>
                         <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                              @foreach($statuses as $status)
                                   <option value="{{$status->id}}">{{ $status->name }}</option>
                              @endforeach
                         </select>
                    </div>
                    ....

               =>Hide File Input  
                    =In create.blade.php     
                    <div class="row">
                         <div class="col-md-12 mb-3">
                              <label for="image" class="gallery"><span>Choose Images</span></label>
                              <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ old('image')}}" hidden/>
                         </div>

                         <div class="col-md-6 mb-3">
                              <label for="startdate">Start Date <span class="text-danger">*</span></label>
                              <input type="date" name="startdate" id="startdate" class="form-control form-control-sm rounded-0" value="{{ old('startdate') }}"/>
                         </div>

                         <div class="col-md-6 mb-3">
                              <label for="enddate">End Date <span class="text-danger">*</span></label>
                              <input type="date" name="enddate" id="enddate" class="form-control form-control-sm rounded-0" value="{{ old('enddate') }}"/>
                         </div>

                         <div class="col-md-6 mb-3">
                              <label for="starttime">Start Time <span class="text-danger">*</span></label>
                              <input type="time" name="starttime" id="starttime" class="form-control form-control-sm rounded-0" value="{{ old('starttime') }}"/>
                         </div>

                         <div class="col-md-6 mb-3">
                              <label for="endtime">End Time <span class="text-danger">*</span></label>
                              <input type="time" name="endtime" id="endtime" class="form-control form-control-sm rounded-0" value="{{ old('endtime') }}"/>
                         </div>
                    </div>

          =>Store Post 
               =In PostsController.php
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "image" => "image|mimes:jpg,jpeg,png|max:1024",
                              "title" => "required|max:50|unique:posts,title",
                              "content" => "required",
                              "fee" => "required",
                              "startdate" => "required",
                              "enddate" => "required",
                              "starttime" => "required",
                              "endtime" => "required",
                              "type_id" => "required|in:1,2",
                              "tag_id" => "required",
                              "attshow" => "required|in:3,4",
                              "status_id" => "required|in:7,10,11",   
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $post = new Post();
                         $post->title = $request["title"];
                         $post->slug = Str::slug($request["name"]);
                         $post->content = $request["content"];
                         $post->fee = $request["fee"];
                         $post->startdate = $request["startdate"];
                         $post->enddate = $request["enddate"];
                         $post->starttime = $request["starttime"];
                         $post->endtime = $request["endtime"];
                         $post->type_id = $request["type_id"];
                         $post->tag_id = $request["tag_id"];
                         $post->attshow = $request["attshow"];
                         $post->status_id = $request["status_id"];
                         $post->user_id = $user_id;

                         // Single Image Upload
                         if(file_exists($request["image"])){
                              $file = $request["image"];
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$post['id'].$fname;
                              // $file->move(public_path("posts/img"),$imagenewname);
                              $file->move(public_path("assets/img/posts"),$imagenewname);
                              
                              $filepath = "assets/img/posts/".$imagenewname;
                              $post->image = $filepath;
                         }    

                         $post->save();
                         return redirect(route("posts.index"));
                    }

          =>List All Posts
               
               =>Joining Customize Foriegn Key name

                    =In PostsController.php
                         public function attstatus(){
                                        // related, foreignKey
                              return $this->belongsTo(Status::class,"attshow");
                                                       // related, foreignKey, ownerKey
                              // return $this->belongsTo(Status::class,"attshow","id");
                         }

                         
                         public function type(){
                                                            // related
                              // return $this->belongsTo(Type::class);
                                                            // related, foreignKey
                              // return $this->belongsTo(Type::class,"type_id");
                                                       // related, foreignKey, ownerKey
                              return $this->belongsTo(Type::class,"type_id","id");

                         }
                    
                    *laravel automatically recognize foreign key name by the naming convention rule of 'basetable_column'
                    *Customize foreign key name require additional parameter to pass.
                    *$this->belongsTo(relatedtable,foreignkey,primarykey);

                    =In index.blade.php
                         @foreach($posts as $idx=>$post)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td><img src="{{ asset($post->image) }}" class="rounded-circle" alt="{{$post->title}}" width="20" height="20"/> <a href="{{route('posts.show',$post->id)}}">{{ Str::limit($post->title,20) }}</a></td>
                                   <td>{{ $post->startdate }}</td>
                                   <td>{{ $post->enddate }}</td>
                                   <td>{{ $post->starttime }}</td>
                                   <td>{{ $post->endtime }}</td>
                                   <td>{{ $post->fee }}</td>
                                   <td>{{ $post->type->name }}</td>
                                   <td>{{ $post->tag->name }}</td>
                                   <td>{{ $post->attstatus["name"] }}</td>
                                   <td>{{ $post->status["name"] }}</td>
                                   <td>{{ $post->user["name"] }}</td>
                                   <td>{{ $post->created_at->format('d M Y') }}</td>
                                   <td>{{ $post->updated_at->format('d M Y') }}</td>
                                   <td>
                                        <a href="{{ route('posts.edit',$post->id) }}" class="text-info"><i class="fas fa-pen"></i></a>
                                        <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                                   </td>
                                   <form id="formdelete-{{ $idx }}" class="" action="{{route('posts.destroy',$post->id)}}" method="POST">
                                        @csrf
                                        @method("DELETE")
                                   </form>
                              </tr>
                              @endforeach
                    =>Be Careful
                         column name = method name
                         *Error

                         <td>{{ $post->attshow["name"] }}</td>

                          public function attstatus(){
                              return $this->belongsTo(Status::class,"attshow");
                         }

          =>Edit Post
               =In PostsController.php
                    public function edit(string $id)
                    {

                         $post = Post::findOrFail($id);
                         $attshows = Status::whereIn("id",[3,4])->get();
                         $statuses = Status::whereIn("id",[7,10,11])->get();
                         $tags = Tag::where("status_id",3)->get();
                         $types = Type::whereIn("id",[1,2])->get();

                         return view("posts.edit")->with("post",$post)->with("attshows",$attshows)->with("statuses",$statuses)->with("tags",$tags)->with("types",$types);
                    }

               =In edit.blade.php
                    <div class="col-md-12 mb-3">
                         <label for="title">Title <span class="text-danger">*</span></label>
                         <input type="text" name="title" id="title" class="form-control form-control-sm rounded-0" placeholder="Enter Post Title" value="{{ $post->title }}"/>
                    </div>

                    <div class="col-md-6">
                         <label for="type_id">Type <span class="text-danger">*</span></label>
                         <select name="type_id" id="type_id" class="form-control form-control-sm rounded-0">
                              @foreach($types as $type)
                                   <option value="{{$type->id}}"
                                        @if($type["id"] === $post["type_id"])
                                             selected
                                        @endif
                                   >{{ $type->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-6 mb-3">
                         <label for="fee">Fee <span class="text-danger">*</span></label>
                         <input type="number" name="fee" id="fee" class="form-control form-control-sm rounded-0" placeholder="Class Fee" value="{{ $post->fee }}"/>
                    </div>

                    <div class="col-md-12 mb-3">
                         <label for="content">Content <span class="text-danger">*</span></label>
                         <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{$post->content}}</textarea>
                    </div>

                    <div class="col-md-3">
                         <label for="tag_id">Type <span class="text-danger">*</span></label>
                         <select name="tag_id" id="tag_id" class="form-control form-control-sm rounded-0">
                              @foreach($tags as $tag)
                                   <option value="{{$tag->id}}"
                                        @if($tag->id === $post["tag_id"])
                                             selected
                                        @endif
                                   >{{ $tag->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-3">
                         <label for="attshow">Show on Att Form <span class="text-danger">*</span></label>
                         <select name="attshow" id="attshow" class="form-control form-control-sm rounded-0">
                              @foreach($attshows as $attshow)
                                   <option value="{{$attshow->id}}"
                                        @if($attshow["id"] === $post["attshow"])
                                             selected
                                        @endif
                                   >{{ $attshow->name }}</option>
                              @endforeach
                         </select>
                    </div>

                    <div class="col-md-3">
                         <label for="name">Status <span class="text-danger">*</span></label>
                         <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                              @foreach($statuses as $status)
                                   <option value="{{$status->id}}" {{ ($status->id === $post->status_id) ? "selected" : "" }} >{{ $status->name }}</option>
                              @endforeach
                         </select>
                    </div>

               *Ternary Operator Condition Checking

               =>Old New Image Show
                    =In edit.blade.php
                         <div class="row">
                              <div class="col-md-6 text-sm-center">
                                   <img src="{{asset($post->image)}}" width="200" alt="{{$post->title}}"/>
                              </div>
                              <div class="col-md-6">
                                   <label for="image" class="gallery"><span>Choose Images</span></label>
                                   <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ $post->image }}" hidden/>
                              </div>
                         </div>

          =>Update Post
               =In PostsController.php
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "image" => "image|mimes:jpg,jpeg,png|max:1024",
                              "title" => "required|max:50|unique:posts,title,".$id,
                              "content" => "required",
                              "fee" => "required",
                              "startdate" => "required",
                              "enddate" => "required",
                              "starttime" => "required",
                              "endtime" => "required",
                              "type_id" => "required|in:1,2",
                              "tag_id" => "required",
                              "attshow" => "required|in:3,4",
                              "status_id" => "required|in:7,10,11",   
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         $post = Post::findOrFail($id);
                         $post->title = $request["title"];
                         $post->slug = Str::slug($request["name"]);
                         $post->content = $request["content"];
                         $post->fee = $request["fee"];
                         $post->startdate = $request["startdate"];
                         $post->enddate = $request["enddate"];
                         $post->starttime = $request["starttime"];
                         $post->endtime = $request["endtime"];
                         $post->type_id = $request["type_id"];
                         $post->tag_id = $request["tag_id"];
                         $post->attshow = $request["attshow"];
                         $post->status_id = $request["status_id"];
                         $post->user_id = $user_id;


                         // Remove Old Image
                         if($request->hasFile("image")){
                              $path = $post->image;

                              if(File::exists($path)){
                                   File::delete($path);
                              }
                         }

                         // Single Image Update
                         if($request->hasFile("image")){
                              $file = $request->file("image");
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$post['id'].$fname;
                              $file->move(public_path("assets/img/posts"),$imagenewname);
                              
                              $filepath = "assets/img/posts/".$imagenewname;
                              $post->image = $filepath;
                         }    

                         $post->save();
                         return redirect(route("posts.index"));
                    }

          =>Delete Post
               =In PostsController.php  
                    public function destroy(string $id)
                    {
                         $post = Post::findOrFail($id);
                         
                         // Remove Old Image
                         $path = $post->image;
                         if(File::exists($path)){
                              File::delete($path);
                         }
                         
                         $post->delete();
                         return redirect()->back();
                    }

          =>Show Post
               =In PostsController.php
                    public function show(string $id)
                    {
                         $post = Post::findOrFail($id);
                         return view("posts.show",["post"=>$post]);
                    }
               =In show.blade.php
                    <div class="col-md-6">
                         <i class="fas fa-user fa-sm"></i> <span>{{$post["tag"]["name"]}}</span>
                         <br/>
                         <i class="fas fa-user fa-sm"></i> <span>{{$post["type"]["name"]}} : {{$post->fee}} </span>
                         <br/>
                         <i class="fas fa-user fa-sm"></i> <span>{{$post["user"]["name"]}}</span>
                    </div>
                    <div class="col-md-6">
                         <i class="fas fa-file fa-sm"></i> <span>{{$post["attstatus"]["name"]}}</span>
                         <br/>
                         <i class="fas fa-calendar-alt fa-sm"></i> <span>{{date('d M Y',strtotime($post->created_at))}} | {{date('h:i:s A',strtotime($post->created_at))}}</span>
                         <br/>
                         <i class="fas fa-edit fa-sm"></i> <span>{{date('d M Y h:i:s A',strtotime($post->updated_at))}}</span>
                    </div>
               
          =>Commenting Feature
               =Migration
                    php artisan make:model Comment -m

                    =create_comments_table.php
                         $table->text("description");
                         $table->unsignedBigInteger("user_id");
                         $table->unsignedBigInteger("commentable_id");
                         $table->string("commentable_type");

                    php artisan migrate:status
                    php artisan migrate
               
               =In Model (Comment.php)

                    protected $table = "comments";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "description",
                         "user_id",
                         "commentable_id",
                         "commentable_type"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }
                    
               php artisan make:controller CommentsController

               =In CommentsController.php
                    public function store(Request $request)
                    {

                         $user = Auth::user();
                         $user_id = $user->id;

                         Comment::create([
                              "description"=>$request["description"],
                              "user_id"=>$user_id,
                              "commentable_id"=>$request["commentable_id"],
                              "commentable_type"=>$request["commentable_type"],
                         ]);
                         return redirect()->back();
                    }

               =In show.blade.php
                    <form action="{{route('comments.store')}}" method="POST">
                         @csrf
                         <div class="col-md-12 d-flex justify-between">
                              <textarea name="description" id="description"  class="form-control border-0 rounded-0" rows="1" style="resize:none;" placeholder="Comment here...."></textarea>
                              <button type="submit" class="btn btn-info btn-sm text-light ms-3"><i class="fas fa-paper-plane"></i></button>
                         </div>

                         <!-- Start Hidden Fields -->
                         <input type="hidden" name="commentable_id" id="commentable_id" value="{{$post->id}}" />
                         <input type="hidden" name="commentable_type" id="commentable_type" value="App\Models\Post" />
                         <!-- Start Hidden Fields -->

                    </form>

                    *commentable_id, commentable_type is passed as hidden field.
                         -user don't need to manually choose this fields
                         -it must be filled by the system

               =In Web 
                    Route::resource("comments",CommentsController::class);

               =>Showing others related comments
                    =In Model (Comments)
                         public function commentable(){
                              return $this->morphTo();
                         }
                    =In Model (Post, User)
                         public function comments(){
                              return $this->morphMany(Comment::class,"commentable");
                         }
                    
                    =In PostsController.php
                         public function show(string $id)
                         {
                              $post = Post::findOrFail($id);
                              // $comments = Comment::where("commentable_id",$post->id)->where("commentable_type","App\Models\Posts")->orderBy("created_at","desc")->get();
                              $comments = $post->comments()->orderBy("updated_at","desc")->get();
                              return view("posts.show",["post"=>$post,"comments"=>$comments]);
                         }
                         
                         *Simple comments retrieve must check "commentable_id" and "commenetable_type"   
                         *Relationship retrieve no need to to check commentable columns
                         *latest comments reach at the top with orderBy()

                    =In show.blade.php
                         <ul class="list-group chat-boxs">
                              @foreach($comments as $comment)
                                   <li class="list-group-item mt-2">
                                        <div>
                                             <p>{{$comment->description}}</p>
                                        </div>
                                        <div>
                                             <span class="small fw-bold  float-end">{{$comment->user["name"] }} | {{$comment->created_at->diffForHumans()}}</span>
                                             
                                        </div>
                                        
                                   </li>
                              @endforeach
                         </ul>

                         ....
                         @section("css")
                              <style type="text/css">
                                   .chat-boxs{
                                        height: 200px;
                                        overflow-y : scroll;
                                   }
                              </style>     

                         @endsection

                         *show comment details 
                         *human readable date formate changing
                         *add scroll bar for many comments

               =>No Comments 
                    -To show There is no comments for this post.

                    *error (syntax error, unexpected token "endforeach", expecting "elseif" or "else" or "endif")
                    =>In posts > show.blade.php 
                          @foreach($comments as $comment)
                              <li class="list-group-item mt-2">
                                   <div>
                                        <p>{{$comment->description}}</p>
                                   </div>
                                   <div>
                                        <span class="small fw-bold  float-end">{{$comment->user["name"] }} | {{$comment->created_at->diffForHumans()}}</span>
                                        
                                   </div>
                                   
                              </li>
                              @empty
                              <li class="list-group-item mt-2">No Comments Found</li>
                         @endforeach

                    =>In posts > show.blade.php 
                          @forelse($comments as $comment)
                              <li class="list-group-item mt-2">
                                   <div>
                                        <p>{{$comment->description}}</p>
                                   </div>
                                   <div>
                                        <span class="small fw-bold  float-end">{{$comment->user["name"] }} | {{$comment->created_at->diffForHumans()}}</span>
                                        
                                   </div>
                                   
                              </li>
                              @empty
                              <li class="list-group-item mt-2">No Comments Found</li>
                         @endforelse
                         *It has the option to display if there is no items.

          =>Class Days
               php artisan make:controller DaysController

               =>Migration
                    php artisan make:model Day -m              

                    =create_days_table.php
                         $table->string("name")->unique();
                         $table->string("slug");
                         $table->unsignedBigInteger("status_id");
                         $table->unsignedBigInteger("user_id");
                    
                    php artisan migrate:status
                    php artisan migrate
               
               =>In Web
                    Route::resource("days",DaysController::class);
               Days
                    Sunday
                    Monday
                    Tuesday
                    Wednesday
                    Thursday
                    Friday
                    Saturday

               =>Create Modal    
                    =In categories > index.blade.php
                         <a href="#createmodal" class="btn btn-primary btn-sm rounded-0" data-bs-toggle="modal">Create</a>

                         <!-- start create modal -->
                              <div id="createmodal" class="modal fade">
                                   <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content rounded-0">
                                             <div class="modal-header">
                                                  <h6 class="modal-title">Create Form</h6>
                                                  <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                             </div>

                                             <div class="modal-body">
                                                  <form id="{{route('categories.store')}}" action="" method="POST">
                                                       {{ csrf_field() }}
                                                       <div class="row align-items-end">
                                                            <div class="col-md-7">
                                                                 <label for="name">Name <span class="text-danger">*</span></label>
                                                                 <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                                            </div>
                                                            
                                                            <div class="col-md-3 form-group">
                                                                 <label for="status_id">Status</label>
                                                                 <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                                                      @foreach($statuses as $status)
                                                                           <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                      @endforeach     
                                                                 </select>
                                                            </div>
                                                            
                                   
                                                            <div class="col-md-2">
                                                                 <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                            </div>
                                                       </div>
                                                  </form>
                                             </div>

                                             <div class="modal-footer">

                                             </div>
                                        </div>
                                   </div>
                              </div>
                         <!-- end create modal -->

                         *data-bs-target="" don't need to set for <a> tag 
                         because <a> tag include href="" for target element

               =>Days in Create Post
                    =In PostsController.php
                         public function create()
                         {    
                              $attshows = Status::whereIn("id",[3,4])->get();
                              $days = Day::where("status_id",3)->get();
                              $statuses = Status::whereIn("id",[7,10,11])->get();
                              $tags = Tag::where("status_id",3)->get();
                              $types = Type::whereIn("id",[1,2])->get();

                              return view("posts.create",compact("attshows","days","statuses","tags","types"));
                         }
                    =In posts > create.blade.php
                         <div class="col-md-12 for-group">
                              <label for="">Days</label>
                              <div class="d-flex flex-wrap">
                                   @foreach($days as $idx=>$day)
                                        <div class="form-check form-switch mx-3">
                                             <input type="checkbox" name="day_id[]" id="day_id{{$idx}}" class="form-check-input" value="{{$day->id}}" checked/> <label for="day_id{{$idx}}">{{$day->name}}</label>
                                        </div>
                                   @endforeach
                              </div>
                         </div>

               =>Days of Post Storing method
                    Method 1
                         -days are stored at "posts" table
                              by adding 7 columns  
                         -these columns type are boolean
                    Method 2
                         -days are stored at "posts" table
                              by adding only 1 column  

                         -That column will be JSON format

                    Method 3
                         Many to Many
                         dayable
                         id post_id day_id

               =>Days of Post Store With (Polymorphic Many to Many)                              
                    =Migration
                         php artisan make:model Dayable -m
                         
                         =create_dayables_table.php
                              $table->integer("day_id");
                              $table->integer("dayable_id");
                              $table->string("dayable_type");
                         *id, and timestamps are dropped at this time.

                         php artisan migrate:status
                         php artisan migrate
                    
                    =In Model (Day)
                         protected $table = "dayables";
                         protected $fillable = [
                              "day_id",
                              "dayable_id",
                              "dayable_type"
                         ];
                    
                    =In PostsController.php
                         $post->save();

     
                         if($post->id){
                              // dd($request["day_id"]);

                              // create dayable
                              // Method 1
                              // if(count($request["day_id"]) > 0){
                                   
                              //     foreach($request["day_id"] as $key=>$value){
                              //         Dayable::create([
                              //             // "day_id"=>$request["day_id"][$key],
                              //             "day_id"=>$value,
                              //             "dayable_id"=>$post->id,
                              //             "dayable_type"=>$request["dayable_type"]
                              //         ]);
                              //     }
                              // }

                              // Methd 2
                              if(count($request["day_id"]) > 0){
                                             
                                   foreach($request["day_id"] as $key=>$value){
                                        $day = [
                                        // "day_id"=>$request["day_id"][$key],
                                        "day_id"=>$value,
                                        "dayable_id"=>$post["id"],
                                        "dayable_type"=>$request["dayable_type"]
                                        ];
                                        Dayable::insert($day);
                                   }
                              }

                         }
                         

                         *store days after saving post.
                         *Successfully saved post id is already generated. It is ready for use.
                         
                         *day_id is given as array. This array need to iterate a looping.
                              array:7 [
                              0 => "1"
                              1 => "2"
                              2 => "3"
                              3 => "4"
                              4 => "5"
                              5 => "6"
                              6 => "7"
                              ]
                              -only the checked days are in the arrays.
                         
                         *dayable_type can be written directly at the Controller because it is only for the post.
                              In CommentController, it can not be written directly and given from the form.

                    =In create.blade.php
                         <!-- start hidden field -->
                                   <input type="hidden" name="dayable_type" id="dayable_type" value="App\Models\Post" />
                         <!-- end hidden field -->
                    
                    *error(Unknown column 'updated_at' in 'field list')
                         timestamps() are dropped at the migrations. Laravel automatically insert these columns.
                    
                    =In Model Dayable.php
                         protected $timestamps = false;

                    *error (Access level to App\Models\Dayable::$timestamps must be public)
                         public $timestamps = false;
                    
                    *while error occur, new post is successfully saved to the posts table. becausse these errors occur after saving post.

                    *after inserting a post, days related to this post is stored in dayable table.
                    "dayables"
                    day_id    dayable_id     dayable_type
                    2         18             App\Model\Post
                    4         18   
                    6         18

               =>Days in Edit Post
                    =In Model (Post.php)
                         public function days(){
                              return $this->morphToMany(Day::class,"dayable");
                         }
                    
                    =In Model (Day.php)
                         public function posts(){
                              return $this->morphedByMany(Post::class,"dayable");
                         }

                    =In PostsController.php
                         public function edit(string $id)
                         {

                              $post = Post::findOrFail($id);
                              // dd($post); // Post object
                              $days = Day::where("status_id",3)->get();
                              $dayables = $post->days()->get();
                              // dd($dayables); // Day object
                              $attshows = Status::whereIn("id",[3,4])->get();
                              $statuses = Status::whereIn("id",[7,10,11])->get();
                              $tags = Tag::where("status_id",3)->get();
                              $types = Type::whereIn("id",[1,2])->get();

                              return view("posts.edit")->with("post",$post)->with("attshows",$attshows)->with("days",$days)->with("dayables",$dayables)->with("statuses",$statuses)->with("tags",$tags)->with("types",$types);
                         }
                         *Query laravel executing in background (study from error)
                              select `days`.*, `dayables`.`dayable_id` as `pivot_dayable_id`, `dayables`.`dayable_type` as `pivot_dayable_type` from `days` inner join `dayables` on `days`.`id` = `dayables`.`dayable_id` where `dayables`.`dayable_id` = 18 and `dayables`.`dayable_type` = App\Models\Post
                         *$dayables get the relative days with the post
                         *not working
                              @if($dayable['day_id'] === $day['id'])
                              -because it is retrieved from dummy table and not from regular table.
                         *Regular Post Object
                              App\Models\Post {#1411 ▼ // app\Http\Controllers\PostsController.php:137
                              #connection: "mysql"
                              #table: "posts"
                              #primaryKey: "id"
                              ....
                              #original: array:17 [
                                   "id" => 18
                                   "image" => null
                                   "title" => "React Js Batch 10"
                                   "slug" => ""
                                   "content" => "hello sir"
                                   "fee" => "90000.00"
                                   "startdate" => "2023-12-22"
                                   "enddate" => "2024-01-30"
                                   "starttime" => "06:17:00"
                                   "endtime" => "08:20:00"
                                   "type_id" => 1
                                   "tag_id" => 11
                                   "attshow" => 3
                                   "status_id" => 7
                                   "user_id" => 1
                                   "created_at" => "2024-01-14 17:18:36"
                                   "updated_at" => "2024-01-14 17:18:36"
                              ]

                         *Eloquent Collection Object
                              Illuminate\Database\Eloquent\Collection {#1415 ▼ // app\Http\Controllers\PostsController.php:140
                                   #items: array:3 [▼
                                   0 => App\Models\Day {#1404 ▼
                                        #connection: "mysql"
                                        #table: "days"
                                        #primaryKey: "id"
                                        ....
                                        #original: array:10 [▼
                                        "id" => 2
                                        "name" => "Monday"
                                        "slug" => "monday"
                                        "status_id" => 3
                                        "user_id" => 1
                                        "created_at" => "2024-01-13 15:27:05"
                                        "updated_at" => "2024-01-13 15:27:05"
                                        "pivot_dayable_id" => 18
                                        "pivot_day_id" => 2
                                        "pivot_dayable_type" => "App\Models\Post"
                                        ]
                                        ....
                                   }
                                   1 => App\Models\Day {#1427 ▶}
                                   2 => App\Models\Day {#1430 ▶}
                                   ]
                                   #escapeWhenCastingToString: false
                              }
                              *Dummy table columlns can be retrived with keyword pivot
                         
                         -it is essential to check 'original'
                         
                         *not working
                              @if($dayable['pivot_day_id'] === $day['id'])
                              -it has specific method to retrieve pivot.

                    =In posts > edit.blade.php
                         @foreach($days as $idx=>$day)
                              <div class="form-check form-switch mx-3">
                                   <input type="checkbox" name="day_id[]" id="day_id{{$idx}}" class="form-check-input" value="{{$day->id}}" 
                                        @foreach($dayables as $dayable)
                                             @if($dayable['id'] === $day['id'])
                                                  checked
                                             @endif
                                        @endforeach
                                   /> 
                                   <label for="day_id{{$idx}}">{{$day->name}}</label>
                              </div>
                         @endforeach

               =>Days in Show Post
                    =In PostsController.php
                         public function show(string $id)
                         {
                              $post = Post::findOrFail($id);
                              // $comments = Comment::where("commentable_id",$post->id)->where("commentable_type","App\Models\Posts")->orderBy("created_at","desc")->get();
                              $comments = $post->comments()->orderBy("updated_at","desc")->get();
                              $dayables = $post->days()->get();
                              return view("posts.show",["post"=>$post,"comments"=>$comments,"dayables"=>$dayables]);
                         }
                    =In posts > show.blade.php
                         <div class="col-md-6">
                              <i class="fas fa-calendar fa-sm"></i>
                              <span>
                                   @foreach($dayables as $dayable)
                                             {{$dayable["name"]}}, 
                                   @endforeach
                              </span>
                         </div>

               =>Days of Post Update
                    three condition
                    -remove existing days
                    -add days
                    -add and remove days

                    =My own method 1
                         $post->save();

                         if($request["day_id"] > 0){
                              // dd($request["day_id"]);
                              $post->days()->sync($request["day_id"]);
                         }else{
                              $post->days()->detach();
                         }

                    =Chingu method
                         if(count($request["day_id"] > 0)){
                              $post->days()->detach();

                              foreach($request["day_id"] as $key=>$value){
                                   Dayable::create([
                                   "day_id"=>$value,
                                   "dayable_id"=>$post->id,
                                   "dayable_type"=>$request["dayable_type"]
                                   ]);
                              }
                         }

                         *error - when no date is specified.
                              -at code of condition, count()
                         
                              
                         *code operation
                              firstly remove all days related with the post
                              lastly add the selected days for the post
                              at "dayable" table
                              -before edit
                                   day_id    dayable_id
                                   1         1
                                   1         2
                                   2         2
                              -after edit (adding another day for post one)
                                   day_id    dayable_id
                                   1         2
                                   2         2
                                   1         1
                                   4         1
                    
                    =My own method 2
                         $post->save();
                         
                         $post->days()->detach();
                         if(!empty($request["day_id"])){
                              foreach($request["day_id"] as $key=>$value){
                                   Dayable::create([
                                   "day_id"=>$value,
                                   "dayable_id"=>$post->id,
                                   "dayable_type"=>$request["dayable_type"]
                                   ]);
                              }
                         }
                         
                         
                    =With JS method
                         =In posts > edit.blade.php
                              @foreach($days as $idx=>$day)
                                   <div class="form-check form-switch mx-3">
                                        <input type="checkbox" name="day_id[]" id="day_id{{$idx}}" class="form-check-input dayactions" value="{{$day->id}}" 
                              ....

                              // Start Day Action
                              $(".dayactions").click(function(){
                                   var checkboxs = $("input[type='checkbox']");
                                   // console.log(checkboxs);
                                   
                                   var checked = checkboxs.filter(":checked").map(function(){
                                        // return this.value;
                                        $(this).attr("name","newday_id[]");
                                   });

                                   var unchecked = checkboxs.not(":checked").map(function(uncheck){
                                        // return this.value;
                                        $(this).attr("name","oldday_id[]");
                                        
                                        // console.log(uncheck);
                                   });

                                   // check or uncheck
                                   // if($(this).prop('checked')){
                                   //      // console.log("yes");
                                   //      console.log("checked");
                                   // }else{
                                   //      // console.log("no");
                                   //      console.log("unchecked");
                                   // }
                              });
                              // End Day Action
                              
                         *seperate the days into the group of checked and unchecked.
                         -checked group = newday_id
                         -unchecked group = oldday_id

                         =In PostsController.php
                               $post->save();
                              
                              // Start Day Action
                              // dd($request["newday_id"]); // null ,or [1 3 5]
                              
                                   if(isset($request["newday_id"])){
                                        // remove all day first
                                        foreach($request["newday_id"] as $key=>$value){
                                             $dayable = Dayable::where("dayable_id",$post["id"])->where("dayable_type",$request["dayable_type"]);
                                             $dayable->delete();
                                        }
                                        // add renewday
                                        foreach($request["newday_id"] as $key=>$value){
                                             $day = [
                                             // "day_id"=>$request["day_id"][$key],
                                             "day_id"=>$request["newday_id"][$key],
                                             "dayable_id"=>$post["id"],
                                             "dayable_type"=>$request["dayable_type"]
                                             ];
                                             Dayable::insert($day);
                                        }
                                   }
                              // End Day Action
                              -firstly remove all days related with the post
                              -lastly add the new days for the post
                              *no error but not working - when no date is specified.
                              
                              -problem solved
                                   if(isset($request["newday_id"]) || isset($request["oldday_id"])){
                                        // remove all days
                                        if(!empty($request["newday_id"])){
                                             
                                             // add new days
                                        }
                                   }


     =>Attendance Form
          =Migration
          php artisan make:model Attendance -m
          
          =crate_attendances_table.php
               $table->date("classdate");
               $table->unsignedBigInteger("post_id");
               $table->string("attcode");    
               $table->unsignedBigInteger("user_id");        
               

          php artisan migrate:status
          php artisan migrate

          php artisan make:controller AttendancesController

          =In Model (Attendance.php)
               protected $table = "attendances";
               protected $primaryKey = "id";
               protected $fillable = [
                    "classdate",
                    "post_id",
                    "attcode",
                    "user_id"
               ];

               public function post(){
                    return $this->belongsTo(Post::class);
               }

               public function user(){
                    return $this->belongsTo(User::class);
               }

          =>Create/Store Attendance + index

               =In AttendancesController.php
                    public function index()
                    {
                         $attendances = Attendance::all();
                         // $posts = Post::where("attshow",3)->get();
                         $posts = DB::table("posts")->where("attshow",3)->orderBy("title","asc")->get();
                         return view("attendances.index",compact("attendances","posts"));
                    }

                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "classdate" => "required|date",
                              "post_id" => "required",
                              "attcode" => "required"
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $attendance = new attendance();
                         $attendance->classdate = $request["classdate"];
                         $attendance->post_id = $request["post_id"];
                         $attendance->attcode = $request["attcode"];
                         $attendance->user_id = $user_id;
                         
                         $attendance->save();
                         return redirect(route("attendances.index"));
                    }
               
               =In index.blade.php
                    <form action="{{route('attendances.store')}}" method="POST">
                         {{ csrf_field() }}

                         <div class="row align-items-end">
                              <div class="col-md-3">
                                   <label for="classdate">Class Date <span class="text-danger">*</span></label>
                                   <input type="date" name="classdate" id="classdate" class="form-control form-control-sm rounded-0" value="{{ old('classdate') }}"/>
                              </div>

                              <div class="col-md-3">
                                   <label for="post_id">Class <span class="text-danger">*</span></label>
                                   <select name="post_id" id="post_id" class="form-control form-control-sm rounded-0">
                                        @foreach($posts as $post)
                                             {{-- <option value="{{$post['id']}}">{{$post['title']}}</option> --}}
                                             <option value="{{$post->id}}">{{$post->title}}</option> 
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-3">
                                   <label for="attcode">Attendance Code <span class="text-danger">*</span></label>
                                   <input type="text" name="attcode" id="attcode" class="form-control form-control-sm rounded-0" value="{{ old('attcode') }}"/>
                              </div>

                              <div class="col-md-3">
                                   <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                   <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                              </div>
                         </div>
                    </form>
               
               ** Retrieve data with DB:: method need to be careful
                    -can only get data as object
                    -can not get data as array
                         *error (Cannot use object of type stdClass as array)

               =>List Attendances

                    =In index.blade.php
                         <table id="mytable" class="table table-sm table-hover border">
               
                              <thead>
                                   <th>No</th>
                                   <th>Class</th>
                                   <th>Att Code</th>
                                   <th>By</th>
                                   <th>Class Date</th>
                                   <th>Created At</th>
                                   <th>Updated At</th>
                                   <th>Action</th>
                              </thead>
                    
                              <tbody>
                                   @foreach($attendances as $idx=>$attendance)
                                   <tr>
                                        <td>{{++$idx}}</td>
                                        <td>{{$attendance->post["title"]}}</td>
                                        <td>{{ $attendance->attcode }}</td>
                                        <td>{{ $attendance["user"]["name"] }}</td>
                                        <td>{{ $attendance->classdate }}</td>
                                        <td>{{ $attendance->created_at->format('d M Y') }}</td>
                                        <td>{{ $attendance->updated_at->format('d M Y') }}</td>
                                        <td>
                                             <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$attendance->id}}" data-name="{{$attendance->name}}" data-status="{{$attendance->status_id}}"><i class="fas fa-pen"></i></a>
                                        </td>
                                   </tr>
                                   @endforeach
                              </tbody>
                    
                         </table>

               =>Uppercase Attendance Code 
                    =In AttendancesController.php 
                         public function store(Request $request)
                         {
                              $this->validate($request,[
                                   "classdate" => "required|date",
                                   "post_id" => "required",
                                   "attcode" => "required"
                              ]);

                              $user = Auth::user();
                              $user_id = $user->id;

                              $attendance = new attendance();
                              $attendance->classdate = $request["classdate"];
                              $attendance->post_id = $request["post_id"];
                              $attendance->attcode = Str::upper($request["attcode"]);
                              $attendance->user_id = $user_id;

                              $attendance->save();
                              session()->flash("success","Att Created");
                              return redirect(route("attendances.index"));
                         }
                    *It change case in backend. Can change code in frontend like javascript and even with css.
                    *Str::upper() support in laravel.
                         *use Illuminate\Support\Str;

          =>Edit/Update Attendance + index
               =In index.blade.php
                    ....
                    <td>
                         <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$attendance->id}}" data-post_id="{{$attendance->post_id}}" data-attcode="{{$attendance->attcode}}"><i class="fas fa-pen"></i></a>
                    </td>
                    ....
                    
                    <!-- start edit modal -->
                         <div id="editmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Edit Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="POST">
                                                  {{ csrf_field() }}
                                                  {{ method_field('PUT') }}
                                                  <div class="row align-items-end">
                                                       
                                                       <div class="col-md-7 form-group">
                                                            <label for="editpost_id">Class <span class="text-danger">*</span></label>
                                                            <select name="post_id" id="editpost_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($posts as $post)
                                                                      {{-- <option value="{{$post['id']}}">{{$post['title']}}</option> --}} 
                                                                      <option value="{{$post->id}}">{{$post->title}}</option> 
                                                                 @endforeach     
                                                            </select>
                                                       </div>

                                                       <div class="col-md-3">
                                                            <label for="editattcode">Att Code <span class="text-danger">*</span></label>
                                                            <input type="text" name="attcode" id="editattcode" class="form-control form-control-sm rounded-0" value="{{ old('classdate') }}"/>
                                                       </div>
                                                       
                              
                                                       <div class="col-md-2">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                    <!-- end edit modal -->
                    ....
                    @section("scripts")
                         <script type="text/javascript">
                              $(document).ready(function(){
                                   // Start Edit Form
                                   $(document).on("click",".editform",function(e){
                                        
                                        $("#editpost_id").val($(this).attr("data-post_id"));
                                        $("#editattcode").val($(this).data("attcode"));
                                        
                                        const getid = $(this).attr("data-id");
                                        $("#formaction").attr("action",`/attendances/${getid}`);

                                        e.preventDefault();
                                   });
                                   // End Edit Form
                                   
                              });
                         </script>
                    @endsection
               
               =In AttendancesController.php
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "post_id" => "required",
                              "attcode" => "required"
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         $attendance = Attendance::findOrFail($id);
                         $attendance->post_id = $request["post_id"];
                         $attendance->attcode = $request["attcode"];
                         $attendance->user_id = $user_id;
                         $attendance->save();
                         return redirect(route("attendances.index"));
                    }

               *when another modify att code, modify user id will changed
               -To solve this delete the following sentence
                    //$attendance->user_id = $user_id;
               
     =>Enrollment

          php artisan make:model Stage -m

          =Migration
               =create_stages_table.php
                    $table->string("name")->unique();
                    $table->string("slug");  
                    $table->unsignedBigInteger("status_id");
                    $table->unsignedBigInteger("user_id");

          php atisan migratel:status
          php artisan migrate

          =In Model (Stage.php)

          php artisan make:controller StagesController

          "stages"
               Approved
               Pending
               Reject
               Complete
               Incomplete
               Loading
               Processing
               Passed
               Request
               Waiting
               Verifying
               Verified

          php artisan make:model Enroll -m 

          =Migration
               =create_enrolls_table
                    $table->string("image")->nullable();
                    $table->unsignedBigInteger('post_id')->comment("new class");
                    $table->unsignedBigInteger('user_id');
                    $table->enum('stage_id',[1,2,3])->default(2)->comment("1=Approved, 2= Pending, 3=Reject");
                    $table->text("remark")->nullable();
          
               =>Column Comment
                    *comment() - to remark something for the column
                    =In phpmyadmin
                    -see at table 'Structure' Tab
                    -see at 'Browse' Tab
          
          php atisan migratel:status
          php artisan migrate

          =In Model (Enroll.php)
               protected $table = "enrolls";
               protected $primaryKey = "id";
               protected $fillable = [
                    "image",
                    "post_id",
                    "user_id",
                    "stage_id",
                    "remark"
               ];

               public function stage(){
                    return $this->belongsTo(Stage::class);
               }

               public function user(){
                    return $this->belongsTo(User::class);
               }

          =In posts > show.blade.php
               ....
               <a href="{{route('posts.index')}}" class="btn btn-secondary btn-sm rounded-0">Close</a>
               <a href="#createmodal" class="btn btn-primary btn-sm rounded-0" data-bs-toggle="modal">Enroll</a>
               ....
               <!-- START MODAL AREA -->
                    <!-- start create modal -->
                    <div id="createmodal" class="modal fade">
                         <div class="modal-dialog modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Enroll Form</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <form id="" action="{{route('categories.store')}}" method="POST" enctype="multipart/form-data">
                                             {{ csrf_field() }}
                                             <div class="row align-items-end">
                                                  <div class="col-md-12 mb-3">
                                                       <label for="image" class="gallery"><span>Choose Images</span></label>
                                                       <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ old('image')}}" hidden/>
                                                  </div>
                                                  <div class="col-md-10">
                                                       <label for="remark">Remark <span class="text-danger">*</span></label>
                                                       <textarea type="text" name="remark" id="remark" class="form-control form-control-sm rounded-0" rows="3" placeholder="Enter Remark">{{ old('remark') }}</textarea>
                                                  </div>
                                                  
                                   
                                                  <div class="col-md-2">
                                                       <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                  </div>

                                                  <!-- Start Hidden Fields -->
                                                  <input type="hidden" name="post_id" value="{{$post->id}}" />
                                                  <!-- Start Hidden Fields -->
                                             </div>
                                        </form>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end create modal -->
               <!-- END MODAL AREA -->
               ....
               @section("css")....
               @section("scripts")....
          *form fields data can't be received at controller if not include
               enctype="multipart/form-data" 
          =In Controller
               php artisan make:controller EnrollsController
          
          =In EnrollsController.php
               public function store(Request $request)
               {
                    $this->validate($request,[
                         "image" => "image|mimes:jpg,jpeg,png|max:1024",
                    ]);

                    $user = Auth::user();
                    $user_id = $user->id;

                    $enroll = new Enroll();
                    $enroll->post_id = $request["post_id"];
                    $enroll->remark = $request["remark"];
                    $enroll->user_id = $user_id;

                    // Single Image Upload
                    if(file_exists($request["image"])){
                         $file = $request["image"];
                         $fname = $file->getClientOriginalName();
                         $imagenewname = uniqid($user_id).$enroll['id'].$fname;
                         // $file->move(public_path("enrolls/img"),$imagenewname);
                         $file->move(public_path("assets/img/enrolls"),$imagenewname);
                         
                         $filepath = "assets/img/enrolls/".$imagenewname;
                         $enroll->image = $filepath;
                    }    

                    $enroll->save();
                    return redirect()->back();
               }

               =>Restrict One User for only One Class
                    =In Post.php
                         public function checkenroll($userid){
                              return DB::table("enrolls")->where("post_id",$this->id)->where("user_id",$userid)->exists();
                         }

                    =In PostsController.php
                         public function show(string $id)
                         {    
                              $post = Post::findOrFail($id);
                              // dd($post->checkenroll(1)); // true
                              ....
                         }
                    =In posts > show.blade.php    
                         <a href="{{route('posts.index')}}" class="btn btn-secondary btn-sm rounded-0">Close</a>
                         @if(!$post->checkenroll($userdata->id))
                              <a href="#createmodal" class="btn btn-primary btn-sm rounded-0" data-bs-toggle="modal">Enroll</a>
                         @endif;    
                         <hr/>
                    
                    *'Enroll' button is hidden for the already enrolled post.
                    *'Enroll' button appear for the the post that is not enroled yet.

                    *$userdata represent authenticated user.

                    users
                    name           email
                    --------------------
                    admin          admin@gmail.com
                    aung aung      admin@gmail.com
                    su su          susu@gmail.com
                    yu yu          yuyu@gmail.com

                    =>Log Out
                         =Inspire layouts > navigation.blade.php 
                              <!-- Authentication -->
                              <form method="POST" action="{{ route('logout') }}">
                                   @csrf

                                   <x-dropdown-link :href="route('logout')"
                                             onclick="event.preventDefault();
                                                       this.closest('form').submit();">
                                        {{ __('Log Out') }}
                                   </x-dropdown-link>
                              </form>

                         =In layouts > adminleftsidebar.blade.php
                              <!-- Start Top Sidebar -->
                              @include("layouts.adminnavbar")
                              <!-- End Top Sidebar -->

                         =In layouts > adminnavbar.blade.php
                              //move top side bar
                              <!-- Authentication -->
                               <!-- <form action="{{ route('logout')}}" method="POST" > -->
                                   <!-- @csrf -->
                                   <!-- <a href="{{ route('logout') }}" class="dropdown-item" onclick="event.preventDefault(); this.closest('form').submit();"><i class="fas fa-sign-out fa-sm text-muted me-2"></i>Logout</a> -->
                                   <!-- <a href="javascript:void(0);" class="dropdown-item" onclick="event.preventDefault(); this.parentElement.submit();"><i class="fas fa-sign-out fa-sm text-muted me-2"></i>Logout</a> -->
                              <!-- </form> -->

                              <a href="javascript:void(0);" class="dropdown-item" onclick="event.preventDefault(); document.getElementById('logoutform').submit();"><i class="fas fa-sign-out fa-sm text-muted me-2"></i>Logout</a>
                              <form id="logoutform" action="{{ route('logout') }}" method="POST" >@csrf</form>

                    "students"
                    id   regnumber      firstname      lastname,,,,        user_id
                    1    WDF1001        Admin          Bot                 1
                    2    WDF1002        Aung           Aung                2
                    3    WDF1003        Su             Su                  3
                    4    WDF1004        Yu             Yu                  4

     =>Attendance <-> Student (Student ID)
               =>My Method
                    =In Attendance.php
                         public function userstu(){
                              $student = Student::where("user_id",$this->user_id)->first();

                              // dd($student);
                              // dd($student->regnumber);
                              return $student;
                         }
                         // *retrieve with get() will get error
                    =In attendances > index.blade.php
                         ....
                         @foreach($attendances as $idx=>$attendance)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td>{{ $attendance->userstu()->regnumber }}</td>
               
               =>Simplest Solution (don't recommend)
                    =In Attendance.php
                         public function student(){
                              return $this->belongsTo(Student::class,"user_id");
                         }
                    =In attendances > index.blade.php
                         @foreach($attendances as $idx=>$attendance)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td>{{ $attendance->student->regnumber }}</td>

                    "students"
                    id   regnumber      firstname      lastname,,,,        user_id
                    10    WDF1001        Admin          Bot                 1

                    *error (Attempt to read property "regnumber" on null)
                    -it only work with student.id for the foreigin key of attendances.user_id.
                    -because "attendances" table do not the student id, 1 of user_id, 1 .
               
               "users"
                    id     name           email
                    10     admin          admin@gmail.com
                    20     aung aung      admin@gmail.com
                    30     su su          susu@gmail.com
                    40     yu yu          yuyu@gmail.com

               "students"
                    id   regnumber      firstname      lastname,,,,        user_id
                    1    WDF1001        Admin          Bot                 10
                    2    WDF1002        Aung           Aung                20
                    3    WDF1003        Su             Su                  30
                    4    WDF1004        Yu             Yu                  40

               "attendances"
                    id   classdate      post_id   attcode   user_id
                    1    2023-12-02     17        AB        10
                    ....
                    6    2023-12-16     16        EFG       40
               
               =>Way 1 (Foreigh Key Table)
                    "Attendance"   "User"         "Student"
                    
                    user_id        id             id
                    post_id        name           regnumber
                    attcode        email          firstname   
                                   password       lastname
                    student_id                    user_id

               =>Way 2 (Table Through)
                    Attendance -> User -> Student

                    Attendance 
                    id classdate post_id attcode user_id

                    User
                    id name email .... student_id

                    Student 
                    id   regnumber      firstname      lastname,,,,

               =Method 1
                    =In Attendance.php
                         public function student($userid){
                              
                              $students = Student::where("user_id",$userid)->get();
                              // dd($students);

                              foreach($students as $student){
                                   // dd($student);
                                   // dd($student["regnumber"]);
                                   return $student["regnumber"];
                              }
                         }

                    *result ($students) - array given
                    Illuminate\Database\Eloquent\Collection {#1431 ▼ // app\Models\Attendance.php:41
                         #items: array:1 [▼
                         0 => App\Models\Student {#1430 ▶}
                         ]
                         #escapeWhenCastingToString: false
                    }
                    
                    *result ($student) ## - destructure array
                    App\Models\Student {#1430 ▼ // app\Models\Attendance.php:44
                         #connection: "mysql"
                         #table: "students"
                         #primaryKey: "id"
                         ....
                         #original: array:10 [▼
                         "id" => 1
                         "regnumber" => "WDF1001"
                         "firstname" => "Admin"
                         "lastname" => "Boot"
                         "slug" => "adminboot"
                         "remark" => "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
                         "status_id" => 1
                         "user_id" => 1
                         "created_at" => "2023-12-14 12:43:02"
                         "updated_at" => "2023-12-14 12:43:02"
                    ]

                    =In attendances > index.blade.php
                         @foreach($attendances as $idx=>$attendance)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td>{{ $attendance->student($attendance->user_id) }}</td>
               
               =Method 2
                    =In Attendance.php
                         public function student($userid){
                              // Method 2
                              $students = Student::where("user_id",$userid)->get()->pluck("regnumber");
                              // dd($students);

                              foreach($students as $student){
                                   // dd($student); // "WDF1001"
                                   return $student;
                              }
                         }

                    *result ($students) - array given
                    Illuminate\Support\Collection {#1422 ▼ // app\Models\Attendance.php:51
                         #items: array:1 [▼
                         0 => "WDF1001"
                         ]
                         #escapeWhenCastingToString: false
                    }

               =>Attendance Order
                    =In AttendancesController.php
                         public function index()
                         {
                              $attendances = Attendance::orderBy('updated_at','desc')->get();
                              ....
                         }
                    *attendances are displayed from recent days.

     =>Text Editor Plug-in    
          'summernote'        
          https://summernote.org/getting-started/#without-bootstrap-lite

          bootstrap 4
          bootstrap 5
          *Without bootstrap
               -local link
          
          summernote > Getting Started > Download compiled
          Extract here - summernote-0.8.18-dist

          =>At Create
               =In posts > create.blade.php
                    <div class="col-md-12 mb-3">
                         <label for="content">Content <span class="text-danger">*</span></label>
                         <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{ old('content') }}</textarea>
                    </div>
                    ....

                    @section("css")
                         {{-- summernote css1 js1 --}}
                         <link href="{{ asset('assets/libs/summernote-0.8.18-dist/summernote-lite.min.css') }}" rel="stylesheet" type="text/css"/>
                         <style type="text/css">
                         ....

                    @section("scripts")
                         {{-- summernote css1 js1 --}}
                         <script src="{{ asset('assets/libs/summernote-0.8.18-dist/summernote-lite.min.js') }}" type="text/javascript"></script>
                         <script type="text/javascript">
                         ....

                              // text editor for content
                              $('#content').summernote({
                                   placeholder: 'Say Something....',
                                   tabsize: 2,
                                   height: 120,
                                   toolbar: [
                                        ['style', ['style']],
                                        ['font', ['bold', 'underline', 'clear']],
                                        ['color', ['color']],
                                        ['para', ['ul', 'ol', 'paragraph']],
                                        ['insert', ['link']],
                                   ]
                              });

               
          =>At Edit
               =link summbernote as Create 

               *Edited text will be display as format.

          =>At Show
               =http://127.0.0.1:8000/posts/19
                    *result
                    <h2 style="margin-bottom: 10px; font-family: DauphinPlain; font-size: 24px; line-height: 24px; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">What is Lorem Ipsum?</h2><p><strong style="font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px; text-align: justify; background-color: rgb(255, 255, 255);">Lorem Ipsum</strong><span style="font-family: &quot;Open Sans&quot;, Arial, sans-serif; font-size: 14px; text-align: justify; background-color: rgb(255, 255, 255);">&nbsp;is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the <a href="https://google.com" target="_blank">1500s</a>
               "phpmyadmin" > "posts" table > 'content' column
               *html & css code are stored.

               =To interpret html and css code
                    =In posts > show.blade.php
                         <tr>
                              <!-- <td>{{-- $post->content --}}</td> -->
                              <td>{!! $post->content !!}</td>
                         </tr>
               *other editor plug-in will use {!! !!} to understand html and css code.

     =>Table Plug in
          "DataTables"
          https://datatables.net/
          *cdn

          *cause it is jQuery library, jQuery file must be linked first.

          Full Getting Started Guide > 
               Initialising DataTables

          =In Index 
               =In posts > index.blade.php
                    <table id="mytable" class="table table-sm table-hover border">
                    ....

                    @section("css")
                         <link href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css" rel="stylesheet" type="text/css" />
                    @endsection
                    ....

                    @section("scripts")
                    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js" type="text/javascript"></script>
                    <script type="text/javascript">
                         ....
                         // for mytable
                         //let table = new DataTable('#mytable');
                         $("#mytable").DataTable();

               *Search, Column Sorting, Pagination included
               *search bar is for all column 

          =Method 1 (JS Object)
               let table = new DataTable('#myTable', {
               // config options...
               })

          =Method 2 (jQuery)
               $(document).ready( function () {
                    $('#myTable').DataTable();
               } );

     =>Fixed footer
          =In layouts > adminfooter.php 
               <footer class="footers">
          
          =In public > dist > style.css
               .footers{
                    width:100%;

                    position:fixed;
                    right:0;
                    bottom:0;
               }
     
     =>Enroll <-> Student (Student ID)

          =Method 1, 2
                =In enrolls.index.blade.php
                    <table id="mytable" class="table table-sm table-hover border">
               
                         <thead>
                              <th>No</th>
                              <th>Class</th>
                              <th>Student Id</th>
                              <th>Stage</th>
                              <th>Created At</th>
                              <th>Updated At</th>
                              <th>Action</th>
                         </thead>
               
                         <tbody>
                              @foreach($enrolls as $idx=>$enroll)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td>{{$enroll->post["title"]}}</td>
                                   <td>{{ $enroll->student($enroll->user_id) }}</td>
                                   <td>{{ $enroll->stage->name }}</td>
                                   <td>{{ $enroll->created_at->format('d M Y') }}</td>
                                   <td>{{ $enroll->updated_at->format('d M Y') }}</td>
                                   <td>
                                        <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$enroll->id}}" data-post_id="{{$enroll->post_id}}" data-attcode="{{$enroll->attcode}}"><i class="fas fa-pen"></i></a>
                                   </td>
                              </tr>
                              @endforeach
                         </tbody>
               
                    </table>

               =Enroll.php
                    public function student($userid){
                         
                         // Method 1
                         // $students = Student::where("user_id",$userid)->get();
                         // // dd($students);

                         // foreach($students as $student){
                         //     // dd($student);
                         //     // dd($student["regnumber"]);
                         //     return $student["regnumber"];
                         // }

                         // Method 2
                         $students = Student::where("user_id",$userid)->get()->pluck("regnumber");
                         // dd($students);

                         foreach($students as $student){
                              // dd($student); // "WDF1001"
                              return $student;
                         }

                    }
         
          =Method 3, 4
               =In enrolls > index.blade.php
                    @foreach($enrolls as $idx=>$enroll)
                         <tr>
                              <td>{{++$idx}}</td>
                              <td>{{$enroll->post["title"]}}</td>
                              {{-- <td>{{ $enroll->student($enroll->user_id) }}</td> --}}
                              <td>{{$enroll->student()}}</td>
                              <td>{{ $enroll->stage->name }}</td>
                              <td>{{ $enroll->created_at->format('d M Y') }}</td>
                              <td>{{ $enroll->updated_at->format('d M Y') }}</td>
                              <td>
                                   <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$enroll->id}}" data-post_id="{{$enroll->post_id}}" data-attcode="{{$enroll->attcode}}"><i class="fas fa-pen"></i></a>
                              </td>
                         </tr>
                    @endforeach

               =In Enroll.php
                    public function student(){

                         // Method 3
                         // $students = Student::where("user_id",$this->user_id)->get();
                         // // dd($students);

                         // foreach($students as $student){
                         //     // dd($student);
                         //     // dd($student["regnumber"]);
                         //     return $student["regnumber"];
                         // }

                         // Method 4
                         $students = Student::where("user_id",$this->user_id)->get()->pluck("regnumber");
                         // dd($students);

                         foreach($students as $student){
                              // dd($student); // "WDF1001"
                              return $student;
                         }
                    }

          =Method 5, 6
                =Enroll.php
                    public function student(){
                         
                         // Method 5
                                // join(se table,sec table prikey,compare,primary table fkkey)
                         // $students = Student::join("users","users.id","=","students.user_id")->where("user_id",$this->user_id)->get();
                         // // dd($students);

                         // foreach($students as $student){
                         //     // dd($student);
                         //     return $student["regnumber"];
                         // }

                         // Method 6
                         $students = Student::join("users","users.id","=","students.user_id")->where("user_id",$this->user_id)->get()->pluck("regnumber");
                         // dd($students);

                         foreach($students as $student){
                              // dd($student); // "WDF1001"
                              return $student;
                         }

                    }
               
               * join(sec table, primary table fkkey,compare,sec table prikey)


               *result - when freely joning two tables without conditions 
                   Illuminate\Database\Eloquent\Collection {#1452 ▼ // app\Models\Enroll.php:76
                    #items: array:4 [▼
                    0 => App\Models\Student {#1450 ▶}
                    1 => App\Models\Student {#1455 ▶}
                    2 => App\Models\Student {#1456 ▶}
                    3 => App\Models\Student {#1454 ▶}
                    ]
                    #escapeWhenCastingToString: false
                    }
               
               *result ($student) ## - destructure array (two tables columns come out)
               	
                    App\Models\Student {#1449 ▼ // app\Models\Enroll.php:79
                    #connection: "mysql"
                    #table: "students"
                    #primaryKey: "id"
                    ....
                    #original: array:15 [▼
                         "id" => 1
                         "regnumber" => "WDF1001"
                         "firstname" => "Admin"
                         "lastname" => "Boot"
                         "slug" => "adminboot"
                         "remark" => "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
                         "status_id" => 1
                         "user_id" => 1
                         "created_at" => "2023-12-12 07:27:33"
                         "updated_at" => "2023-12-12 07:53:59"
                         "name" => "admin"
                         "email" => "admin@gmail.com"
                         "email_verified_at" => null
                         "password" => "$2y$12$xffXPm7kidQvS4CgU8LThuAgkEb5otckKTMpVJtuDmrwFsmVApqh6"
                         "remember_token" => "4o4q9tTG60LrsI9HAxMWtCQVOH2xXgkjrOs1M9yeStdGtPmWQqOvovkApVRB"
                    ]
                    }

          =Method 7, 8
               public function student(){
                    
                    // Method 7
                    // $students = Student::join("users","users.id","=","students.user_id")->where("user_id",$this->user_id)->get(["users.*","students.*"]);
                    // // dd($students);

                    // foreach($students as $student){
                    //     // dd($student);
                    //     return $student["regnumber"];
                    // }


                    // Method 8
                    $students = Student::join("users","users.id","=","students.user_id")->where("user_id",$this->user_id)->get(["users.name","students.regnumber"])->first();
                    //dd($students);
                    //dd($students["regnumber"]);
                    return $students["regnumber"];

               }

               *result ($students)
               App\Models\Student {#1444 ▼ // app\Models\Enroll.php:106
                    #connection: "mysql"
                    #table: "students"
                    #primaryKey: "id"
                    ....
                    #original: array:2 [▼
                    "name" => "admin"
                    "regnumber" => "WDF1001"
                    ]        
                    ....
               }

               -Method 7 = all columns from two table come out
               -Method 8 = only selected columns come out

          =Method 9
               $students = Student::join("users","users.id","=","students.user_id")->where("user_id",$this->user_id)->get(["users.name","students.regnumber"])->pluck("regnumber")->first();
               // dd($students); // "WDF1001"
               return $students;

               *pluck should't be written at the end
               $students = Student::join("users","users.id","=","students.user_id")->where("user_id",$this->user_id)->get(["users.name","students.regnumber"])->first()->pluck("regnumber");
               *result ($students)
                    Illuminate\Support\Collection {#1445 ▼ // app\Models\Enroll.php:112
                    #items: array:4 [▼
                    0 => "WDF1001"
                    1 => "WDF1002"
                    2 => "WDF1003"
                    3 => "WDF1004"
                    ]
                    #escapeWhenCastingToString: false
                    } 
          
          =Method 10, 11

               // Method 10
               // $students = DB::table("students")
               //             ->join("users","users.id","=","students.user_id")
               //             ->where("user_id",$this->user_id)
               //             ->get(["users.name","students.regnumber"])
               //             ->pluck("regnumber")->first();
          
               // // dd($students);
               // return $students;

               // Method 11
               $students = DB::table("students")
                              ->select("users.id","users.name","students.regnumber")
                              ->join("users","users.id","=","students.user_id")
                              ->where("user_id",$this->user_id)
                              ->get()
                              ->pluck("regnumber")->first();
          
               // dd($students);
               return $students;

               *result ->get()
                    Illuminate\Support\Collection {#1446 ▼ // app\Models\Enroll.php:135
                    #items: array:1 [▼
                    0 => {#1444 ▼
                         +"id": 1
                         +"name": "admin"
                         +"regnumber": "WDF1001"
                    }
                    ]
                    #escapeWhenCastingToString: false
                    }

           =My     
     
          =MyMethod
               $student = Student::join("users","students.user_id","=","users.id")->where("users.id",$this->user_id)->get(["students.regnumber"])->first();
               // dd($student->regnumber);
               return $student->regnumber;

               
     =>Link with Student 
          =In Enroll.php
               public function studenturl(){
                    return Student::where("user_id",$this->user_id)->get(["students.id"])->first();
               }

          =In enrolls > index.blade.php

               @foreach($enrolls as $idx=>$enroll)
                         <tr>
                              <td>{{++$idx}}</td>
                              {{-- <td>{{ $enroll->student($enroll->user_id) }}</td> --}}
                              <td><a href="{{route('students.show',$enroll->studenturl())}}">{{$enroll->student()}}</a></td>
               ....

          =>Back to Enroll From Student
               =In students > show.blade.php
                    <a href="javascript:void(0);" id="btn-back" class="btn btn-secondary btn-sm rounded-0">Back</a>
                    ....
                    @section("scripts")
                         <script type="text/javascript">
                              // Start Back Btn
                                   const getbtnback = document.getElementById("btn-back");
                                   getbtnback.addEventListener("click",function(){
                                        // window.history.back();
                                        window.history.go(-1);
                                   });
                              // End Back Btn
                         </script>
                    @endsection

                    *go() can reach both front and back

     =>Student Tab Template
          =students > show.blade.php
               <h6>Additional Info</h6>
               <div class="card border-0 rounded-0 shadow mb-4">
                    <ul class="nav">
                         <li class="nav-item">
                              <button type="button" id="autoclick" class="tablinks" onclick="gettab(event,'follower')">Follower</button>
                         </li>
                         <li class="nav-item">
                              <button type="button" class="tablinks" onclick="gettab(event,'following')">Following</button>
                         </li>
                         <li class="nav-item">
                              <button type="button" class="tablinks" onclick="gettab(event,'liked')">Liked</button>
                         </li>
                         <li class="nav-item">
                              <button type="button" class="tablinks" onclick="gettab(event,'remark')">Remark</button>
                         </li>
                    </ul>

                    <div class="tab-content">

                         <div id="follower" class="tab-pane">
                              <h3>This is Home Information</h3>
                              <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
                         </div>

                         <div id="following" class="tab-pane">
                              <h3>This is Profile Information</h3>
                              <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
                         </div>

                         <div id="liked" class="tab-pane">
                              <h3>This is Contact Information</h3>
                              <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
                         </div>

                         <div id="remark" class="tab-pane">
                              <p>{{ $student->remark }}</p>
                         </div>

                    </div>
               </div>

               ....
               @section("css")
                    <style type="text/css">
                         /* Start Tag Box */
                         .nav{
                         display: flex;

                         padding: 0;
                         margin: 0;
                         }
                         .nav .nav-item{
                         list-style-type: none;
                         }
                         .nav .tablinks{
                         border: none;
                         font-size: 16px;
                         padding: 15px 20px;
                         cursor: pointer;

                         transition: background-color 0.3s ease-in;
                         }
                         .nav .tablinks:hover{
                         background-color: #f3f3f3;
                         }

                         .nav .tablinks.active{
                              color: blue;
                         }

                         .tab-pane{

                         padding: 5px 15px;

                         display: none;
                         }
                         /* End Tag Box */
                    </style>
               @endsection

               @section("scripts")
                    // Start Tag Box
                    var gettablinks = document.getElementsByClassName('tablinks');  //HTMLCollection
                    var gettabpanes = document.getElementsByClassName('tab-pane');
                    // console.log(gettabpanes);

                    var tabpanes = Array.from(gettabpanes);

                    function gettab(evn,linkid){

                    tabpanes.forEach(function(tabpane){
                         tabpane.style.display = 'none';
                    });

                    for(var x = 0 ; x < gettablinks.length ; x++){
                         gettablinks[x].className = gettablinks[x].className.replace(' active','');
                    }


                    document.getElementById(linkid).style.display = 'block';


                    // evn.target.className += ' active';
                    // evn.target.className = evn.target.className.replace('tablinks','tablinks active');
                    // evn.target.classList.add('active');

                    // evn.target = evn.currentTarget
                    evn.currentTarget.className += ' active';

                    }

                    document.getElementById('autoclick').click();
                    // End Tag Box
               @endsection

     =>Student Enrolls
          =StudentController.php

               public function show(string $id)
               {
                    $student = Student::findOrFail($id);

                    // $enrolls = Enroll::where("user_id",$student["user_id"])->get();
                    $enrolls = $student->enrolls();
                    // dd($enrolls);
                    return view("students.show",["student"=>$student,"enrolls"=>$enrolls]);
               
               }

          =Student.php
               public function enrolls(){
                    return Enroll::where("user_id",$this->user_id)->get();
               }

          *Controller - Model 
          -enrolls information of the student

          =In students > show.blade.php

                <h6>Enrolls</h6>
               <div class="card border-0 rounded-0 shadow mb-4">
                    <div class="card-body d-flex flex-wrap gap-3">
                         
                         @foreach($enrolls as $enroll)
                         <div class="border shadow p-3 mb-3 enrollboxes">
                              <a href="javascript:void(0);">{{ $enroll->post["title"] }}</a>
                              <div class="text-muted">{{ $enroll->stage["name"] }}</div>
                              <div class="text-muted">{{ date("d M Y",strtotime($enroll->created_at)) }} | {{ date("h:i:s A",strtotime($enroll->created_at)) }}</div>
                              <div class="text-muted">{{ $enroll->updated_at->format("d M Y | h:i:s A") }} </div>
                              {{-- <div class="mt-1" title="{{ $enroll->remark }}">{{ Str::limit($enroll->remark,20) }}</div> --}}
                              {{-- <div class="mt-1" title="{{ $enroll->remark }}">{{ Str::limit($enroll->remark,20,"---") }}</div> --}}
                              {{-- <div class="mt-1" title="{{ $enroll->remark }}">{{ Str::of($enroll->remark)->limit(20) }}</div> --}}
                              {{-- <div class="mt-1" title="{{ $enroll->remark }}">{{ Str::of($enroll->remark)->words(4) }}</div> --}}
                              {{-- <div class="mt-1" title="{{ $enroll->remark }}">{{ Str::of($enroll->remark)->words(4,"----") }}</div> --}}
                              {{-- <div class="mt-1" title="{{ $enroll->remark }}">{{ Str::words($enroll->remark,4) }}</div> --}}
                              <div class="mt-1" title="{{ $enroll->remark }}">{{ Str::words($enroll->remark,4,"----") }}</div>
                         </div>
                         @endforeach
                    </div>
               </div>

          - Enroll Class
               post() inside Enroll.php
                    not in Student
               
               1.There is not post_id in students.
               2.Get information from enrolls. "enrolls" has post_id.
     
     =>Own Search
          =>By Controller
               =In countries > index.blade.php
                    <div class="col-md-12">
                         <form action="" method="">
                              <div class="row justify-content-end">
                                   <div class="col-md-2 col-sm-6 mb-2">
                                        <div class="input-group">
                                             <input type="text" name="filtername" id="filtername" class="form-control form-control-sm rounded-0" placeholder="Search...."/>
                                             <button type="submit" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                                        </div>
                                   </div>
                              </div>
                         </form>
                    </div>

               =In CountriesController.php
                    public function index()
                    {
                         // http://127.0.0.1:8000/countries?filtername=mm
                         // dd(request("filtername")); // mm

                         $countries = Country::where(function($query){
                                   if($getname = request("filtername")){
                                        $query->where("name","LIKE","%".$getname."%");
                                   }
                         })->get();
                         // dd($countries);
                         return view("countries.index",compact("countries"));
                    }

                    -request() - get the request form value
                    -Countries -> where($query) = countries tables represent $query
                         Change query based on condition. (filtername exists or not) 

                    *result ($countries)
                    Illuminate\Database\Eloquent\Collection {#1412 ▼ // app\Http\Controllers\CountriesController.php:22
                    #items: array:1 [▼
                    0 => App\Models\Country {#1411 ▼
                         #connection: "mysql"
                         #table: "countries"
                         #primaryKey: "id"
                         #original: array:6 [▼
                         "id" => 1
                         "name" => "Myanmar"
                         "slug" => "myanmar"
                         "user_id" => 1
                         "created_at" => "2023-12-23 19:14:06"
                         "updated_at" => "2023-12-23 19:14:06"
                         ]
                    ....
                    }
                    ]
                    #escapeWhenCastingToString: false
                    }

                    http://127.0.0.1:8000/countries?filtername=th
                    *result 
                         Thailand
                    
                    http://127.0.0.1:8000/countries?filtername=
                    *result 
                         Myanmar
                         Thailand

               =>Get Old Search Value
                    =In cities > index.blade.php

                         <div class="col-md-12">
                              <form action="" method="">
                                   <div class="row justify-content-end">
                                        <div class="col-md-2 col-sm-6 mb-2">
                                             <div class="input-group">
                                                  <input type="text" name="filtername" id="filtername" class="form-control form-control-sm rounded-0" placeholder="Search...." value="{{ request('filtername') }}"/>
                                                  <button type="submit" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                                             </div>
                                        </div>
                                   </div>
                              </form>
                         </div>

                    =In CitiesController.php
                         public function index()
                         {
                              $cities = City::where(function($query){
                                   if($getname = request("filtername")){
                                        $query->where("name","LIKE","%".$getname."%");
                                   }
                              })->get();
                              // dd($cities);
                              return view("cities.index",compact("cities"));
                         }
          
          =>With Javascript
               =In cities > index.blade.php
                    <div class="input-group">
                         <input type="text" name="filtername" id="filtername" class="form-control form-control-sm rounded-0" placeholder="Search...." value="{{ request('filtername') }}"/>
                         <button type="button" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                    </div>
                    ....


                     // Start Filter
                    const getfilterbtn = document.getElementById("btn-search");
                    getfilterbtn.addEventListener("click",function(e){
                         // console.log("hay");

                         const getfiltername = document.getElementById("filtername").value;
                         const getcururl = window.location.href;
                         
                         // console.log(getfiltername); // search value
                         // console.log(getcururl); // http://127.0.0.1:8000/cities?filtername=yan
                         // console.log(getcururl.split("?")); // ['http://127.0.0.1:8000/cities', 'filtername=yan']
                         // console.log(getcururl.split("?")[0]); // 
                         window.location.href = getcururl.split("?")[0] + "?filtername="+getfiltername;

                         e.preventDefault();
                    });
                    // End Filter

                    *without using submit button, js send value to the current file with the url. 

     =>Lite Looping Method , pluck(value,key)
          =In RolesController.php
               public function create()
               {    
                    //$statuses = Status::all(); // get all statuses
                    $statuses = Status::whereIn("id",[3,4])->get()->pluck('name',"id");
                    //  dd($statuses);
                    return view("roles.create",compact("statuses"));
               }

          =In roles > create.blade.php
               <div class="col-md-6">
                    <label for="name">Status <span class="text-danger">*</span></label>
                    <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                         <!-- <option value="3">On</option>
                         <option value="4">On</option> -->

                         {{-- @foreach($statuses as $status)
                              <option value="{{$status->id}}">{{ $status->name }}</option>
                         @endforeach
                         --}}

                         {{-- 
                         @foreach($statuses as $id=>$name)
                              <option value="{{ $id}}">{{ $name }}</option>
                         @endforeach
                         --}}

                         @foreach($statuses as $idx=>$status)
                              <option value="{{ $idx}}">{{ $status }}</option>
                         @endforeach
                    </select>
               </div>

          *result ($statuses)
               Illuminate\Support\Collection {#1422 ▼ // app\Http\Controllers\RolesController.php:25
               #items: array:2 [▼
               "On" => 3
               "Off" => 4
               ]
               #escapeWhenCastingToString: false
          
          *@foreach($statuses as $id=>$name) is the recommended method.
               
     =>Own Filter DropDown
          =In roles > index.blade.php
               <div class="col-md-12">
                    <form action="" method="">
                         <div class="row justify-content-end">
                              <div class="col-md-2 col-sm-6 mb-2">
                                   <div class="form-group">
                                        <select name="filterstatus_id" id="filterstatus_id" class="form-control form-control-sm rounded-0">
                                             <option value="" selected>Choose Status....</option>     
                                             @foreach($filterstatuses as $id=>$name)
                                                  <option value="{{$id}}">{{ $name }}</option>
                                             @endforeach
                                        </select>
                                   </div>
                              </div>
                         </div>
                    </form>
               </div>
               ....
               <script type="text/javascript">
                    // Start Filter
                    const getfilterstatus = document.getElementById("filterstatus_id");
                    getfilterstatus.addEventListener("click",function(e){
                         // const getstatusid = this.value;
                         // const getstatusid = this.options[this.selectedIndex].value;
                         const getstatusid = this.value || this.options[this.selectedIndex].value;
                         // console.log(getstatusid);

                         let getcururl = window.location.href;
                         // console.log(getcururl); // http://127.0.0.1:8000/cities?filtername=yan
                         // console.log(getcururl.split("?")); // ['http://127.0.0.1:8000/cities', 'filtername=yan']
                         // console.log(getcururl.split("?")[0]); // 
                         
                         window.location.href = getcururl.split("?")[0] + "?filterstatus_id="+getstatusid;

                         e.preventDefault();
                    });
                    // End Filter
          
          =In RolesController.php
               public function index()
               {
                    $roles = Role::where(function($query){
                         if($statusid = request("filterstatus_id")){
                              $query->where("status_id",$statusid);
                         }
                    })->get();
                    $filterstatuses = Status::whereIn("id",[3,4])->get()->pluck('name',"id");
                    return view("roles.index",compact("roles"),compact("filterstatuses"));
               }
               -it doesn't need "LIKE" Sytax because status_id can be checked directly. 

          -may think 'js' is not useful for the above search feature.
               but it is useful for the filter faeture. Because it has no button to submit form. Only js can submit form. 

          =>Backend Option
               =In roles. index.blade.php

                    <select name="filterstatus_id" id="filterstatus_id" class="form-control form-control-sm rounded-0">
                         <!-- <option value="" selected>Choose Status....</option>      -->
                         @foreach($filterstatuses as $id=>$name)
                              <option value="{{$id}}">{{ $name }}</option>
                         @endforeach
                    </select>

               =In RolesController.php
                    public function index()
                    {
                         $roles = Role::where(function($query){
                              if($statusid = request("filterstatus_id")){
                                   $query->where("status_id",$statusid);
                              }
                         })->get();
                         $filterstatuses = Status::whereIn("id",[3,4])->get()->pluck('name',"id")->prepend("Choose Status","");
                         // dd($filterstatuses);
                         return view("roles.index",compact("roles"),compact("filterstatuses"));
                    }

                    *prepend() after pluck. Increase the array at the first. 

                    *result ($filterstatuses);
                    Illuminate\Support\Collection {#1424 ▼ // app\Http\Controllers\RolesController.php:23
                    #items: array:3 [▼
                    "" => "Choose Status"
                    3 => "On"
                    4 => "Off"
                    ]
                    #escapeWhenCastingToString: false
                    }

          => Get Old Filter Value
               =In roles > index.blade.php

                    <select name="filterstatus_id" id="filterstatus_id" class="form-control form-control-sm rounded-0">
                         <!-- <option value="" selected>Choose Status....</option>      -->
                         @foreach($filterstatuses as $id=>$name)
                              <option value="{{$id}}" {{ $id == request('filterstatus_id') ? 'selected' : '' }}>{{ $name }}</option>
                         @endforeach
                    </select>

     =>Using Laravel Folder Downloaded From Github

          Github
               repository > Code > 'Download Zip'

          *.env and other ignores file do not include


          composer update
          (vpn may be needed to on)

          =Create .env file
               -copy existing .env file's content    
          
          php artisan serve

     =>Validation Error
          =In genders > index.blade.php
                <form action="{{route('genders.store')}}" method="POST">
                    {{ csrf_field() }}
                    <div class="row align-items-end">
                         <div class="col-md-6 form-group">
                              <label for="name">Name <span class="text-danger">*</span></label>
                              @error("name")
                                   <span class="text-danger">{{ $message }}<span>
                              @enderror
                              <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0 @error('name') is-invalid @enderror" placeholder="Enter Gender Name" value="{{ old('name') }}"/>
                              {{-- @error("name")
                                   <span class="invalid-feedback">{{ $message }}<span>
                              @enderror
                              --}}

                         </div>
          
          "invalid-feedback" = text color red for message
          "is-invalid" = field red border
          Error Message = The name field is required.

          *can be displayed as you like.
          -error messagees are generally displayed under input field. 
          
          =In roles > create.blade.php  
               <div class="col-md-6 mb-3">
                    <label for="image">Image</label>
                    <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ old('image')}}"/>
                    @error("image")
                         <span class="text-danger">{{ $message }}<span>
                    @enderror
               </div>

               <div class="col-md-6 mb-3">
                    <label for="name">Name <span class="text-danger">*</span></label>
                    <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Role Name" value="{{ old('name') }}"/>
                    @error("name")
                         <span class="text-danger">{{ $message }}<span>
                    @enderror
               </div>

               <div class="col-md-6">
                    <label for="name">Status <span class="text-danger">*</span></label>
                    <select type="text" name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                         <option selected disabled>Choose Status</option>

                         {{-- @foreach($statuses as $status)
                              <option value="{{$status->id}}">{{ $status->name }}</option>
                         @endforeach
                         --}}

                         {{-- 
                         @foreach($statuses as $id=>$name)
                              <option value="{{ $id}}">{{ $name }}</option>
                         @endforeach
                         --}}

                         @foreach($statuses as $idx=>$status)
                              <option value="{{ $idx}}">{{ $status }}</option>
                         @endforeach
                    </select>
                    @error("status_id")
                         <span class="text-danger">{{ $message }}<span>
                    @enderror
               </div>

          -Error get from validation rules that are specified at the controller of the respective method.
          -Error only occur when the input field didn't match the valudation rules.

          *select box is already chosen one option. It will not get error.
          

          Error Handling Pages
          1.Create page
          2.Edit page

     =>Laravel Pagination

          =In TagsController.php
               public function index()
               {
                    $tags = Tag::orderBy("id","asc")->paginate(5);
                    $statuses = Status::whereIn("id",[3,4])->get();
                    return view("tags.index",compact("tags","statuses"));
               }
               -paginate(limitnumber)
               -retrive only limited number of rows
               *paginate() should be placed at the last because it is the data retriever.

          =In tags > index.blade.php
               </table>
               {{ $tags->links('pagination::bootstrap-4') }}
               ----------------------------------------------
               </table>
                    {{ $tags->links() }}

               *Problem 
                    Angle Arrow Design do not align.  
               -problem is bootstrap version
                    project bootstrap = version 5
               -laravel no longer support bootstrap
                    laravel support bootstrap = version 4
               -laravel support tailwind

          http://127.0.0.1:8000/tags?page=1
          http://127.0.0.1:8000/tags?page=2

          paginate() & links() are closely connected.
          links() generate pagination links.
          paginate() retrieve relevant row from table.

          =>Number Order
               - No. always 1 to 5 at all pages.
               *Number should be ordered at each pages.

               =In tags > index.blade.php
                     @foreach($tags as $idx=>$tag)
                         <tr>
                              {{-- <td>{{++$idx}}</td> --}}
                              <td>{{$idx+ $tags->firstItem()}}</td>

                    
               {{$tags->firstItem()}}
               {{-- $idx+ $tags->lastItem() --}}
               <table id="mytable" class="table table-sm table-hover border">

               firstItem() - 1, 6, 11
               *id is added by the current page first item. 

     =>Search, Filter & Pagination
          =In CountriesController.php
               public function index()
               {
                    // http://127.0.0.1:8000/countries?filtername=mm
                    // dd(request("filtername")); // mm

                    $countries = Country::where(function($query){
                              if($getname = request("filtername")){
                                   $query->where("name","LIKE","%".$getname."%");
                              }
                    })->paginate(5);
                    // dd($countries);
                    return view("countries.index",compact("countries"));
               }
     
          =In RolesController.php
               public function index()
               {
                    $roles = Role::where(function($query){
                         if($statusid = request("filterstatus_id")){
                              $query->where("status_id",$statusid);
                         }
                    })->paginate(5);
                    $filterstatuses = Status::whereIn("id",[3,4])->get()->pluck('name',"id")->prepend("Choose Status","");
                    // dd($filterstatuses);
                    return view("roles.index",compact("roles"),compact("filterstatuses"));
               }

     =>Record Download Link

          =Migration
               php artisan make:model Edulink -m

               =In create_edilinks_table.php
                    $table->date("classdate");
                    $table->unsignedBigInteger("post_id");
                    $table->string("url");
                    $table->unsignedBigInteger("user_id");

               php artisan migrate:status
               php artisan migrate

          =php artisan make:controller EdulinksController    

          =>Create New Record
               =In EdulinksController.php
                    public function index()
                    {
                         $data["edulinks"] = Edulink::orderBy("updated_at","desc")->get();
                         $data["posts"] = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->pluck('title',"id");
                         return view("edulinks.index",$data);
                    }

               =In Edulinks index.blade.php
                    <form action="{{route('edulinks.store')}}" method="POST">
                         {{ csrf_field() }}

                         <div class="row align-items-end">
                              <div class="col-md-3">
                                   <label for="classdate">Class Date <span class="text-danger">*</span></label>
                                   @error("classdate")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <input type="date" name="classdate" id="classdate" class="form-control form-control-sm rounded-0" value="{{ old('classdate') }}"/>
                              </div>

                              <div class="col-md-3">
                                   <label for="post_id">Class <span class="text-danger">*</span></label>
                                   @error("post_id")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <select name="post_id" id="post_id" class="form-control form-control-sm rounded-0">
                                        <option selected disabled>Choose class</option>
                                        @foreach($posts as $id=>$title)
                                             <option value="{{$id}}">{{$title}}</option> 
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-3">
                                   <label for="url">Url <span class="text-danger">*</span></label>
                                   @error("url")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <input type="text" name="url" id="url" class="form-control form-control-sm rounded-0" placeholder="Enter url" value="{{ old('url') }}"/>
                              </div>

                              <div class="col-md-3">
                                   <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                   <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                              </div>
                         </div>
                    </form>

               =>Store Record
                    =In EdulinksController.php
                         public function store(Request $request)
                         {
                              $this->validate($request,[
                                   "classdate"=>"required|date",
                                   "post_id"=>'required',
                                   "url"=>"required"
                              ]);

                              $user = Auth::user();
                              $user_id = $user->id;

                              $edulink = new Edulink();
                              $edulink->classdate = $request["classdate"];
                              $edulink->post_id = $request["post_id"];
                              $edulink->url = $request["url"];
                              $edulink->user_id = $user_id;

                              $edulink->save();
                              return redirect()->route("edulinks.index");
                         }
          
          =>List All Records
               =In edulinks > index.blade.php
                    <table id="mytable" class="table table-sm table-hover border">
          
                         <thead>
                              <th>ID</th>
                              <th>Class</th>
                              <th>URL</th>
                              <th>By</th>
                              <th>Class Date</th>
                              <th>Created At</th>
                              <th>Updated At</th>
                              <th>Action</th>
                         </thead>
                         <tbody>
                              @foreach($edulinks as $idx=>$edulink)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td><a href="{{route('posts.show',$edulink->post_id)}}">{{$edulink->post['title']}}</a></td>
                                   <td><a href="#">{{ Str::limit($edulink->url,30) }}</a></td>
                                   <td>{{ $edulink["user"]["name"] }}</td>
                                   <td>{{ date("d M Y",strtotime($edulink->classdate)) }}</td>
                                   <td>{{ $edulink->created_at->format('d M Y h:i A') }}</td>
                                   <td>{{ $edulink->updated_at->format('d M Y') }}</td>
                                   <td>
                                        <a href="{{$edulink->url}}" class="text-primary" target="_blank" download="abc"><i class="fas fa-download"></i></a>
                                        <a href="javascript:void(0);" class="text-info ms-2 editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$edulink->id}}" data-post_id="{{$edulink->post_id}}" data-attcode="{{$edulink->attcode}}"><i class="fas fa-pen"></i></a>
                                   </td>
                              </tr>
                              @endforeach
                         </tbody>
               
                    </table>

               <a href="https://dlt.com/user/user1.jpg" class="text-primary" target="_blank" download="abc"><i class="fas fa-download"></i></a>

               *Real world server link 
               downlod ="abc"
               file is download with the specified file name from download attribute.

               =>Copy URL
                    =In Edulinks > index.blade.php
                         <td><a href="javascript:void(0);" class="link-btns" data-url="{{ $edulink->url}}" title="Copy Link">{{ Str::limit($edulink->url,30) }}</a></td>
                         ....

                         // Start link btn
                         $(".link-btns").click(function(){
                              var geturl = $(this).data("url");
                              // console.log(geturl);
                              navigator.clipboard.writeText(geturl);
                         });
                         // End link btn

          =>Own Search & Filter
               
               =In edulinks > index.blade.php
                    <form action="" method="">
                         <div class="row justify-content-end">
                              <div class="col-md-2 col-sm-6 mb-2">
                                   <div class="form-group">
                                        <select name="filter" id="filter" class="form-control form-control-sm rounded-0">
                                             @foreach($filterposts as $id=>$name)
                                                  <option value="{{$id}}" {{ $id == request('filter') ? 'selected' : '' }}>{{ $name }}</option>
                                             @endforeach
                                        </select>
                                   </div>
                              </div>

                              <div class="col-md-2 col-sm-6 mb-2">
                                   <div class="input-group">
                                        <input type="text" name="search" id="search" class="form-control form-control-sm rounded-0" placeholder="Search...." value="{{ request('filtername') }}"/>
                                        <button type="submit" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                                   </div>
                              </div>

                              
                         </div>
                    </form>

                    ....
                    // Start Filter
                    document.getElementById("filter").addEventListener("click",function(){
                         let getfilterid = this.value || this.options[this.selectedIndex].value;
                         // console.log(getid);
                         window.location.href = window.location.href.split("?")[0]+"?filter="+getfilterid;
                    });
                    // End Filter

               =In EdulinksController.php
                    public function index()
                    {
                         // $data["edulinks"] = Edulink::orderBy("updated_at","desc")->paginate(5);
                         $data["edulinks"] = Edulink::where(function($query){
                              if($getfilter = request("filter")){
                                   $query->where("post_id",$getfilter);
                              } 
                              if($getsearch = request("search")){
                                   // $query->where("classdate","LIKE","%".$getsearch."%");
                                   $query->where("classdate","LIKE","%${getsearch}%");
                              }
                         })->orderBy("classdate","desc")->paginate(5);
                         $data["posts"] = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->pluck('title',"id");
                         $data["filterposts"] = Post::whereIn("attshow",[3])->orderBy("title","asc")->pluck('title',"id")->prepend("Choose Class","");
                         return view("edulinks.index",$data);
                    }
                    *search results based on filtered classes.
                    =If the filter option is choosen, search classes are within the filtered class. 

          =>Local Scopes in Laravel Eloquent
               = Method 1
                    =In Edulink.php
                         // Define Local Scope
                         // public function scope[name]($query){
                         //      return $query->(method);
                         // }

                         public function scopezaclassdate($query){
                              return $query->orderBy("classdate","desc");
                         }

                         *prefix "scope" must be included.

                    =In EdulinksController.php
                    public function index()
                    {
                         // $data["edulinks"] = Edulink::orderBy("updated_at","desc")->paginate(5);
                         $data["edulinks"] = Edulink::where(function($query){
                              if($getfilter = request("filter")){
                                   $query->where("post_id",$getfilter);
                              } 
                              if($getsearch = request("search")){
                                   // $query->where("classdate","LIKE","%".$getsearch."%");
                                   $query->where("classdate","LIKE","%${getsearch}%");
                              }
                         })->zaclassdate()->paginate(5);
                         $data["posts"] = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->pluck('title',"id");
                         $data["filterposts"] = Post::whereIn("attshow",[3])->orderBy("title","asc")->pluck('title',"id")->prepend("Choose Class","");
                         return view("edulinks.index",$data);
                    }

                    *can easily apply specific constraints to your database queries,

               =Method 2
                    =In Edulink.php
                         public function scopefilter($query){
                              if($getfilter = request("filter")){
                                   $query->where("post_id",$getfilter);
                              } 
                              if($getsearch = request("search")){
                                   // $query->where("classdate","LIKE","%".$getsearch."%");
                                   $query->where("classdate","LIKE","%${getsearch}%");
                              }
                              return $query;
                         }

                    =In EdulinksController.php
                         public function index()
                         {
                              // $data["edulinks"] = Edulink::orderBy("updated_at","desc")->paginate(5);
                              $data["edulinks"] = Edulink::filter()->zaclassdate()->paginate(5);
                              $data["posts"] = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->pluck('title',"id");
                              $data["filterposts"] = Post::whereIn("attshow",[3])->orderBy("title","asc")->pluck('title',"id")->prepend("Choose Class","");
                              return view("edulinks.index",$data);
                         }  

          =Inspecting Database Query In background
                    =In EdulinksController.php

                         // \DB::enableQueryLog();
                         // $data["edulinks"] = Edulink::all();
                         // dd( \DB::getQueryLog());

                         \DB::enableQueryLog();
                         $data["edulinks"] = Edulink::filter()->zaclassdate()->paginate(5);
                         dd( \DB::getQueryLog());
                         
                         
                         // \DB::enableQueryLog();
                         $data["posts"] = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->pluck('title',"id");
                         // dd( \DB::getQueryLog());
                         $data["filterposts"] = Post::whereIn("attshow",[3])->orderBy("title","asc")->pluck('title',"id")->prepend("Choose Class","");
                         return view("edulinks.index",$data);

                    *result ($data["edulinks"])                        
                    array:1 [▼ // app\Http\Controllers\EdulinksController.php:37
                    0 => array:3 [▼
                    "query" => "select * from `edulinks`"
                    "bindings" => []
                    "time" => 0.56
                    ]
                    ]
                                             
                    *result ($data["posts"])
                    array:1 [▼ // app\Http\Controllers\EdulinksController.php:45
                    0 => array:3 [▼
                    "query" => "select `title`, `id` from `posts` where `attshow` = ? order by `title` asc"
                    "bindings" => array:1 [▶]
                    "time" => 1.48
                    ]
                    ]

                    *result ($data["edulinks"] with pagination)
                    array:2 [▼ // app\Http\Controllers\EdulinksController.php:41
                    0 => array:3 [▼
                    "query" => "select count(*) as aggregate from `edulinks`"
                    "bindings" => []
                    "time" => 0.74
                    ]
                    1 => array:3 [▼
                    "query" => "select * from `edulinks` order by `classdate` desc limit 5 offset 0"
                    "bindings" => []
                    "time" => 0.66
                    ]
                    ]

          =Multi Column Search
               =In Edulink.php
                    public function scopefilter($query){
                         if($getfilter = request("filter")){
                              $query->where("post_id",$getfilter);
                         } 
                         if($getsearch = request("search")){
                              // $query->where("classdate","LIKE","%".$getsearch."%");
                              
                              // search by class date / created at / updated at
                              // $query->where("classdate","LIKE","%${getsearch}%")
                              //     ->orWhere("created_at","LIKE","%${getsearch}%")
                              //     ->orWhere("updated_at","LIKE","%${getsearch}%");
                              
                              // search by class date / created at / updated at
                              // $query->where("classdate","LIKE","%${getsearch}%");
                              // $query->orWhere("created_at","LIKE","%${getsearch}%");
                              // $query->orWhere("updated_at","LIKE","%${getsearch}%");
                         
                              $query->where("classdate","LIKE","%${getsearch}%")
                                   ->orWhere("created_at","LIKE","%${getsearch}%")
                                   ->orWhere("updated_at","LIKE","%${getsearch}%")
                                   ->orWhereHas("post",function($query) use($getsearch){
                                        $query->where("title","LIKE","%${getsearch}%");
                                   });
                         }
                         return $query;
                    }

               *class at the date or match with created_at, updated_at column will be received.
               *orWhereHas() allow to retrieve records from a table by checking specific condition in a related table.
                    -orWhereHas(relationship,callback(){})
                    -can search with post name in the search box insted of searching by post_id
               *error (Undefined variable $getsearch)  
                    -to apply $getsearch inside callback function 
                    -use($getseaerch) is needed

          =Get Old Search & Filter Values
               =In edulink > index.blade.php

                    <div class="col-md-2 col-sm-6 mb-2">
                         <div class="form-group">
                              <select name="filter" id="filter" class="form-control form-control-sm rounded-0">
                                   @foreach($filterposts as $id=>$name)
                                        <option value="{{$id}}" {{ $id == request('filter') ? 'selected' : '' }}>{{ $name }}</option>
                                   @endforeach
                              </select>
                         </div>
                    </div>

                    <div class="col-md-2 col-sm-6 mb-2">
                         <div class="input-group">
                              <input type="text" name="search" id="search" class="form-control form-control-sm rounded-0" placeholder="Search...." value="{{ request('search') }}"/>
                              <button type="submit" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                         </div>
                    </div>


          =>Solving Pagination Problem
               =filter post
                    filtered results pagination
               =Switch Page 2
                    all the values passed with url cleared and paginate all results                
               
          =>Precise Search & Filter
               
               -above search and filter has some issue
                    =filter post
                    =search class date
                    *other post contains class date is inclusive.

               -to only search within filtered posts not in another post

               =In Edulinks.php
                    public function scopefilteronly($query){
                         if($getfilter = request("filter")){
                              $query->where("post_id",$getfilter);
                         } 
                         
                         return $query;
                    }

                    public function scopesearchonly($query){
                         
                         if($getsearch = request("search")){
                         
                              $query->where("classdate","LIKE","%${getsearch}%")
                                   ->orWhere("created_at","LIKE","%${getsearch}%")
                                   ->orWhere("updated_at","LIKE","%${getsearch}%")
                                   ->orWhereHas("post",function($query) use($getsearch){
                                        $query->where("title","LIKE","%${getsearch}%");
                                   });
                         }
                         return $query;
                    }

               =In EdulinksController.php
                    // \DB::enableQueryLog();
                    // $data["edulinks"] = Edulink::filter()->zaclassdate()->paginate(5);
                    // dd( \DB::getQueryLog());

                    // \DB::enableQueryLog();
                    $data["edulinks"] = Edulink::filteronly()->searchonly()->zaclassdate()->paginate(5);
                    // dd( \DB::getQueryLog());

               *result ($data["edulinks"])
                    =before split 
                         array:2 [▼ // app\Http\Controllers\EdulinksController.php:41
                         0 => array:3 [▼
                         "query" => "select count(*) as aggregate from `edulinks` where (`post_id` = ? and `classdate` LIKE ? or `created_at` LIKE ? or `updated_at` LIKE ? or exists (select * from `posts` where `edulinks`.`post_id` = `posts`.`id` and `title` LIKE ?)) ◀"
                         "bindings" => array:5 [▶]
                         "time" => 0.7
                         ]
                         1 => array:3 [▼
                         "query" => "select * from `edulinks` where (`post_id` = ? and `classdate` LIKE ? or `created_at` LIKE ? or `updated_at` LIKE ? or exists (select * from `posts` where `edulinks`.`post_id` = `posts`.`id` and `title` LIKE ?)) order by `classdate` desc limit 5 offset 0 ◀"
                         "bindings" => array:5 [▶]
                         "time" => 0.59
                         ]
                         ]

                    =after split
                         array:2 [▼ // app\Http\Controllers\EdulinksController.php:45
                         0 => array:3 [▼
                         "query" => "select count(*) as aggregate from `edulinks` where `post_id` = ? and (`classdate` LIKE ? or `created_at` LIKE ? or `updated_at` LIKE ? or exists (select * from `posts` where `edulinks`.`post_id` = `posts`.`id` and `title` LIKE ?)) ◀"
                         "bindings" => array:5 [▶]
                         "time" => 0.65
                         ]
                         1 => array:3 [▼
                         "query" => "select * from `edulinks` where `post_id` = ? and (`classdate` LIKE ? or `created_at` LIKE ? or `updated_at` LIKE ? or exists (select * from `posts` where `edulinks`.`post_id` = `posts`.`id` and `title` LIKE ?)) order by `classdate` desc limit 5 offset 0 ◀"
                         "bindings" => array:5 [▶]
                         "time" => 0.51
                         ]
                         ]

          =>Reset Search & Filter 
               =In edulinks > index.blade.php
                    <div class="input-group">
                         <input type="text" name="search" id="search" class="form-control form-control-sm rounded-0" placeholder="Search...." value="{{ request('search') }}"/>
                         <button type="button" id="btn-clear" class="btn btn-secondary btn-sm"><i class="fas fa-sync"></i></button>
                         <button type="submit" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                    </div>
                    ....

                    // Start Clear btn
                    document.getElementById("btn-clear").addEventListener("click",function(){
                         const getfilter = document.getElementById("filter");
                         const getsearch = document.getElementById("search");

                         getfilter.selectedIndex = 0;
                         getsearch.value = "";

                         window.location.href = window.location.href.split("?")[0];
                    });
                    // End Clear btn

          =>Edit Record
               =In edulinks > index.blade.php
                    <!-- start edit modal -->
                    <div id="editmodal" class="modal fade">
                         <div class="modal-dialog modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Edit Form</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <form id="formaction" action="" method="POST">
                                             {{ csrf_field() }}
                                             {{ method_field('PUT') }}
                                             <div class="row align-items-end">

                                                  <div class="col-md-6">
                                                       <label for="editclassdate">Class Date<span class="text-danger">*</span></label>
                                                       <input type="date" name="editclassdate" id="editclassdate" class="form-control form-control-sm rounded-0" />
                                                  </div>
                                                  
                                                  <div class="col-md-6 form-group">
                                                       <label for="editpost_id">Class <span class="text-danger">*</span></label>
                                                       <select name="editpost_id" id="editpost_id" class="form-control form-control-sm rounded-0">
                                                            @foreach($posts as $id=>$title)
                                                                 <option value="{{$id}}">{{$title}}</option> 
                                                            @endforeach     
                                                       </select>
                                                  </div>

                                                  <div class="col-md-12">
                                                       <label for="editurl">URL<span class="text-danger">*</span></label>
                                                       <input type="text" name="editurl" id="editurl" class="form-control form-control-sm rounded-0" />
                                                  </div>

                                                  <div class="col-md-12 d-flex justify-content-end mt-2">
                                                       <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                  </div>
                                             </div>
                                        </form>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end edit modal -->
                    ....
                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         
                         $("#editclassdate").val($(this).data("classdate"));
                         $("#editpost_id").val($(this).data("post"));
                         $("#editurl").val($(this).data("url"));
                         
                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("action",`/edulinks/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form
               
               =In EdulinksController.php
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "editclassdate"=>"required|date",
                              "editpost_id"=>'required',
                              "editurl"=>"required"
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $edulink = Edulink::findOrFail($id);
                         $edulink->classdate = $request["editclassdate"];
                         $edulink->post_id = Str::slug($request["editpost_id"]);
                         $edulink->url = $request["editurl"];
                         $edulink->user_id = $user_id;

                         $edulink->save();
                         return redirect(route("edulinks.index"));
                    }

                    *error message at crreate fields (The classdate field is required. The post id field is required. The url field is required.)
                    $this->validate($request,[
                         "classdate"=>"required|date",
                         "post_id"=>'required',
                         "url"=>"required"
                    ]);

                    *validate() verify form field name. Not database column name.

          =>Success Message With Alert Box
               =>Create Message
                    =In EdulinksController.php
                         public function store(Request $request)
                         {
                              ....
                              $edulink->save();
                              //    return redirect()->route("edulinks.index");
                              // return redirect()->route("edulinks.index")->with("success","New Link Created");

                              session()->flash("success","New Link Created!!");
                              return redirect()->route("edulinks.index");
                         }

                    =In edulinks > index.blade.php
                          @if($getsuccess = session("success"))
                              <div class="alert alert-success rounded-0">{{ $getsuccess }}</div>
                         @endif
                         <form action="{{route('edulinks.store')}}" method="POST">

               =Update Message
                    =In EdulinksController.php
                         public function update(Request $request, string $id)
                         {
                              ....

                              $edulink->save();
                              // return redirect(route("edulinks.index"));
                              // return redirect()->route("edulinks.index")->with("success","Update Successfully");
                              
                              session()->flash("success","Update Successfully!!");
                              return redirect()->route("edulinks.index");
                         }

                    =In edulinks > index.blade.php

                         {{-- @if($getsuccess = session("success"))
                              <div class="alert alert-success rounded-0">{{ $getsuccess }}</div>
                              @endif
                         --}}

                         @if(session("success"))
                              <div class="alert alert-success rounded-0">{{ session("success") }}</div>
                         @endif

               -After the new record is created, system display create message to user.
               -After the record is updated, system display create message to user.
                    *message is displyed at the same location, because they use same variable name.
                    *Upon reload, the message disappear.

               *allows to attach data to the redirect response, making it accessible on the subsequent request.

               *The with() method is used to flash data to the session, meaning it stores the data temporarily for the next request and then removes it.
                    with(key,value)
                    -delete the data immediately after accessing.

          =>Delete Record
               =With jQuery
                    =In edulinks > index.blade.php
                    <td>
                         <a href="{{$edulink->url}}" class="text-primary" target="_blank" download="abc"><i class="fas fa-download"></i></a>
                         <a href="javascript:void(0);" class="text-info ms-2 editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$edulink->id}}" data-classdate="{{$edulink->classdate}}" data-post="{{$edulink->post_id}}" data-url="{{$edulink->url}}"  ><i class="fas fa-pen"></i></a>
                         <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx + $edulinks->firstItem()}}"><i class="fas fa-trash-alt"></i></a>
                    </td>
                    <form id="formdelete-{{ $idx + $edulinks->firstItem() }}" class="" action="{{route('edulinks.destroy',$edulink->id)}}" method="POST">
                         @csrf
                         @method("DELETE")
                    </form>
               
                    ....
                    // Start Delete Item
                    $(".delete-btns").click(function(){
                         // console.log('hay');
               
                         var getidx = $(this).data("idx");
                         // console.log(getidx);

                         if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                              $('#formdelete-'+getidx).submit();
                              return true;
                         }else{
                              false;
                         }
                    });
                    // End Delete Item

                    =In EdulinksController.php
                         public function destroy(string $id)
                         {
                              $edulink = Edulink::findOrFail($id);
                              $edulink->delete();

                              session()->flash("success","Delete Successfully!!");
                              return redirect()->back();
                         }

                    *links() and firstItem() work together with the paginate() from controller.
                         *error 
                              if controller retrieve row with all() and get()
                    
                    *The edulinks is already paginated.
                         -it can't simply use the $idx. If use, it do not match the number between target number and actual number.

               =With JS
                    var deletebtns = document.querySelectorAll(".delete-btns");
                    deletebtns.forEach(function(deletebtn){
                         deletebtn.addEventListener("click",function(){
                              var getidx = this.getAttribute("data-idx");
                              console.log(getidx);

                              if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                                   document.getElementById('formdelete-'+getidx).submit();
                                   return true;
                              }else{
                                   false;
                              }
                         });
                    });

          =>Auto show/hide Reset Button
               =In edulinks > index.blade.php
                    ....
                    // Start Autoshow Btn Clear
                    const autoshowbtn = function(){
                         let getbtnclear = document.getElementById("btn-clear");
                         let geturlquery = window.location.search; // ?filter=16&search=09
                         // console.log(geturlquery); 
                         let pattern = /[?&]search=/;

                         if(pattern.test(geturlquery)){
                              getbtnclear.style.display ="block";
                         }else{
                              getbtnclear.style.display ="none";
                         }
                    }
                    autoshowbtn();
                    // End Autoshow Btn Clear
     
     =>My Contact
          =Migration
               php artisan make:model Relative -m

               =create_relatives_table.php
                    $table->string("name")->unique();
                    $table->string("slug");
                    $table->unsignedBigInteger("status_id");
                    $table->unsignedBigInteger("user_id");

               php artisan make:model Contact -m 

               =create_contacts_table.php
                    $table->string("firstname");
                    $table->string("lastname")->nullable();
                    $table->string("birthday")->nullable();
                    $table->unsignedBigInteger("relative_id")->nullable();
                    $table->foreignId("user_id")->constrained(
                         table:"users",
                         indexName:"contacts_users_id"
                    )->onUpdate("cascade")->onDelete("cascade");

               *foreign key link 
                    -not to add if the main entity is not exist


                    onUpdate("cascade")
                    onDelete("cascade")
                    -ensures the correctness of the reference even when the primary table values are modified or deleted

               php artisan migrate:status
               php artisan migrate


          "Relatives"
               Mother
               Father
               Parent
               Brother
               Sister
               Son
               Daughter
               Child
               Friend
               Spouse
               Partner
               Assistant
               Manager
               Other
               Sweet Heart

          php artisan make:controller RelativesController
          php artisan make:controller ContactsController

          =>Create & Store Contacts
               =In contacts > index.blade.php
                    <!-- start create modal -->
                    <div id="createmodal" class="modal fade">
                         <div class="modal-dialog modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Create Form</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <form id="{{route('contacts.store')}}" action="" method="POST">
                                             {{ csrf_field() }}
                                             <div class="row align-items-end">
                                                  <div class="col-md-6">
                                                       <label for="firstname">First Name <span class="text-danger">*</span></label>
                                                       <input type="text" name="firstname" id="firstname" class="form-control form-control-sm rounded-0" placeholder="Enter First Name" value="{{ old('firstname') }}"/>
                                                  </div>

                                                  <div class="col-md-6">
                                                       <label for="lastname">Last Name</label>
                                                       <input type="text" name="lastname" id="lastname" class="form-control form-control-sm rounded-0" placeholder="Enter Last Name" value="{{ old('lastname') }}"/>
                                                  </div>

                                                  <div class="col-md-6">
                                                       <label for="birthday">Birthday</label>
                                                       <input type="date" name="birthday" id="birthday" class="form-control form-control-sm rounded-0" value="{{ old('birthday') }}"/>
                                                  </div>
                                                  
                                                  <div class="col-md-6 form-group">
                                                       <label for="relative_id">Relative</label>
                                                       <select name="relative_id" id="relative_id" class="form-control form-control-sm rounded-0">
                                                            @foreach($relatives as $id=>$name)
                                                                 <option value="{{$id}}">{{ $name }}</option>
                                                            @endforeach     
                                                       </select>
                                                  </div>
                                                  
                         
                                                  <div class="col d-flex justify-content-end mt-2">
                                                       <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                  </div>
                                             </div>
                                        </form>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end create modal -->

               =In ContactsController.php
                    public function index()
                    {
                         $data["contacts"] = Contact::all();
                         $relatives = Relative::orderBy("id","asc")->pluck("name","id")->prepend("Choose relative","");
                         return view("contacts.index",compact("relatives"),$data);
                    }
               
               *pluck() automatically sort a-z
               -to sort as database row, use orderBy() by sorting id in asc 


               =In ContactsController.php
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "firstname" => "required|min:3|max:50",
                              "lastname"=>"max:50",
                              "birthday"=>"nullable",
                              "relative_id"=>"nullable"
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $contact = new Contact();
                         $contact->firstname = $request["firstname"];
                         $contact->lastname = $request["lastname"];
                         $contact->birthday = $request["birthday"];
                         $contact->relative_id = $request["relative_id"];
                         $contact->user_id = $user_id;

                         $contact->save();
                         
                         session()->flash("success","New Contact Created");
                         return redirect(route("contacts.index"));
                    }

          =>List All Contacts
               =In contacts > index.blade.php
                    <table id="mytable" class="table table-sm table-hover border">
               
                         <thead>
                              <th>ID</th>
                              <th>First Name</th>
                              <th>Last Name</th>
                              <th>Birthday</th>
                              <th>Relative</th>
                              <th>By</th>
                              <th>Created At</th>
                              <th>Updated At</th>
                              <th>Action</th>
                         </thead>
               
                         <tbody>
                              @foreach($contacts as $idx=>$contact)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td>{{$contact->firstname}}</td>
                                   <td>{{$contact->lastname}}</td>
                                   <td>{{ date("d M Y",strtotime($contact->birthday)) }}</td>
                                   <td>{{ $contact["relative"]["name"] }}</td>
                                   <td>{{ $contact["user"]["name"] }}</td>
                                   <td>{{ $contact->created_at->format('d M Y') }}</td>
                                   <td>{{ $contact->updated_at->format('d M Y') }}</td>
                                   <td>
                                        <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$contact->id}}" data-name="{{$contact->name}}" data-status="{{$contact->status_id}}"><i class="fas fa-pen"></i></a>
                                        <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                                   </td>
                                   <form id="formdelete-{{ $idx }}" class="" action="{{route('contacts.destroy',$contact->id)}}" method="POST">
                                        @csrf
                                        @method("DELETE")
                                   </form>
                              </tr>
                              @endforeach
                         </tbody>  
                    </table>
               
          
               "contacts"
               id   firstname      lastname       birthday       relative_id
               2    Zaw            Myo            NULL           NULL

               *error
               Trying to access array offset on value of type null

               {{ dd(date("d M Y",strtotime(""))); }} 
               "01 Jan 1970"
               
               =In contacts > index.blade.php

                    <td>{{ $contact->birthday ? date("d M Y",strtotime($contact->birthday)) : "" }}</td>
                    <td>{{ $contact->relative_id ? $contact["relative"]["name"] : "" }}</td>
                    
                    *empty shown at the table column.
          
          =>Delete Contact
               public function destroy(string $id)
               {
                    $contact = Contact::findOrFail($id);
                    $contact->delete();
                    session()->flash("info","Delete Successfully");
                    return redirect()->back();
               }
               
          =>toastr Notification

               https://github.com/CodeSeven/toastr


               CDNs > 
               Minified
                    //cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js
                    //cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css
               
               =>Usage

                    Other Options > 

               =In adminheader.blade.php
                    <!-- toastr css1 js1 -->
                    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

               =In adminfooter.blade.php
                    <!-- toastr css1 js1 -->
                    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" type="text/javascript"></script>
                    
                    <script> 
                         
                         @if(session()->has("success"))
                              toastr.success('{{ session()->get("success") }}', 'Successful')
                         @endif

                         @if(session()->has("info"))
                              toastr.info('{{ session()->get("info") }}', 'Information')
                         @endif

                         // =>Display all validation errors 
                         @if($errors)
                              @foreach($errors->all() as $error)
                                   toastr.error('{{$error}}', 'Warning!')
                              @endforeach
                         @endif
                    </script>

                    *all pages can access success message from session and then display to user.
                    =contact create 
                    =contact delete 
                    =contact validation errors

                    =posts validation errors

                    *blade codes inside javascript <script></script> 

                    =>Seperate blade code and js code
                         =>Session method
                              =>Adding toastr Options
                                   =In adminfooter.blade.php
                                        <!-- toastr css1 js1 -->
                                        <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" type="text/javascript"></script>
                                        <script>
                                             toastr.options = {
                                                  "progressBar":true,
                                                  "closeButton":true
                                             };
                                        </script> 

                                             @if(Session::has("success"))
                                                  <script>toastr.success('{{ session()->get("success") }}', 'Successful')</script>
                                             @endif

                                             @if(session()->has("info"))
                                                  <script>toastr.info('{{ session()->get("info") }}', 'Information')</script>
                                             @endif

                                             @if($errors)
                                                  @foreach($errors->all() as $error)
                                                       <script>toastr.error('{{$error}}', 'Warning!',{timeOut:1000})</script>
                                                  @endforeach
                                             @endif

          =>Edit Contact 
               =In index.blade.php
                    <td>
                         <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$contact->id}}" data-firstname="{{$contact->firstname}}" data-lastname="{{$contact->lastname}}" data-birthday="{{$contact->birthday}}" data-relative="{{$contact->relative_id}}"><i class="fas fa-pen"></i></a>
                         <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                    </td>
                    ....
                    <!-- start edit modal -->
                    <div id="editmodal" class="modal fade">
                         <div class="modal-dialog modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Edit Form</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <form id="formaction" action="" method="POST">
                                             {{ csrf_field() }}
                                             {{ method_field('PUT') }}
                                             <div class="row align-items-end">
                                                  <div class="col-md-6 form-group">
                                                       <label for="editfirstname">First Name <span class="text-danger">*</span></label>
                                                       <input type="text" name="firstname" id="editfirstname" class="form-control form-control-sm rounded-0"/>
                                                  </div>

                                                  <div class="col-md-6 form-group">
                                                       <label for="editlastname">Last Name <span class="text-danger">*</span></label>
                                                       <input type="text" name="lastname" id="editlastname" class="form-control form-control-sm rounded-0"/>
                                                  </div>

                                                  <div class="col-md-6 form-group">
                                                       <label for="editbirthday">Birthday<span class="text-danger">*</span></label>
                                                       <input type="date" name="birthday" id="editbirthday" class="form-control form-control-sm rounded-0"/>
                                                  </div>
                                             
                                                  
                                                  <div class="col-md-6 form-group">
                                                       <label for="editrelative_id">Relative</label>
                                                       <select name="relative_id" id="editrelative_id" class="form-control form-control-sm rounded-0">
                                                            @foreach($relatives as $id=>$name)
                                                                 <option value="{{$id}}">{{$name}}</option>
                                                            @endforeach       
                                                       </select>
                                                  </div>
                                                  
                         
                                                  <div class="col d-flex justify-content-end mt-2">
                                                       <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                  </div>
                                             </div>
                                        </form>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end edit modal -->
                    ....
                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         
                         $("#editfirstname").val($(this).attr("data-firstname"));
                         $("#editlastname").val($(this).attr("data-lastname"));
                         $("#editbirthday").val($(this).attr("data-birthday"));
                         $("#editrelative_id").val($(this).attr("data-relative"));
                         
                         const getid = $(this).data("id");
                         $("#formaction").attr("action",`/contacts/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form

               =In ContactsController.php
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "firstname" => "required|min:3|max:50",
                              "lastname"=>"max:50",
                              "birthday"=>"nullable",
                              "relative_id"=>"nullable"
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         $contact = Contact::findOrFail($id);
                         $contact->firstname = $request["firstname"];
                         $contact->lastname = $request["lastname"];
                         $contact->birthday = $request["birthday"];
                         $contact->relative_id = $request["relative_id"];
                         $contact->user_id = $user_id;
                         $contact->save();

                         session()->flash("success","Update Successfully");
                         return redirect(route("contacts.index"));
                    }

          =>Setting Default to Laravel Pagination
               =In app > Providers > AppServiceProvider.php
                    use Illuminate\Pagination\Paginator;

                    public function boot(): void
                    {
                         View::composer('*',function($view){
                              $view->with("userdata",Auth::user());
                         });

                         Paginator::useBootstrapFive();
                    }

               =In contacts > index.blade.php
                    {{ $contacts->links() }}
                    {{-- $contacts->links("pagination::bootstrap-4") --}}
                    {{-- $contacts->links("pagination::bootstrap-5") --}}
               
          =>Contact Search & Filter + Pagination
               =In contacts > index.blade.php
                    <div class="col-md-12">
                         <form action="" method="">
                              <div class="row justify-content-end">
                                   <div class="col-md-2 col-sm-6 mb-2">
                                        <div class="form-group">
                                             <select name="filter" id="filter" class="form-control form-control-sm rounded-0">
                                                  @foreach($relatives as $id=>$name)
                                                       <option value="{{$id}}" {{ $id == request('filter') ? 'selected' : '' }}>{{ $name }}</option>
                                                  @endforeach
                                                  
                                             </select>
                                        </div>
                                   </div>

                                   <div class="col-md-2 col-sm-6 mb-2">
                                        <div class="input-group">
                                             <input type="text" name="search" id="search" class="form-control form-control-sm rounded-0" placeholder="Search...." value="{{ request('search') }}"/>
                                             <button type="button" id="btn-clear" class="btn btn-secondary btn-sm"><i class="fas fa-sync"></i></button>
                                             <button type="submit" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                                        </div>
                                   </div>

                                   
                              </div>
                         </form>
                    </div>
                    ....
                    </table>
                    {{ $contacts->links() }}
                    {{-- $contacts->appends(request()->only("filter","search"))->links() --}}

                    ....
                    <script type="text/javascript">
                         // Start Filter
                         document.getElementById("filter").addEventListener("click",function(){
                              let getfilterid = this.value || this.options[this.selectedIndex].value;
                              // console.log(getid);
                              window.location.href = window.location.href.split("?")[0]+"?filter="+getfilterid;
                         });
                         // End Filter

                         // Start Clear btn
                         document.getElementById("btn-clear").addEventListener("click",function(){
                              const getfilter = document.getElementById("filter");
                              const getsearch = document.getElementById("search");

                              getfilter.selectedIndex = 0;
                              getsearch.value = "";

                              window.location.href = window.location.href.split("?")[0];
                         });
                         // End Clear btn

                         // Start Autoshow Btn Clear
                         const autoshowbtn = function(){
                              let getbtnclear = document.getElementById("btn-clear");
                              let geturlquery = window.location.search; // ?filter=16&search=09
                              // console.log(geturlquery); 
                              let pattern = /[?&]search=/;

                              if(pattern.test(geturlquery)){
                                   getbtnclear.style.display ="block";
                              }else{
                                   getbtnclear.style.display ="none";
                              }
                         }
                         autoshowbtn();
                         // End Autoshow Btn Clear

                    **have to appends() both 'filter' and 'search' query
                         if not, pagination will not correctly work. It will start from the orignal url not including filtered and searched query.

               =In Contact.php     
                    public function scopefilteronly($query){
                         if($getfilter = request("filter")){
                              $query->where("relative_id",$getfilter);
                         } 
                         
                         return $query;
                    }

                    public function scopesearchonly($query){
                         
                         if($getsearch = request("search")){
                              // search by firstname / lastname / birthday / relative name or WhereHas(relation,callback)
                              $query->where("firstname","LIKE","%${getsearch}%")
                                   ->orWhere("lastname","LIKE","%${getsearch}%")
                                   ->orWhere("birthday","LIKE","%${getsearch}%")
                                   ->orWhereHas("relative",function($query) use($getsearch){
                                        $query->where("name","LIKE","%${getsearch}%");
                                   });
                         }
                         return $query;
                    }

                    public function scopezafirstname($query){
                         return $query->orderBy("firstname","asc");
                    }

               =In ContactsController.php

                    public function index()
                    {
                         // $data["contacts"] = Contact::paginate(5);
                         $data["contacts"] = Contact::filteronly()->searchonly()->zafirstname()->paginate(5)->withQueryString();
                         $relatives = Relative::orderBy("id","asc")->pluck("name","id")->prepend("Choose relative","");
                         return view("contacts.index",compact("relatives"),$data);
                    }

                    *withQueryString() to include all the query string at the end of url.

     =>Breradcrumb & Auto page title

               {{-- <p>{{ \Request::root() }}<p> --}}            {{-- http://127.0.0.1:8000 --}}
               {{-- <p>{{ \Request::fullURL() }}<p> --}}          {{-- http://127.0.0.1:8000/edulinks?filter=4&search=16 --}}
               {{-- <p>{{ \Request::url() }}<p> --}}              {{-- http://127.0.0.1:8000/edulinks (not including query) --}}
               {{-- <p>{{ \Request::getRequestUri() }}<p> --}}    {{-- /edulinks?filter=4&search=16 ( include all url and query behind domain /host name ) --}}
               {{-- <p>{{ \Request::getPathInfo() }}<p> --}}      {{-- /edulinks ( include all url behind domain /host name but not including query ) --}}
               {{-- <p>{{ \Request::path() }}<p> --}}             {{-- posts/1/edit ( include all url behind domain /host name but not including query ) --}}
                                   

               {{-- <p>{{ request()->root() }}<p> --}}             {{-- http://127.0.0.1:8000 --}}
               {{-- <p>{{ request()->fullURL() }}<p> --}}          {{-- http://127.0.0.1:8000/edulinks?filter=4&search=16 --}}
               {{-- <p>{{ request()->url() }}<p> --}}              {{-- http://127.0.0.1:8000/edulinks (not including query) --}}
               {{-- <p>{{ request()->getRequestUri() }}<p> --}}    {{-- /edulinks?filter=4&search=16 ( include all url and query behind domain /host name ) --}}
               {{-- <p>{{ request()->getPathInfo() }}<p> --}}      {{-- /edulinks ( include all url behind domain /host name but not including query ) --}}
               {{-- <p>{{ request()->path() }}<p> --}}             {{-- posts/1/edit ( include all url behind domain /host name but not including query ) --}}
                                        
               {{-- /////////////////////////////////////////////////////////////////// --}}

               {{-- <p>{{ url()->full() }}<p> --}}                {{-- http://127.0.0.1:8000/edulinks?filter=4&search=16 --}}
               {{-- <p>{{ url()->current() }}<p> --}}             {{-- http://127.0.0.1:8000/edulinks (not including query) --}}
               {{-- <p>{{ url()->previous() }}<p> --}}            {{-- http://127.0.0.1:8000/edulinks?filter=4&search=16 (get full url but it is the last url request not current) --}}

          =Breadcrumb Format 
               Home / Recent / Current

          =In adminindex.blade.php
               <!-- Start Inner Content Area -->
               <div class="row">
                    {{-- <h5>@yield("caption")</h5> --}}
                    {{--<h6>{{ucfirst(Request::path()) }}</h6> --}}

                    <nav>
                         <ol class="breadcrumb">
                              <li class="breadcrumb-item"><a href="{{ \Request::root() }}"><i class="fas fa-home"></i></a></li>
                              <li class="breadcrumb-item"><a href="{{ url()->previous() }}">{{ Str::title(preg_replace("/[[:punct:]]+[[:alnum:]]+/","",str_replace(Request::root()."/","",url()->previous()))) }}</a></li>
                              <li class="breadcrumb-item active">{{ucfirst(Request::path()) }}</li>
                         </ol>
                    </nav>

                    
                    @yield("content")
               </div>
               <!-- End Inner Content Area -->
          
          *Steps of removing previous url 
          <!-- http://127.0.0.1:8000/edulinks?filter=4&search=16 -->
          {{-- str_replace(Request::root()."/","",url()->previous()) --}}
          <!-- =remove primary domain name with / -->
          
          <!-- edulinks?filter=4&search=16 -->
          {{-- preg_replace("/[[:punct:]]+[[:alnum:]]+/","",str_replace(Request::root()."/","",url()->previous())) --}}
          <!-- =remove all query string -->
          
          <!-- edulinks -->
          {{-- Str::title(preg_replace("/[[:punct:]]+[[:alnum:]]+/","",str_replace(Request::root()."/","",url()->previous()))) --}}


          *URL Circle
          http://127.0.0.1:8000/posts <-> Edulinks
          http://127.0.0.1:8000/edulinks?filter=20&search=8 <-> Posts


          *URL conflit
               http://127.0.0.1:8000/posts
               http://127.0.0.1:8000/posts/1

               <- (back to the previous posts lists)
               Home / Posts / Posts

               =Click previous Posts
               Home / Posts / Posts/1

     =>Leaves
          php artisan make:model Leave -m

          =In create_leaves_table.php
               $table->unsignedBigInteger("post_id");
               $table->date("startdate");
               $table->date("enddate");
               $table->unsignedBigInteger("tag");
               $table->string("title");
               $table->longText("content");
               $table->string("image")->nullable();
               $table->enum('stage_id',[1,2,3])->default(2)->comment("1=Approved, 2= Pending, 3=Reject");
               $table->unsignedBigInteger("authorize_id")->nullable();
               $table->unsignedBigInteger("user_id");

          php artisan migrate:status
          php artisan migrate

          php artisan make:controller LeavesController

          =>Create & Store Leave
               =In leaves > index.blade.php
                    <form action="/posts" method="POST" enctype="multipart/form-data">
                         @csrf

                         <div class="row">

                              <div class="col-md-4">

                                   <div class="row">
                                        <div class="col-md-12 mb-3">
                                             <label for="image" class="gallery"><span>Choose Images</span></label>
                                             <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ old('image')}}" hidden/>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                             <label for="startdate">Start Date <span class="text-danger">*</span></label>
                                             <input type="date" name="startdate" id="startdate" class="form-control form-control-sm rounded-0" value="{{ old('startdate') }}"/>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                             <label for="enddate">End Date <span class="text-danger">*</span></label>
                                             <input type="date" name="enddate" id="enddate" class="form-control form-control-sm rounded-0" value="{{ old('enddate') }}"/>
                                        </div>
                                        
                                   </div>
                                   
                              </div>

                              <div class="col-md-8">
                                   <div class="row">
                                        
                                        <div class="col-md-12 mb-3">
                                             <label for="title">Title <span class="text-danger">*</span></label>
                                             <input type="text" name="title" id="title" class="form-control form-control-sm rounded-0" placeholder="Enter Post Title" value="{{ old('title') }}"/>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                             <label for="post_id">Class <span class="text-danger">*</span></label>
                                             <select name="post_id" id="post_id" class="form-control form-control-sm rounded-0">
                                             <option selected disabled value="">Choose Class</option>     
                                                  @foreach($posts as $id=>$name)
                                                       <option value="{{$id}}">{{ $name }}</option>
                                                  @endforeach
                                             </select>
                                   
                                        </div>
     
                                        <div class="col-md-6 mb-3">
                                             <label for="tag">Tag <span class="text-danger">*</span></label>
                                             <select name="tag" id="tag" class="form-control form-control-sm rounded-0">
                                                  <option selected disabled value="">Choose authorize person</option>     
                                                  
                                                  @foreach($tags as $id=>$name)
                                                       <option value="{{$id}}">{{ $name }}</option>
                                                  @endforeach
                                             </select>
                                   
                                        </div>

                                        <div class="col-md-12 mb-3">
                                             <label for="content">Content <span class="text-danger">*</span></label>
                                             <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{ old('content') }}</textarea>
                                        </div>
                                        

                                        <div class="col-md-12 d-flex justify-content-end align-items-end">
                                                  <a href="{{route('posts.index')}}" class="btn btn-secondary btn-sm rounded-0 me-3">Cancel</a>
                                                  <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                        </div>
                                   </div>
                              </div>

                              
                         </div>
                    </form>

               =In LeavesController.php
                    public function create()
                    {    
                         $data["posts"] = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->pluck("title","id");
                         $data["tags"] = User::orderBy("name","asc")->get()->pluck("name","id");

                         return view("leaves.create",$data);
                    }     

                    *tag person should be the person who has admin role. Future project iteration should implement this needs.

               =In LeavesController.php
                    public function store(LeaveRequest $request)
                    {
                         // $this->validate($request,[
                         //     "post_id" => "required",
                         //     "startdate" => "required",
                         //     "enddate" => "required",
                         //     "tag" => "required",
                         //     "title" => "required|max:50",
                         //     "content" => "required",
                         //     "image" => "nullable|image|mimes:jpg,jpeg,png|max:1024",
                         // ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $leave = new Leave();
                         $leave->post_id = $request["post_id"];
                         $leave->startdate = $request["startdate"];
                         $leave->enddate = $request["enddate"];
                         $leave->tag = $request["tag"];
                         $leave->title = $request["title"];
                         $leave->content = $request["content"];
                         $leave->user_id = $user_id;

                         // Single Image Upload
                         if(file_exists($request["image"])){
                              $file = $request["image"];
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$leave['id'].$fname;
                              // $file->move(public_path("leaves/img"),$imagenewname);
                              $file->move(public_path("assets/img/leaves"),$imagenewname);
                              
                              $filepath = "assets/img/leaves/".$imagenewname;
                              $leave->image = $filepath;
                         }    
                         $leave->save();
                         
                         session()->flash("success","New Leave Created");
                         return redirect(route("leaves.index"));
                    }

          =>Validation with Request file
               php artisan make:request LeaveRequest

               =Original LeaveRequest.php
                    <?php

                    namespace App\Http\Requests;

                    use Illuminate\Foundation\Http\FormRequest;

                    class LeaveRequest extends FormRequest
                    {
                         /**
                              * Determine if the user is authorized to make this request.
                              */
                         public function authorize(): bool
                         {
                              return false;
                         }

                         /**
                              * Get the validation rules that apply to the request.
                              *
                              * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
                              */
                         public function rules(): array
                         {
                              return [
                                   //
                              ];
                         }
                    }

               =In app > Http > Requests > LeaveRequest.php
                    public function authorize(): bool
                    {
                         return true;
                    }

                    public function rules(): array
                    {
                         return [
                                   "post_id" => "required",
                                   "startdate" => "required",
                                   "enddate" => "required",
                                   "tag" => "required",
                                   "title" => "required|max:50",
                                   "content" => "required",
                                   "image" => "nullable|image|mimes:jpg,jpeg,png|max:1024",
                              ];
                    }

               *result ( authorize() - return false; )
               403 | THIS ACTION IS UNAUTHORIZED.

               *Validate Request should only be used when there are many validation rules.
                    - should not seperate validate request when validation rules a few of lines. 

               =>Default Validation Message

                    *result (create a leave without filling any fields.)
                         The content field is required.
                         The title field is required.
                         The tag field is required.
                         The enddate field is required.
                         The startdate field is required.
                         The post id field is required.

                    *First validation error is displayed at the bottom.
                    -User do not know the post id field. She know class. 

               =>Changing the name of attributes in error message
                    =In LeaveRequest.php
                         public function attributes(){
                              return [
                                   "post_id" => "class name",
                                   "startdate" => "start date",
                                   "enddate" => "end date",
                                   "tag" => "authorize person",
                              ]; 
                         }
                    *result (create a leave without filling any fields.)
                         The content field is required.
                         The title field is required.
                         The authorize person field is required.
                         The end date field is required.
                         The start date field is required.
                         The class name field is required.

                    *only change the attribute name not the whole message.
                    *Prove 
                         "post_id" => "class name is required",

                         The class name is required field is required.z

               =>Customizing Validtaion error message in Request File
                    -use in strict validation rules
                    
                    =In LeaveRequest.php
                         public function messages(){
                              return [
                                   "post_id.required" => "class name can't be empty",
                                   "startdate.required" => "start date can't be empty",
                                   "enddate.required" => "end date can't be empty",
                                   "tag.required" => "authorize person must be choose",
                              ];
                         }

                    *result (create a leave without filling any fields.)
                         The content field is required.
                         The title field is required.
                         authorize person must be choose
                         end date can't be empty
                         start date can't be empty
                         class name can't be empty

               =>Customizing Validation in controller
                    -use in loose validation rules

                    =In DaysController.php
                         public function store(Request $request)
                         {
                              $this->validate($request,[
                                   "name" => "required|max:50|unique:days",
                                   "status_id" => "required|in:3,4",
                              ],[
                                   "name.required"=>"Day Name is required"
                              ]);

                              $user = Auth::user();
                              $user_id = $user->id;

                              $day = new Day();
                              $day->name = $request["name"];
                              $day->slug = Str::slug($request["name"]);
                              $day->status_id = $request["status_id"];
                              $day->user_id = $user_id;
                              $day->save();
                              return redirect(route("days.index"));
                         }
          
          =>Edit & Update Leave
               =In leaves > edit.blade.php
                    <form action="/leaves/{{$leave->id}}" method="POST" enctype="multipart/form-data">
                         @csrf
                         @method("PUT")

                         <div class="row">

                              <div class="col-md-4">

                                   <div class="row">
                                        <div class="col-md-12 mb-3">

                                             <div class="row">
                                                  <div class="col-md-6 text-sm-center">
                                                       <img src="{{asset($leave->image)}}" width="200" alt="{{$leave->title}}"/>
                                                  </div>
                                                  <div class="col-md-6">
                                                       <label for="image" class="gallery"><span>Choose Images</span></label>
                                                       <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ old('image',$leave->image) }}" hidden/>
                                                  </div>
                                             </div>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                             <label for="startdate">Start Date <span class="text-danger">*</span></label>
                                             <input type="date" name="startdate" id="startdate" class="form-control form-control-sm rounded-0" value="{{ old('startdate',$leave->startdate) }}"/>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                             <label for="enddate">End Date <span class="text-danger">*</span></label>
                                             <input type="date" name="enddate" id="enddate" class="form-control form-control-sm rounded-0" value="{{ old('enddate',$leave->enddate) }}"/>
                                        </div>
                                   </div>
                                   
                              </div>

                              <div class="col-md-8">
                                   <div class="row">
                                        
                                        <div class="col-md-12 mb-3">
                                             <label for="title">Title <span class="text-danger">*</span></label>
                                             <input type="text" name="title" id="title" class="form-control form-control-sm rounded-0" placeholder="Enter leave Title" value="{{ old('title',$leave->title) }}"/>
                                        </div>

                                        <div class="col-md-6">
                                             <label for="post_id">Class <span class="text-danger">*</span></label>
                                             <select name="post_id" id="post_id" class="form-control form-control-sm rounded-0">
                                                  @foreach($posts as $id=>$name)
                                                       <option value="{{$id}}"
                                                            @if($id === $leave["post_id"])
                                                                 selected
                                                            @endif
                                                       >{{ $name }}</option>
                                                  @endforeach
                                             </select>
                                        </div>

                                        <div class="col-md-6">
                                             <label for="tag">Tag <span class="text-danger">*</span></label>
                                             <select name="tag" id="tag" class="form-control form-control-sm rounded-0">
                                                  @foreach($tags as $id=>$name)
                                                       <option value="{{$id}}"
                                                            @if($id === $leave["tag"])
                                                                 selected
                                                            @endif
                                                       >{{ $name }}</option>
                                                  @endforeach
                                             </select>
                                        </div>


                                        <div class="col-md-12 mb-3">
                                             <label for="content">Content <span class="text-danger">*</span></label>
                                             <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{$leave->content}}</textarea>
                                        </div>                                   

                                        <div class="col-md-12 d-flex justify-content-end align-items-end">
                                             <div class="">
                                                  <a href="{{route('leaves.index')}}" class="btn btn-secondary btn-sm rounded-0 me-3">Cancel</a>
                                                  <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                             </div>
                                        </div>
                                   </div>
                              </div>

                              
                         </div>
                    </form>

               =In LeavesController.php
                    public function edit(string $id)
                    {

                         $data["leave"] = Leave::findOrFail($id);

                         $data["posts"] = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->pluck("title","id");
                         $data["tags"] = User::orderBy("name","asc")->get()->pluck("name","id");

                         return view("leaves.edit",$data);
                    }

                    public function update(LeaveRequest $request, string $id)
                    {
                         // $this->validate($request,[
                         //     "post_id" => "required",
                         //     "startdate" => "required",
                         //     "enddate" => "required",
                         //     "tag" => "required",
                         //     "title" => "required|max:50",
                         //     "content" => "required",
                         //     "image" => "nullable|image|mimes:jpg,jpeg,png|max:1024",
                         // ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         $leave = Leave::findOrFail($id);
                         $leave->post_id = $request["post_id"];
                         $leave->startdate = $request["startdate"];
                         $leave->enddate = $request["enddate"];
                         $leave->tag = $request["tag"];
                         $leave->title = $request["title"];
                         $leave->content = $request["content"];


                         // Remove Old Image
                         if($request->hasFile("image")){
                              $path = $leave->image;

                              if(File::exists($path)){
                                   File::delete($path);
                              }
                         }

                         // Single Image Update
                         if($request->hasFile("image")){
                              $file = $request->file("image");
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$leave['id'].$fname;
                              $file->move(public_path("assets/img/leaves"),$imagenewname);
                              
                              $filepath = "assets/img/leaves/".$imagenewname;
                              $leave->image = $filepath;
                         }    

                         $leave->save();
                         session()->flash("success","Update Successfully");

                         return redirect(route("leaves.index"));
                    }

          =>Two Request Files
               =Create 2 Request Files for create & edit

               -validation rules are not the exactly same
                    1. form field attributes changes (firstname,editfirstname) 
                    2. rules are differents according to the situation (create column unique do not need id but edit column need id)
               
               *There are too many files making messy project. 

          =>Incorporate validation ruels in one request file

               =In LeaveRequest.php
                    public function authorize(): bool
                    {

                         // dd($this->method()); 
                         return true;
                    }

                    public function rules(): array
                    {
                         // return [
                         //     "post_id" => "required",
                         //     "startdate" => "required",
                         //     "enddate" => "required",
                         //     "tag" => "required",
                         //     "title" => "required|max:50",
                         //     "content" => "required",
                         //     "image" => "nullable|image|mimes:jpg,jpeg,png|max:1024",
                         // ];
                         if($this->method() == "POST"){
                              return [
                                   "post_id" => "required",
                                   "startdate" => "required",
                                   "enddate" => "required",
                                   "tag" => "required",
                                   "title" => "required|max:50",
                                   "content" => "required",
                                   "image" => "nullable|image|mimes:jpg,jpeg,png|max:1024",
                              ];
                         }else{
                              return [
                                   "post_id" => "required",
                                   "startdate" => "required",
                                   "enddate" => "required",
                                   "tag" => "required",
                                   "title" => "required|max:50",
                                   "content" => "required",
                                   "image" => "nullable|image|mimes:jpg,jpeg,png|max:1024",
                              ];
                         }
                         
                    }

               
               *result (create and edit leave)                    
                    "POST" // app\Http\Requests\LeaveRequest.php:14  
                    "PUT" // app\Http\Requests\LeaveRequest.php:15

          =>List all leaves
               =In LeavesController.php
                    public function index()
                    {
                         $leaves = Leave::all();
                         return view("leaves.index",compact("leaves"));
                    }

               =In leaves > index.blade.php
                    <table id="mytable" class="table table-sm table-hover border">
     
                         <thead>
                              <th>No</th>
                              <th>Student Id</th>
                              <th>Class</th>
                              <th>Start Date</th>
                              <th>End Date</th>
                              <th>Tag</th>
                              <th>Stage</th>
                              <th>By</th>
                              <th>Created At</th>
                              <th>Updated At</th>
                              <th>Action</th>
                         </thead>
               
                         <tbody>
                              @foreach($leaves as $idx=>$leave)
                              <tr>
                                   <td>{{++$idx}}</td>
                                   <td><a href="{{ route('students.show',$leave->studenturl()) }}">{{ $leave->student($leave->user_id) }}</a></td>
                                   <td><a href="{{ route('posts.show',$leave->post_id) }}"> {{ $leave->post["title"] }}</a></td>
                                   <td>{{ $leave->startdate }}</td>
                                   <td>{{ $leave->enddate }}</td>
                                   <td>{{ $leave->tagperson["name"] }}</td>
                                   <td>{{ $leave->stage["name"] }}</td>
                                   <td>{{ $leave->user["name"] }}</td>
                                   <td>{{ $leave->created_at->format('d M Y') }}</td>
                                   <td>{{ $leave->updated_at->format('d M Y') }}</td>
                                   <td>
                                        <a href="{{ route('leaves.edit',$leave->id) }}" class="text-info"><i class="fas fa-pen"></i></a>
                                        <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                                   </td>
                                   <form id="formdelete-{{ $idx }}" class="" action="{{route('leaves.destroy',$leave->id)}}" method="POST">
                                        @csrf
                                        @method("DELETE")
                                   </form>
                              </tr>
                              @endforeach
                         </tbody>
               
                    </table>

               =In Leave.php

                    class Leave extends Model
                    {
                         use HasFactory;
                         protected $table = "leaves";
                         protected $primaryKey = "id";
                         protected $fillable = [
                              "post_id",
                              "startdate",
                              "enddate",
                              "tag",
                              "title",
                              "content",
                              "image",
                              "stage_id",
                              "authorize_id",
                              "user_id",
                         ];

                         public function user(){
                              return $this->belongsTo(User::class);
                         }

                         public function post(){
                              return $this->belongsTo(Post::class);
                         }

                         public function stage(){
                              return $this->belongsTo(Stage::class);
                         }

                         public function student($userid){
                              
                              $students = Student::where("user_id",$userid)->get()->pluck("regnumber");

                              foreach($students as $student){
                                   return $student;
                              }
                         }

                         public function studenturl(){
                              return Student::where("user_id",$this->user_id)->get(["students.id"])->first();
                         }

                         public function tagperson(){
                              return $this->belongsTo(User::class,"tag");
                         }
                    }

          =>Show leave
               =In LeavesController.php
                    public function show(string $id)
                    {
                         $leave = Leave::findOrFail($id);
                         
                         return view("leaves.show",["leave"=>$leave]);
                    }
               =In index.blade.php
                    <td>
                         <a href="{{ route('leaves.show',$leave->id) }}" class="text-primary"><i class="fas fa-book-reader"></i></a>
                         <a href="{{ route('leaves.edit',$leave->id) }}" class="text-info ms-2"><i class="fas fa-pen"></i></a>
                         <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                    </td>
               =In show.blade.php
                    <div class="col-md-4">
                         <h6>Info</h6>
                         <div class="card border-0 rounded-0 shadow">
                              <div class="card-body">
                                   <div class="d-flex flex-column align-items-center mb-3">
                                        <div class="h5 mb-1">{{ $leave->title }} </div>
                                        <div class="text-muted">
                                             <span>{{ $leave["stage"]["name"] }}</span>
                                        </div>
                                        <img src="{{ asset($leave->image) }}" class="" alt="{{$leave->title}}" width="200"/>
                                   </div>

                                   <div class="mb-5">
                                       

                                        <div class="row g-0 mb-2">
                                             <div class="col-auto">
                                                  <i class="fas fa-user"></i>
                                             </div>
                                             <div class="col ps-3">
                                                  <div class="row">
                                                       <div class="col">
                                                            <div class="">Authorize</div>
                                                       </div>
                                                       <div class="col-auto">
                                                            <div class="">{{ $leave["user"]["name"] }}</div>
                                                       </div>
                                                  </div>
                                             </div>
                                        </div>

                                        <div class="row g-0 mb-2">
                                             <div class="col-auto">
                                                  <i class="fas fa-calendar-alt fa-sm"></i>
                                             </div>
                                             <div class="col ps-3">
                                                  <div class="row">
                                                       <div class="col">
                                                            <div class="">Created</div>
                                                       </div>
                                                       <div class="col-auto">
                                                            <div class="">{{date('d M Y',strtotime($leave->created_at))}} | {{date('h:i:s A',strtotime($leave->created_at))}}</div>
                                                       </div>
                                                  </div>
                                             </div>
                                        </div>

                                        <div class="row g-0 mb-2">
                                             <div class="col-auto">
                                                  <i class="fas fa-edit fa-sm"></i>
                                             </div>
                                             <div class="col ps-3">
                                                  <div class="row">
                                                       <div class="col">
                                                            <div class="">Updated</div>
                                                       </div>
                                                       <div class="col-auto">
                                                            <div class="">{{date('d M Y h:i:s A',strtotime($leave->updated_at))}}</div>
                                                       </div>
                                                  </div>
                                             </div>
                                        </div>
                                   </div>


                                   <div class="mb-5">
                                        <p class="text-small text-muted text-uppercase mb-2">Contact Info</p>
                                        <div class="row g-0 mb-2">
                                             <div class="col-auto me-2">
                                                  <i class="fas fa-calender-alt"></i>
                                             </div>
                                             <div class="col">Sample Data</div>
                                        </div>
                                        <div class="row g-0 mb-2">
                                             <div class="col-auto me-2">
                                                  <i class="fas fa-calender-alt"></i>
                                             </div>
                                             <div class="col">Sample Data</div>
                                        </div>
                                        <div class="row g-0 mb-2">
                                             <div class="col-auto me-2">
                                                  <i class="fas fa-calender-alt"></i>
                                             </div>
                                             <div class="col">Sample Data</div>
                                        </div>
                                        <div class="row g-0 mb-2">
                                             <div class="col-auto me-2">
                                                  <i class="fas fa-calender-alt"></i>
                                             </div>
                                             <div class="col">Sample Data</div>
                                        </div>
                                   </div>
                              </div>
                         </div>
                    </div>

                    <div class="col-md-8">
                         

                         <h6>Additional Info</h6>
                         <div class="card border-0 rounded-0 shadow mb-4">
                              <ul class="nav">
                                   <li class="nav-item">
                                        <button type="button" id="autoclick" class="tablinks" onclick="gettab(event,'content')">Content</button>
                                   </li>
                              </ul>

                              <div class="tab-content">

                                   <div id="content" class="tab-pane">
                                        <p>{!! $leave->content !!}</p>
                                   </div>

                                   

                              </div>
                         </div>
                    </div>
               
          =>Auto Select Today
               =In LeavesController.php
                    public function create()
                    {    
                         $data["posts"] = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->pluck("title","id");
                         $data["tags"] = User::orderBy("name","asc")->get()->pluck("name","id");
                         $data["gettoday"] = Carbon::today()->format("Y-m-d"); // get today // "2024-02-26"
                         // dd($data["gettoday"]);
                         return view("leaves.create",$data);
                    }

                         *result (Carbon object)
                         Illuminate\Support\Carbon @1708882200 {#1459 ▼ // app\Http\Controllers\LeavesController.php:32
                         #endOfTime: false
                         #startOfTime: false
                         #constructedObjectId: "00000000000005b30000000000000000"
                         #localMonthsOverflow: null
                         #localYearsOverflow: null
                         #localStrictModeEnabled: null
                         #localHumanDiffOptions: null
                         #localToStringFormat: null
                         #localSerializer: null
                         #localMacros: null
                         #localGenericMacros: null
                         #localFormatFunction: null
                         #localTranslator: null
                         #dumpProperties: array:3 [▶]
                         #dumpLocale: null
                         #dumpDateProperties: null
                         date: 2024-02-26 00:00:00.0 Asia/Yangon (+06:30)
                         }

               =In leaves > create.blade.php
                    <div class="col-md-6 mb-3">
                         <label for="startdate">Start Date <span class="text-danger">*</span></label>
                         <input type="date" name="startdate" id="startdate" class="form-control form-control-sm rounded-0" value="{{ old('startdate',$gettoday) }}"/>
                    </div>

                    <div class="col-md-6 mb-3">
                         <label for="enddate">End Date <span class="text-danger">*</span></label>
                         <input type="date" name="enddate" id="enddate" class="form-control form-control-sm rounded-0" value="{{ old('enddate',$gettoday) }}"/>
                    </div>

                    *laravel send day with "Y-m-d" format. UI automatically change the date into "m/d/Y".
                    *old()
                         Even thought validation error occur, the form valules will be as user specified values, improving UX.
                         User's values will not be removed.
                    *old(user value, default value)
                         When there is no error, default value will be shown.


     =>API Switch to change on, off in UI
          =In TypesController.php
               public function typestatus(Request $request){
                    $type = Type::findOrFail($request["id"]);
                    $type->status_id = $request["status_id"];
                    $type->save();

                    return response()->json(["success"=>"Status Change Successfully"]);
               }
               *added method should write after the CRUD methods.
               *response() is for message to the client. In javascript it can be used in many ways. Alert respoonse text or other.

          php artisan route:list

          GET|HEAD        types types.index › TypesController@index  
          POST            types types.store › TypesController@store  
          GET|HEAD        types/create types.create › TypesControl…  
          GET|HEAD        types/{type} types.show › TypesControlle…  
          PUT|PATCH       types/{type} types.update › TypesControl…  
          DELETE          types/{type} types.destroy › TypesContro…  
          GET|HEAD        types/{type}/edit types.edit 

          *The added method is not inclusive.
          *Needed to register route for the method.

          =>In Web.php
               Route::resource("types",TypesController::class);
               Route::get("/typesstatus",[TypesController::class,"typestatus"]);

               php artisan route:list

               GET|HEAD        typesstatus .......................................................................... TypesController@typestatus

          =In types > index.blade.php
               <td>
                    <div class="form-checkbox form-switch">
                         <input type="checkbox" class="form-check-input change-btn" {{  $type->status_id === 3 ? 'checked' : '' }} data-id="{{ $type->id }}" />
                    </div>
               </td>
               ....
               //Start change-btn
               $(".change-btn").change(function(){
                    var getid = $(this).data("id");
                    // console.log(getid); // 1 2

                    var setstatus = $(this).prop("checked") === true ? 3 : 4;
                    // console.log(setstatus); // 3 4

                     $.ajax({
                         url:"typesstatus",
                         type:"GET",
                         dataType:"json",
                         data:{"id":getid,"status_id":setstatus},
                         success:function(response){
                              console.log(response); // {success: 'Status Change Successfully'}
                              console.log(response.success); // Status Change Successfully
                         }
                    });
               });
               // End change btn

               jQuery fullpackage is aleady connected.
               jQuery has lite file for only ajax request.

               ****Status is changed at database by server side code. 
               ****Even Though status change in UI(form switch) and database, status is not yet change in edit form. It will only change in next reload.

          =>Stage on/off
               =In StagesController.php
                    public function typestatus(Request $request){
                         $stage = Stage::findOrFail($request["id"]);
                         $stage->status_id = $request["status_id"];
                         $stage->save();

                         return response()->json(["success"=>"Stage Change Successfully"]);
                    }
               
               =In stages > index.blade.php
                    <td>
                         <div class="form-check form-switch">
                              <input type="checkbox" class="form-check-input change-btn" {{ $stage->status_id === 3 ? "checked" : "" }}  data-id="{{ $stage->id }}"/>
                         </div>
                    </td>
                    ....

                     //Start change-btn
                    $(".change-btn").change(function(){
                         var getid = $(this).data("id");
                         // console.log(getid); // 1 2

                         var setstatus = $(this).prop("checked") === true ? 3 : 4;
                         // console.log(setstatus); // 3 4

                         $.ajax({
                              url:"stagesstatus",
                              type:"GET",
                              dataType:"json",
                              data:{"id":getid,"status_id":setstatus},
                              success:function(response){
                                   console.log(response); // {success: 'Status Change Successfully'}
                                   console.log(response.success); // Status Change Successfully
                              }
                         });
                    });
                    // End change btn


     =>Notification Feature
          https://laravel.com
          Search Box > Notifications

          https://laravel.com/docs/10.x/notifications

          #Mail Notifications 
          #Database Notifications
          #Broadcast Notifications
          #SMS Notifications
          #Slack Notifications (Developer's platform)

          =>Tag Person Notification     
               -retrieve and display the relevant notifications of the tagged person

               #Database Notifications
               =>Step1: 
                    php artisan notifications:table
                    php artisan migrate

                    *need to run for the first time
                    
                    =>Notification migrations
                         public function up(): void
                         {
                              Schema::create('notifications', function (Blueprint $table) {
                                   $table->uuid('id')->primary();
                                   $table->string('type');
                                   $table->morphs('notifiable');
                                   $table->text('data');
                                   $table->timestamp('read_at')->nullable();
                                   $table->timestamps();
                              });
                         }
                    =>phpmyadmin
                         "notifications"
                         id	type	notifiable_type	notifiable_id	data	read_at	created_at	updated_at	

               =>Setp 2
                    #Generating Notifications
                         php artisan make:notification LeaveNotify

                    app\Notifications\LeaveNotify.php

                    =>Original LeaveNotify.php
                         <?php

                         namespace App\Notifications;

                         use Illuminate\Bus\Queueable;
                         use Illuminate\Contracts\Queue\ShouldQueue;
                         use Illuminate\Notifications\Messages\MailMessage;
                         use Illuminate\Notifications\Notification;

                         class LeaveNotify extends Notification
                         {
                         use Queueable;

                         /**
                              * Create a new notification instance.
                              */
                         public function __construct()
                         {
                              //
                         }

                         /**
                              * Get the notification's delivery channels.
                              *
                              * @return array<int, string>
                              */
                         public function via(object $notifiable): array
                         {
                              return ['mail'];
                         }

                         /**
                              * Get the mail representation of the notification.
                              */
                         public function toMail(object $notifiable): MailMessage
                         {
                              return (new MailMessage)
                                             ->line('The introduction to the notification.')
                                             ->action('Notification Action', url('/'))
                                             ->line('Thank you for using our application!');
                         }

                         /**
                              * Get the array representation of the notification.
                              *
                              * @return array<string, mixed>
                              */
                         public function toArray(object $notifiable): array
                         {
                              return [
                                   //
                              ];
                         }
                         }


                         *__construct() for setting notification contents or data
                         *via() for setting deliver channel
                         *toMail() for email notification
                         *toArray for formatting notification as an array
                    
                         #Specifying Delivery Channels 
                              mail, database, broadcast, vonage, and slack channels.

                              =In LeaveNotify.php
                                   public function via(object $notifiable): array
                                   {
                                        return ['database'];
                                   }
               
               =>Step 3
                    #Sending Notifications
                         #Using the Notification Facade
                              Notification::send($users, new InvoicePaid($invoice));

                    *sending the specific noti to the targets users 

                    =In LeavesController.php
                         public function store(LeaveRequest $request)
                         {
                             ....
                              $leave->save();
                              
                              session()->flash("success","New Leave Created");

                              Notification::send($user,new LeaveNotify($leave->id,$leave->title));

                              return redirect(route("leaves.index"));
                         }

                         *use Illuminate\Support\Facades\Notification;
                         *use App\Notifications\LeaveNotify;

                    =>Self Notification
                         =create a leave
                         
                         "notifications"
                         id	                    type	                              notifiable_type     notifiable_id	data	                              read_at	created_at	updated_at	
                         cb1358d5-8829-4b64       App\Notifications\LeaveNotify      App\Models\User     1              {"id":4,"title":"I am very sick"}  NULL
                         -8317-026544ec9231

                         *because Auth::user is me.

                    =>All user notifications 
                         =In LeavesController.php
                         public function store(LeaveRequest $request)
                         {
                             ....
                              $leave->save();
                              
                              session()->flash("success","New Leave Created");

                              $users = User::all();
                              Notification::send($users,new LeaveNotify($leave->id,$leave->title));
                              return redirect(route("leaves.index"));
                         }

                         "notifications"
                              id	                    type	                              notifiable_type     notifiable_id	data	                              read_at	created_at	updated_at	
                              dee29ded-b963-4c26       App\Notifications\LeaveNotify      App\Models\User     1              {"id":4,"title":"I am very tired"}  NULL
                              -8b41-cb129722fe38
                              dee29ded-b963-4c26       App\Notifications\LeaveNotify      App\Models\User     20              {"id":4,"title":"I am very tired"}  NULL
                              -8b41-cb129722fe38
                              dee29ded-b963-4c26       App\Notifications\LeaveNotify      App\Models\User     30              {"id":4,"title":"I am very tired"}  NULL
                              -8b41-cb129722fe38
                              dee29ded-b963-4c26       App\Notifications\LeaveNotify      App\Models\User     40              {"id":4,"title":"I am very tired"}  NULL
                              -8b41-cb129722fe38

                              cb1358d5-8829-4b64       App\Notifications\LeaveNotify      App\Models\User     1              {"id":4,"title":"I am very sick"}  NULL
                              -8317-026544ec9231

                              *connect "users" table with the notifiable_type, notifiable_id
                              *read_at null because it is not read yet.

                    =>Tagged User Notification
                         =In LeavesController.php
                              public function store(LeaveRequest $request)
                              {
                              ....
                                   $leave->save();
                                   
                                   session()->flash("success","New Leave Created");

                                   // $users = User::all();
                                   $tagperson = $leave->tagperson()->get();
                                   // dd($tagperson);

                                   Notification::send($tagperson,new LeaveNotify($leave->id,$leave->title));
                                   return redirect(route("leaves.index"));
                              }

                         *result($tagperson)

                              Illuminate\Database\Eloquent\Collection {#1467 ▼ // app\Http\Controllers\LeavesController.php:78
                              #items: array:1 [▼
                              0 => App\Models\User {#1466 ▼
                                   #connection: "mysql"
                                   #table: "users"
                                   #primaryKey: "id"
                                   #keyType: "int"
                                   +incrementing: true
                                   ....
                                   #attributes: array:8 [▶]
                                   #original: array:8 [▼
                                   "id" => 1
                                   "name" => "admin"
                                   "email" => "admin@gmail.com"
                                   "email_verified_at" => null
                                   "password" => "$2y$12$xffXPm7kidQvS4CgU8LThuAgkEb5otckKTMpVJtuDmrwFsmVApqh6"
                                   "remember_token" => "lIABpazPUorBPwSax8FUafdsSgK8QeJRVblsC5uNtDK9gNfqQtHzTqVGyRkm"
                                   "created_at" => "2023-12-12 07:27:33"
                                   "updated_at" => "2023-12-12 07:53:59"
                                   ]
                                   ....
                              }
                              ]
                              #escapeWhenCastingToString: false
                              }

                         *error 
                              App\Notifications\LeaveNotify::via(): Argument #1 ($notifiable) must be of type object, int given, called in
                              -if object is not passed ant other data type are given


               =>Step 4
                    #Accessing the Notifications

                    =In adminnavbar.blade.php
                         <!-- notify -->
                         <li class="nav-item dropdowns me-3">
                         <a href="javascript:void(0);" class="nav-link dropbtn" onclick="dropbtn(event)">
                              <i class="fas fa-bell"></i>
                              {{-- <span class="badge bg-danger">{{ $userdata->unreadNotifications->count() }}</span> --}}
                              <span class="badge bg-danger">{{ auth()->user()->unreadNotifications->count() }}</span>
                         </a>

                         <div class="dropdown-contents mydropdowns">
                              <a href="javascript:void(0);" class="small text-muted text-center">Mark all as read</a>
                              
                              @foreach($userdata->unreadNotifications as $notification)
                              <a href="javascript:void(0);" class="d-flex">
                                   <div class="me-3">
                                        <i class="fas fa-bell fa-xs text-primary"></i>
                                   </div>
                                   <div class="small">
                                        <ul class="list-unstyled">
                                             <li>{{ Str::limit($notification->data["title"],20) }}</li>
                                             <li>{{ $notification->created_at->format("d M Y h:i:s A") }}</li>
                                        </ul>
                                        
                                   </div>
                              </a>
                              @endforeach
                              

                              <a href="javascript:void(0);" class="small text-muted text-center">Show All Notification</a>
                         </div>
                         </li>
                         <!-- notify -->

                    =>Test with other users
                         =login in aung aung acc

                         =View notification 1 (from admin)
                         =create a leave
                         =View notification 2 (from admin and me)

                         *result
                              I want to take a lea...
                              26 Feb 2024 06:11:41 PM

                              I am very tired.
                              26 Feb 2024 04:55:46 PM

                         *last notification on the top

                         -----------------------------------

                         =login in admin acc
                         =View notification 3 (from aung aung and me) 1 + 2

          =>Notification link
               =In adminnavbar.php
                     @foreach($userdata->unreadNotifications as $notification)
                         <a href="{{ route('leaves.show',$notification->data['id']) }}" class="d-flex">
                              <div class="me-3">
                                   <i class="fas fa-bell fa-xs text-primary"></i>
                              </div>
                              <div class="small">
                                   <ul class="list-unstyled">
                                        <li>{{ Str::limit($notification->data["title"],20) }}</li>
                                        <li>{{ $notification->created_at->format("d M Y h:i:s A") }}</li>
                                   </ul>
                                   
                              </div>
                         </a>
                    @endforeach

                    -reach to the notification related leave.

          =>Notification with studentid 
               =In LeavesController.php
                    public function store(LeaveRequest $request)
                    {
                    ....
                         $leave->save();
                         
                         session()->flash("success","New Leave Created");

                         // $users = User::all();
                         $tagperson = $leave->tagperson()->get();
                         // dd($tagperson);

                         $studentid = $leave->student($user_id);

                         Notification::send($tagperson,new LeaveNotify($leave->id,$leave->title,$studentid));
                         return redirect(route("leaves.index"));
                    }
               
               =In LeaveNotify.php
                    public $tbid;
                    public $title;
                    public $studentid;
                    

                    public function __construct($id,$title,$studentid)
                    {
                         $this->tbid = $id;
                         $this->title = $title;
                         $this->studentid = $studentid;
                    }
                    ...
                    public function toArray(object $notifiable): array
                    {
                         return [
                              "id"=>$this->tbid,
                              "title"=>$this->title,
                              "studentid"=>$this->studentid
                         ];
                    }
               =In adminnavbar.php
                    @foreach($userdata->unreadNotifications as $notification)
                    <a href="{{ route('leaves.show',$notification->data['id']) }}" class="d-flex">
                         <div class="me-3">
                              <i class="fas fa-bell fa-xs text-primary"></i>
                         </div>
                         <div class="small">
                              <ul class="list-unstyled">
                                   <li>{{ $notification->data["studentid"] }}</li>
                                   <li>{{ Str::limit($notification->data["title"],20) }}</li>
                                   <li>{{ $notification->created_at->format("d M Y h:i:s A") }}</li>
                              </ul>
                              
                         </div>
                    </a>
                    @endforeach

               firstly, we got err
               *error (Undefined array key "studentid")
                    -because previous row do not have studentid info.
               *solution 
                    Truncate the notification table.

          =>#Using the Notifiable Trait
               Notifications may be sent in two ways: 
                    using the notify method of the Notifiable trait or 
                    using the Notification facade. 
               The Notifiable trait is included on your application's App\Models\User model by default:

               =In Leave.php
                    use Illuminate\Notifications\Notifiable;

                    class Leave extends Model
                    {
                         use HasFactory;
                         use Notifiable;
                         ....
                    }

          =>Reading Notification
               =In LeavesController.php
                    public function show(string $id)
                    {
                         $leave = Leave::findOrFail($id);
                         $getnoti = \DB::table("notifications")->where('data->id',$id)->pluck("id"); 
                         // dd($getnoti);
                         \DB::table("notifications")->where('id',$getnoti)->update(["read_at"=>now()]);
                         
                         return view("leaves.show",["leave"=>$leave]);
                    }

               *error
               Call to undefined method Illuminate\Notifications\Channels\MailChannel::where()
               $getnoti = \Notification::where('data->id',$id)->pluck("id"); 

               because Notification is not a regular model.
               
               *result ($getnoti)
                    Illuminate\Support\Collection {#1456 ▼ // app\Http\Controllers\LeavesController.php:90
                    #items: array:1 [▼
                    0 => "2a13bcb8-3be2-470e-88d4-47a25a6d8898"
                    ]
                    #escapeWhenCastingToString: false
                    }
               *indierctly get the Notification id and update it.

               "notifications"
                    id	                    type	                              notifiable_type     notifiable_id	data	                                                       read_at	          created_at	updated_at	
                    2a13bcb8-3be2-470e      App\Notifications\LeaveNotify      App\Models\User     1               {"id":9,"title":"I am very sick","studentid":"WDF1002"}     2024-02-28 16:50:44
                    -88d4-47a25a6d8898 

               ----
               *inspect query result (further study)
                    array:1 [▼ // app\Http\Controllers\LeavesController.php:92
                    0 => array:3 [▼
                    "query" => "select * from `notifications` where json_unquote(json_extract(`data`, '$."id"')) = ?"
                    "bindings" => array:1 [▶]
                    "time" => 46.63
                    ]
                    ]

               *mysql & json
                    mysql> SELECT event_id, browser_name->'$.name' AS browser FROM events;  

          =Mark as read
               #Marking Notifications as Read

               =In web.php
                    Route::resource("leaves",LeavesController::class);
                    Route::get("leaves/markasread",[LeavesController::class,"markasread"])->name('leaves.markasread');


               php artisan route:list
               
               *result
               GET|HEAD        leaves .................................................................... leaves.index › LeavesController@index  
               POST            leaves .................................................................... leaves.store › LeavesController@store  
               GET|HEAD        leaves/create ........................................................... leaves.create › LeavesController@create  
               GET|HEAD        leaves/markasread ............................................... leaves.markasread › LeavesController@markasread  
               GET|HEAD        leaves/{leaf} ............................................................... leaves.show › LeavesController@show  
               PUT|PATCH       leaves/{leaf} ........................................................... leaves.update › LeavesController@update  
               DELETE          leaves/{leaf} ......................................................... leaves.destroy › LeavesController@destroy  
               GET|HEAD        leaves/{leaf}/edit .......................................................... leaves.edit › LeavesController@edit  
                              
               =In LeavesController.php
                    public function markasread(){
                         dd("oki");
                    }

               =In adminnavbar.php
                     <div class="dropdown-contents mydropdowns">
                         <a href="{{ route('leaves.markasread') }}" class="small text-muted text-center">Mark all as read</a>
                         
                         @foreach($userdata->unreadNotifications as $notification)
               
               *error (404 | NOT FOUND)
               because of server architecture (route dividing technique)
               1 parameter 
                    GET leaves - index
                    POST leaves 
               2 parameter
                    GET leaves/create - create
               2 parameter - route parameter
                    leaves.show 
                    leaves.update
                    leaves.destroy

               --------------------------------------------------------------------------------------------------
               =In web.php
                    Route::resource("leaves",LeavesController::class);
                    Route::get("notify/markasread",[LeavesController::class,"markasread"])->name('leaves.markasread');

               php artisan route:list
               GET|HEAD        notify/markasread ............................................... leaves.markasread › LeavesController@markasread 
     
               =>Mark as read vs Delete Notification
                    =In LeavesController.php
                         public function markasread(){
                              $user = Auth::user();
                              $user_id = $user->id;

                              // $user->unreadNotifications->markAsRead();
                              // $user->notifications()->delete(); // all delete (r/un)

                              // $user = User::findOrFail($user_id);
                              $user = User::findOrFail(auth()->user()->id);
                              foreach ($user->unreadNotifications as $notification) {
                                   // $notification->markAsRead();

                                   $notification->delete(); // all delete (un)
                              }

                              return redirect()->back();
                         }
                    *if mark as read, notifications still remain in database table, it only update the time it was read.
                    *only delete the current authenticated notifications

                    =>Preventing DDoS Attack 
                         -come from bot (script)
                         -continuous click 
                         
                         =In adminnavbar.blade.php
                              @if($userdata->unreadNotifications->count() > 0)
                                   <a href="{{ route('leaves.markasread') }}" class="small text-muted text-center">Mark all as read</a>
                              
                                   @foreach($userdata->unreadNotifications as $notification)
                                   <a href="{{ route('leaves.show',$notification->data['id']) }}" class="d-flex">
                                        <div class="me-3">
                                             <i class="fas fa-bell fa-xs text-primary"></i>
                                        </div>
                                        <div class="small">
                                             <ul class="list-unstyled">
                                                  <li>{{ $notification->data["studentid"] }}</li>
                                                  <li>{{ Str::limit($notification->data["title"],20) }}</li>
                                                  <li>{{ $notification->created_at->format("d M Y h:i:s A") }}</li>
                                             </ul>
                                             
                                        </div>
                                   </a>
                                   @endforeach
                                   
                                   <a href="javascript:void(0);" class="small text-muted text-center">Show All Notification</a>
                              @else
                                   <a href="javascript:void(0);" class="small text-muted text-center">No New Notification</a>
                              @endif 

                         *user can mark as read or delete notification only if their notification exists 

          =>Multiple Notifications 
               =>Announcement

                    php artisan make:model Announcement -m

                    =>Migration 
                         =In create_announcements_table.php
                              $table->string("image")->nullable();
                              $table->string("title");
                              $table->longText("content");
                              $table->unsignedBigInteger("post_id")->nullable();
                              $table->unsignedBigInteger("user_id");
                    
                    php artisan migrate:status 
                    php artisan migrate


                    php artisan make:controller AnnouncementsController
     
                    =In AnnouncementsController.php
                         class AnnouncementsController extends Controller
                         {
                              public function index()
                              {
                                   $announcements = Announcement::all();
                                   return view("announcements.index",compact("announcements"));
                              }

                              public function create()
                              {    
                                   $posts = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->get()->pluck("title","id");

                                   return view("announcements.create",compact("posts"));
                              }


                              public function store(Request $request)
                              {
                                   $this->validate($request,[
                                        "image" => "image|mimes:jpg,jpeg,png|max:1024",
                                        "title" => "required|max:50",
                                        "content" => "required",  
                                   ]);

                                   $user = Auth::user();
                                   $user_id = $user->id;

                                   $announcement = new Announcement();
                                   $announcement->title = $request["title"];
                                   $announcement->post_id = $request["post_id"];
                                   $announcement->content = $request["content"];
                                   $announcement->user_id = $user_id;

                                   // Single Image Upload
                                   if(file_exists($request["image"])){
                                        $file = $request["image"];
                                        $fname = $file->getClientOriginalName();
                                        $imagenewname = uniqid($user_id).$announcement['id'].$fname;
                                        // $file->move(public_path("announcements/img"),$imagenewname);
                                        $file->move(public_path("assets/img/announcements"),$imagenewname);
                                        
                                        $filepath = "assets/img/announcements/".$imagenewname;
                                        $announcement->image = $filepath;
                                   }    
                                   $announcement->save();

                                   // $users = User::where("id","!=",$user_id)->get();
                                   $users = User::where("id","!=",auth()->user()->id)->get();
                                   // Notification::send($users,new AnnouncementNotify($announcement->id,$announcement->title,$announcement->image));
                                   // $users->notify(new AnnouncementNotify($announcement->id,$announcement->title,$announcement->image));
                                   session()->flash("success","Create Successfully");

                                   return redirect(route("announcements.index"));
                              }

                              public function show(string $id)
                              {
                                   $announcement = Announcement::findOrFail($id);
                                   $comments = $announcement->comments()->orderBy("updated_at","desc")->get();
                                   return view("announcements.show",["announcement"=>$announcement,"comments"=>$comments]);
                              }


                              public function edit(string $id)
                              {

                                   $announcement = Announcement::findOrFail($id);
                                   $posts = \DB::table("posts")->where("attshow",3)->orderBy("title","asc")->get()->pluck("title","id");

                                   return view("announcements.edit")->with("announcement",$announcement)->with("posts",$posts);
                              }

                              public function update(Request $request, string $id)
                              {
                                   $this->validate($request,[
                                        "image" => "image|mimes:jpg,jpeg,png|max:1024",
                                        "title" => "required|max:100",
                                        "content" => "required",
                                   ]);

                                   $user = Auth::user();
                                   $user_id = $user["id"];

                                   $announcement = Announcement::findOrFail($id);
                                   $announcement->title = $request["title"];
                                   $announcement->post_id = $request["post_id"];
                                   $announcement->content = $request["content"];
                                   $announcement->user_id = $user_id;


                                   // Remove Old Image
                                   if($request->hasFile("image")){
                                        $path = $announcement->image;

                                        if(File::exists($path)){
                                             File::delete($path);
                                        }
                                   }

                                   // Single Image Update
                                   if($request->hasFile("image")){
                                        $file = $request->file("image");
                                        $fname = $file->getClientOriginalName();
                                        $imagenewname = uniqid($user_id).$announcement['id'].$fname;
                                        $file->move(public_path("assets/img/announcements"),$imagenewname);
                                        
                                        $filepath = "assets/img/announcements/".$imagenewname;
                                        $announcement->image = $filepath;
                                   }    

                                   $announcement->save();
                                   session()->flash("success","Update Successfully");

                                   return redirect(route("announcements.index"));
                              }


                              public function destroy(string $id)
                              {
                                   $announcement = Announcement::findOrFail($id);
                                   
                                   // Remove Old Image
                                   $path = $announcement->image;
                                   if(File::exists($path)){
                                        File::delete($path);
                                   }
                                   
                                   $announcement->delete();

                                   session()->flash("info","Delete Successfully");
                                   return redirect()->back();
                              }
                         }

                    =In announcements > create.blade.php
                         <form action="/announcements" method="POST" enctype="multipart/form-data">
                              @csrf

                              <div class="row">

                                   <div class="col-md-4">

                                        <div class="row">
                                             <div class="col-md-12 mb-3">
                                                  <label for="image" class="gallery"><span>Choose Images</span></label>
                                                  <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ old('image')}}" hidden/>
                                                  @error("image")
                                                       <span class="text-danger">{{ $message }}<span>
                                                  @enderror
                                             </div>

                                        </div>
                                        
                                   </div>

                                   <div class="col-md-8">
                                        <div class="row">
                                             

                                             <div class="col-md-6 mb-3">
                                                  <label for="title">Title <span class="text-danger">*</span></label>
                                                  <input type="text" name="title" id="title" class="form-control form-control-sm rounded-0" placeholder="Enter Title" value="{{ old('title') }}"/>
                                                  @error("title")
                                                       <span class="text-danger">{{ $message }}<span>
                                                  @enderror
                                             </div>

                                             <div class="col-md-6 mb-3">
                                                  <label for="post_id">Class <span class="text-danger">*</span></label>
                                                  <select name="post_id" id="post_id" class="form-control form-control-sm rounded-0">
                                                       <option value="" selected disabled>Choose Class</option>
                                                       @foreach($posts as $id=>$title)
                                                            <option value="{{$id}}">{{ $title }}</option>
                                                       @endforeach
                                                  </select>
                                                  @error("tag_id")
                                                       <span class="text-danger">{{ $message }}<span>
                                                  @enderror
                                             </div>     

                                             <div class="col-md-12 mb-3">
                                                  <label for="content">Content <span class="text-danger">*</span></label>
                                                  <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{ old('content') }}</textarea>
                                                  @error("content")
                                                       <span class="text-danger">{{ $message }}<span>
                                                  @enderror
                                             </div>

                                             <div class="col-md-12 d-flex justify-content-end align-items-end">
                                                  <div class="">
                                                       <a href="{{route('announcements.index')}}" class="btn btn-secondary btn-sm rounded-0 me-3">Cancel</a>
                                                       <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                  </div>
                                             </div>
                                        </div>
                                   </div>

                                   
                              </div>
                         </form>

                    =In announcements > index.blade.php
                         <table id="mytable" class="table table-sm table-hover border">
          
                              <thead>
                                   <th>No</th>
                                   <th>Title</th>
                                   <th>Class</th>
                                   <th>By</th>
                                   <th>Created At</th>
                                   <th>Updated At</th>
                                   <th>Action</th>
                              </thead>
                    
                              <tbody>
                                   @foreach($announcements as $idx=>$announcement)
                                   <tr>
                                        <td>{{++$idx}}</td>
                                        <td><img src="{{ asset($announcement->image) }}" class="rounded-circle" alt="{{$announcement->title}}" width="20" height="20"/> <a href="{{route('announcements.show',$announcement->id)}}">{{ Str::limit($announcement->title,20) }}</a></td>
                                        <td><a href="{{ route('posts.show',$announcement->post_id) }}">{{ $announcement->post["title"] }}</a></td>
                                        <td>{{ $announcement->user["name"] }}</td>
                                        <td>{{ $announcement->created_at->format('d M Y') }}</td>
                                        <td>{{ $announcement->updated_at->format('d M Y') }}</td>
                                        <td>
                                             <a href="{{ route('announcements.edit',$announcement->id) }}" class="text-info"><i class="fas fa-pen"></i></a>
                                             <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                                        </td>
                                        <form id="formdelete-{{ $idx }}" class="" action="{{route('announcements.destroy',$announcement->id)}}" method="POST">
                                             @csrf
                                             @method("DELETE")
                                        </form>
                                   </tr>
                                   @endforeach
                              </tbody>
                         </table>

                    =In announcements > edit.blade.php
                         <form action="/announcements/{{$announcement->id}}" method="POST" enctype="multipart/form-data">
                              @csrf
                              @method("PUT")

                              <div class="row">

                                   <div class="col-md-4">

                                        <div class="row">
                                             <div class="col-md-12 mb-3">

                                                  <div class="row">
                                                       <div class="col-md-6 text-sm-center">
                                                            <img src="{{asset($announcement->image)}}" width="200" alt="{{$announcement->title}}"/>
                                                       </div>
                                                       <div class="col-md-6">
                                                            <label for="image" class="gallery"><span>Choose Images</span></label>
                                                            <input type="file" name="image" id="image" class="form-control form-control-sm rounded-0" value="{{ $announcement->image }}" hidden/>
                                                       </div>
                                                  </div>
                                             </div>

                                        </div>
                                        
                                   </div>

                                   <div class="col-md-8">
                                        <div class="row">
                                             
                                             <div class="col-md-6 mb-3">
                                                  <label for="title">Title <span class="text-danger">*</span></label>
                                                  <input type="text" name="title" id="title" class="form-control form-control-sm rounded-0" placeholder="Enter Post Title" value="{{ $announcement->title }}"/>
                                             </div>

                                             <div class="col-md-6">
                                                  <label for="post_id">Class <span class="text-danger">*</span></label>
                                                  <select name="post_id" id="post_id" class="form-control form-control-sm rounded-0">
                                                       @foreach($posts as $id=>$title)
                                                            <option value="{{$id}}"
                                                                 @if($id === $announcement["post_id"])
                                                                      selected
                                                                 @endif
                                                            >{{ $title }}</option>
                                                       @endforeach
                                                  </select>
                                             </div>

                                             <div class="col-md-12 mb-3">
                                                  <label for="content">Content <span class="text-danger">*</span></label>
                                                  <textarea name="content" id="content" class="form-control form-control-sm rounded-0" rows="5" placeholder="Say Something....">{{$announcement->content}}</textarea>
                                             </div>

                                             

                                        
                                             <div class="col-md-12 d-flex justify-content-end align-items-end">
                                                  <div class="">
                                                       <a href="{{route('announcements.index')}}" class="btn btn-secondary btn-sm rounded-0 me-3">Cancel</a>
                                                       <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                  </div>
                                             </div>
                                        </div>
                                   </div>

                                   
                              </div>
                         </form>

                    =In announcements > show.blade.php
                         <div class="row">
               
                              <div class="col-md-4">
                                   <h6>Info</h6>
                                   <div class="card border-0 rounded-0 shadow">
                                        <div class="card-body">
                                             <div class="d-flex flex-column align-items-center mb-3">
                                                  <div class="h5 mb-1">{{ $announcement->title }} </div>
                                                  <div class="text-muted">
                                                       <span>{{ $announcement->post["title"] }}</span>
                                                  </div>
                                                  <img src="{{ asset($announcement->image) }}" class="" alt="{{$announcement->title}}" width="200"/>
                                             </div>

                                             <div class="w-100 d-flex flex-row justify-content-between mb-3">
                                                       <a href="#createmodal" class="w-100 btn btn-primary btn-sm rounded-0 me-2" data-bs-toggle="modal">Enroll</a>
                                                       <button type="button" class="w-100 btn btn-outline-primary btn-sm rounded-0">Follow</button>
                                             </div>

                                             <div class="mb-5">
                                        
                                                  <div class="row g-0 mb-2">
                                                       <div class="col-auto">
                                                            <i class="fas fa-user"></i>
                                                       </div>
                                                       <div class="col ps-3">
                                                            <div class="row">
                                                                 <div class="col">
                                                                      <div class="">By</div>
                                                                 </div>
                                                                 <div class="col-auto">
                                                                      <div class="">{{ $announcement["user"]["name"] }}</div>
                                                                 </div>
                                                            </div>
                                                       </div>
                                                  </div>

                                                  <div class="row g-0 mb-2">
                                                       <div class="col-auto">
                                                            <i class="fas fa-calendar-alt fa-sm"></i>
                                                       </div>
                                                       <div class="col ps-3">
                                                            <div class="row">
                                                                 <div class="col">
                                                                      <div class="">Created</div>
                                                                 </div>
                                                                 <div class="col-auto">
                                                                      <div class="">{{date('d M Y',strtotime($announcement->created_at))}} | {{date('h:i:s A',strtotime($announcement->created_at))}}</div>
                                                                 </div>
                                                            </div>
                                                       </div>
                                                  </div>

                                                  <div class="row g-0 mb-2">
                                                       <div class="col-auto">
                                                            <i class="fas fa-edit fa-sm"></i>
                                                       </div>
                                                       <div class="col ps-3">
                                                            <div class="row">
                                                                 <div class="col">
                                                                      <div class="">Updated</div>
                                                                 </div>
                                                                 <div class="col-auto">
                                                                      <div class="">{{date('d M Y h:i:s A',strtotime($announcement->updated_at))}}</div>
                                                                 </div>
                                                            </div>
                                                       </div>
                                                  </div>
                                             </div>

                                             <div class="mb-5">
                                                  <p class="text-small text-muted text-uppercase mb-2">Contact Info</p>
                                                  <div class="row g-0 mb-2">
                                                       <div class="col-auto me-2">
                                                            <i class="fas fa-calender-alt"></i>
                                                       </div>
                                                       <div class="col">Sample Data</div>
                                                  </div>
                                                  <div class="row g-0 mb-2">
                                                       <div class="col-auto me-2">
                                                            <i class="fas fa-calender-alt"></i>
                                                       </div>
                                                       <div class="col">Sample Data</div>
                                                  </div>
                                                  <div class="row g-0 mb-2">
                                                       <div class="col-auto me-2">
                                                            <i class="fas fa-calender-alt"></i>
                                                       </div>
                                                       <div class="col">Sample Data</div>
                                                  </div>
                                                  <div class="row g-0 mb-2">
                                                       <div class="col-auto me-2">
                                                            <i class="fas fa-calender-alt"></i>
                                                       </div>
                                                       <div class="col">Sample Data</div>
                                                  </div>
                                             </div>
                                        </div>
                                   </div>
                              </div>

                              <div class="col-md-8">
                                   <h6>Comments</h6>
                                   <div class="card border-0 rounded-0 shadow mb-4">
                                        <div class="card-body d-flex flex-wrap gap-3">
                                             
                                             <div class="col-md-12">
                                                  <div class="card rounded-0">
                                                       <div class="card-body">
                                                            <ul class="list-group chat-boxs">
                                                                 @foreach($comments as $comment)
                                                                      <li class="list-group-item mt-2">
                                                                           <div>
                                                                                <p>{{$comment->description}}</p>
                                                                           </div>
                                                                           <div>
                                                                                <span class="small fw-bold  float-end">{{$comment->user["name"] }} | {{$comment->created_at->diffForHumans()}}</span>
                                                                                
                                                                           </div>
                                                                           
                                                                      </li>
                                                                 @endforeach
                                                            </ul>
                                                       </div>
                                                       <div class="card-body border-top">
                                                            <form action="{{route('comments.store')}}" method="POST">
                                                                 @csrf
                                                                 <div class="col-md-12 d-flex justify-between">
                                                                      <textarea name="description" id="description"  class="form-control border-0 rounded-0" rows="1" style="resize:none;" placeholder="Comment here...."></textarea>
                                                                      <button type="submit" class="btn btn-info btn-sm text-light ms-3"><i class="fas fa-paper-plane"></i></button>
                                                                 </div>

                                                                 <!-- Start Hidden Fields -->
                                                                 <input type="hidden" name="commentable_id" id="commentable_id" value="{{$announcement->id}}" />
                                                                 <input type="hidden" name="commentable_type" id="commentable_type" value="App\Models\Announcement" />
                                                                 <!-- Start Hidden Fields -->

                                                            </form>
                                                       </div>
                                                  </div>    
                                             </div>
                                        </div>
                                   </div>

                                   <h6>Additional Info</h6>
                                   <div class="card border-0 rounded-0 shadow mb-4">
                                        <ul class="nav">
                                             <li class="nav-item">
                                                  <button type="button" id="autoclick" class="tablinks" onclick="gettab(event,'content')">Follower</button>
                                             </li>
                                        </ul>

                                        <div class="tab-content">

                                             <div id="content" class="tab-pane">
                                                  <p>{!! $announcement->content !!}</p>
                                             </div>

                                        </div>
                                   </div>
                              </div>
                         </div>
                    
                    =In Announcement.php
                         <?php

                         namespace App\Models;

                         use Illuminate\Database\Eloquent\Factories\HasFactory;
                         use Illuminate\Database\Eloquent\Model;
                         use Illuminate\Notifications\Notifiable;
                         class Announcement extends Model
                         {
                         use HasFactory,Notifiable;
                         
                         protected $table = "announcements";
                         protected $primaryKey = "id";
                         protected $fillable = [
                              "image",
                              "title",
                              "content",
                              "post_id",
                              "user_id"
                         ];

                         public function post(){
                              return $this->belongsTo(Post::class);
                         }

                         public function user(){
                              return $this->belongsTo(User::class);
                         }

                         public function comments(){
                              return $this->morphMany(Comment::class,"commentable");
                         }

                         }

               =>Announcement Notification 
                    php artisan make:notification AnnouncementNotify

                    =In AnnouncementNotify.php
                         <?php

                         namespace App\Notifications;

                         use Illuminate\Bus\Queueable;
                         use Illuminate\Contracts\Queue\ShouldQueue;
                         use Illuminate\Notifications\Messages\MailMessage;
                         use Illuminate\Notifications\Notification;

                         class AnnouncementNotify extends Notification
                         {
                         use Queueable;

                         protected $tbid;
                         protected $title;
                         protected $img;
                         public function __construct($id,$title,$img)
                         {
                              $this->tbid = $id;
                              $this->title = $title;
                              $this->img = $img;
                         }

                         public function via(object $notifiable): array
                         {
                              return ['database'];
                         }

                         public function toArray(object $notifiable): array
                         {
                              return [
                                   "id" => $this->tbid,
                                   "title" => $this->title,
                                   "img" => $this->img
                              ];
                         }
                         }

                    *error (Undefined array key "studentid")
                    -because Announcement Notification do not contain studentid info.
                    and Leave Notification do not contain image info.
                    -error at the side of admin not the person who create announcement.

                    =In adminnavbar.blade.php
                              <!-- notify -->
                              <li class="nav-item dropdowns me-3">
                                   <a href="javascript:void(0);" class="nav-link dropbtn" onclick="dropbtn(event)">
                                        <i class="fas fa-bell"></i>
                                        {{-- <span class="badge bg-danger">{{ $userdata->unreadNotifications->count() }}</span> --}}
                                        <span class="badge bg-danger">{{ auth()->user()->unreadNotifications->count() }}</span>
                                   </a>

                                   <div class="dropdown-contents mydropdowns">
                                   
                                        @if($userdata->unreadNotifications->count() > 0)
                                             <a href="{{ route('leaves.markasread') }}" class="small text-muted text-center">Mark all as read</a>
                                        
                                             @foreach($userdata->unreadNotifications as $notification)
                                             <a href="{{ route('leaves.show',$notification->data['id']) }}" class="d-flex">
                                                  <div class="me-3">
                                                       @if($notification->type === "App\Notifications\AnnouncementNotify")
                                                       <img src="{{ $notification->data['img'] }}" class="rounded-circle" width="30" alt="{{ $notification->data['id'] }}">
                                                       @else
                                                       <i class="fas fa-bell fa-xs text-primary"></i>
                                                       @endif
                                                  </div>
                                                  <div class="small">
                                                       <ul class="list-unstyled">
                                                       @if($notification->type == "App\Notifications\AnnouncementNotify")
                                                            <li>{{ Str::limit($notification->data["title"],20) }}</li>
                                                            <li>{{ $notification->created_at->format("d M Y h:i:s A") }}</li>
                                                       @else
                                                            <li>{{ $notification->data["studentid"] }}</li>
                                                            <li>{{ Str::limit($notification->data["title"],20) }}</li>
                                                            <li>{{ $notification->created_at->format("d M Y h:i:s A") }}</li>
                                                       </ul>
                                                       @endif
                                                  </div>
                                             </a>
                                             @endforeach
                                             
                                             <a href="javascript:void(0);" class="small text-muted text-center">Show All Notification</a>
                                        @else
                                             <a href="javascript:void(0);" class="small text-muted text-center">No New Notification</a>
                                        @endif 
                                   
                                        
                                   </div>
                              </li>
                              <!-- notify -->

                    *Notify only to the specific class should implement.

               =>Multiple Notifiation Links
                    @foreach($userdata->unreadNotifications as $notification)
                         <a href="{{ route($notification->type === 'App\Notifications\AnnouncementNotify'?'announcements.show':'leaves.show',$notification->data['id']) }}" class="d-flex">
                    ....       
               =>Reading Multiple Notifications
                    =In AnnouncementsController.php
                         public function show(string $id)
                         {   
                              $user = Auth::user();
                              $user_id = $user->id;

                              $announcement = Announcement::findOrFail($id);
                              $comments = $announcement->comments()->orderBy("updated_at","desc")->get();
                              
                              $type = "App\Notifications\AnnouncementNotify";
                              $getnoti = \DB::table("notifications")->where("notifiable_id",$user_id)->where("type",$type)->where('data->id',$id)->pluck('id');
                              // dd($getnoti);
                              \DB::table("notifications")->where('id',$getnoti)->update(["read_at"=>now()]);
                         
                              return view("announcements.show",["announcement"=>$announcement,"comments"=>$comments]);
                         }

                    =In LeavesController.php
                         public function show(string $id)
                         {
                              $leave = Leave::findOrFail($id);
                              $type = "App\Notifications\LeaveNotify";
                              $getnoti = \DB::table("notifications")->where("notifiable_id",$user_id)->where("type",$type)->where('data->id',$id)->pluck('id');
                              // dd($getnoti);
                              \DB::table("notifications")->where('id',$getnoti)->update(["read_at"=>now()]);
                              
                              return view("leaves.show",["leave"=>$leave]);
                         }


                    *result ($getnoti) - before checking conditions 
                    Illuminate\Support\Collection {#296 ▼ // app\Http\Controllers\AnnouncementsController.php:77
                    #items: array:3 [▼
                    0 => "0448356d-9b2e-4e1a-a156-ea0426b0d2ed"
                    1 => "9342f82e-40bd-4d4a-a612-f35dee6d2aa0"
                    2 => "bd6020e0-dfcf-4b55-9041-2dc57cb8c812"
                    ]
                    #escapeWhenCastingToString: false
                    }

                    "notifications"
                    id	                    type	                                        notifiable_type     notifiable_id	data	                                                                                                         read_at	          created_at	updated_at	
                    0448356d-9b2e-4e1a       App\Notifications\AnnouncementNotify         App\Models\User     20              {"id":25,"title":"announcement three","img":"assets\/img\/announcements\/165e59eca614cfagen-s-3-1.jpg"}       NULL
                    -a156-ea0426b0d2ed
                    0448356d-9b2e-4e1a       App\Notifications\AnnouncementNotify         App\Models\User     30              {"id":25,"title":"announcement three","img":"assets\/img\/announcements\/165e59eca614cfagen-s-3-1.jpg"}       NULL
                    -a156-ea0426b0d2ed 
                    0448356d-9b2e-4e1a       App\Notifications\AnnouncementNotify         App\Models\User     40              {"id":25,"title":"announcement three","img":"assets\/img\/announcements\/165e59eca614cfagen-s-3-1.jpg"}       NULL
                    -a156-ea0426b0d2ed      

                    ---------------------------------------------------------------------------------------------------
                    *result ($getnoti) - before checking conditions 
                    Illuminate\Support\Collection {#296 ▼ // app\Http\Controllers\AnnouncementsController.php:80
                    #items: array:2 [▼
                    0 => "491d087c-8e77-4577-a8f3-88bb17401765"
                    1 => "ea23f1ae-5fc0-4c80-8fb4-fc35e36c6eed"
                    ]
                    #escapeWhenCastingToString: false
                    }

                    "notifications"          
                    id                       notifiable_type     type                                    notifiable_id  data
                    ea23f1ae-5fc0-4c80       App\Models\User     App\Notifications\LeaveNotify           20             {"id":22,"title":"I am very sick","studentid":"WDF1002"}
                    -8fb4-fc35e36c6eed       
                    491d087c-8e77-4577       App\Models\User     App\Notifications\AnnouncementNotify    20             {"id":22,"title":"announcement one","img":null}
                    -a8f3-88bb17401765
                    __________________________________________________________________________________________________________
                    conditions > 
                         users
                         type   
                    *however notification id is '25', it can be other user's notification or other kind of notification. 

                    *must select only one notification related to user.

                    *result ($getnoti) - after checking conditions
                         Illuminate\Support\Collection {#296 ▼ // app\Http\Controllers\AnnouncementsController.php:81
                         #items: array:1 [▼
                         0 => "602bad4d-9fab-4396-90db-fcfbc710e3c1"
                         ]
                         #escapeWhenCastingToString: false
                         }
     =>Email Notification 
          Email Service Providers 
               mailpit
               mailgun 
               aws 
               alibaba
               mailtrap **
               sendgrid (https://docs.sendgrid.com/for-developers/sending-email/laravel)

          =>mailtrap     
               https://mailtrap.io/
               =sign up an account 

               https://mailtrap.io/home
               Email Testing 
               Email Sending 

               Email Testing
                    -for testing purpose (checking email template and delivery)  
                    -with fake server 

               Email Sending
                    -send email by the domain name
                    admin@dlt.com

               Email Testing > Inboxes > My Inbox 
                    =SMTP Settings > Show Credentials >
                         SMTP
                         Host:
                         sandbox.smtp.mailtrap.io
                         Port:
                         25 or 465 or 587 or 2525
                         Username:
                         a77caaa1571414
                         Password:
                         1dc9eaa9d53358
                         Auth:
                         PLAIN, LOGIN and CRAM-MD5
                         TLS:
                         Optional (STARTTLS on all ports)
                    *SMTP - Email Sending Protocol

                    =SMTP Settings > Reset Credentials

          =In .env 
               MAIL_MAILER=smtp
               MAIL_HOST=sandbox.smtp.mailtrap.io
               MAIL_PORT=2525
               MAIL_USERNAME=a77caaa1571414
               MAIL_PASSWORD=1dc9eaa9d53358
               MAIL_ENCRYPTION=tls
               MAIL_FROM_ADDRESS="yuzanapalaza@gmail.com"
               MAIL_FROM_NAME="${APP_NAME}"

               *mail trap provided host,port,username,password,encryption are used.
               *address is just naming of mailing address.
                    It can be fake address.
                    *Many BitCoins are stolen by this method.
                    *Lesson Learned 
                         -should check detail of an email.
                              =Example from gmail.
                                   from:	mpt-invoice@stt.mpt.com.mm
                                   to:	thoonlay779@gmail.com
                                   date:	Feb 6, 2024, 10:37 PM
                                   subject:	MPT e-invoice notification
                                   mailed-by:	eu-west-1.amazonses.com
                                   signed-by:	stt.mpt.com.mm
                                   security:	 Standard encryption (TLS) Learn more
                                   -------------------------------------------------------------------------
                                   from:	Myanmar-Passport-Issuing-Office <no-reply@passport.gov.mm>
                                   to:	thoonthoon469@gmail.com
                                   date:	Feb 16, 2024, 9:19 AM
                                   subject:	Appointment Letter
                                   mailed-by:	passport.gov.mm
                                   signed-by:	passport.gov.mm
                                   security:	 Standard encryption (TLS) Learn more
                              
                         -don't trust easily.

          php artisan config:clear
          php artisan  config:cache
          php artisan cache:clear
          php artisan route:clear
          php artisan route:cache


          php artisan make:notification ContactEmailNotify
          *Notification file format

          =In Contact.php
               use Illuminate\Notifications\Notifiable;

               class Contact extends Model
               {
               use HasFactory,Notifiable;
               ....
               }

          =>Laravel Documentation
               #Mail Notifications
                    #Formatting Mail Messages

               /**
               * Get the mail representation of the notification.
               */
               public function toMail(object $notifiable): MailMessage
               {
               $url = url('/invoice/'.$this->invoice->id);
               
               return (new MailMessage)
                              ->greeting('Hello!')
                              ->line('One of your invoices has been paid!')
                              ->lineIf($this->amount > 0, "Amount paid: {$this->amount}")
                              ->action('View Invoice', $url)
                              ->line('Thank you for using our application!');
               }
          
          =In ContactsController.php
               public function store(Request $request)
               {
                    ....

                    $contact->save();

                    $contactdata = [
                         "firstname" => $contact->firstname,
                         "lastname" => $contact->lastname,
                         "birthday" => $contact->birthday,
                         "relative" => $contact->relative["name"],
                         "url"=>url("/")
                    ];
                    Notification::send($user,new ContactEmailNotify($contactdata));

                    session()->flash("success","New Contact Created");
                    return redirect(route("contacts.index"));
               }

          =In ContactEmailNotify.php
               <?php

               namespace App\Notifications;

               use Illuminate\Bus\Queueable;
               use Illuminate\Contracts\Queue\ShouldQueue;
               use Illuminate\Notifications\Messages\MailMessage;
               use Illuminate\Notifications\Notification;

               class ContactEmailNotify extends Notification
               {
               use Queueable;

               private $data;

               /**
                    * Create a new notification instance.
                    */
               public function __construct($data)
               {
                    $this->data = $data;
               }

               /**
                    * Get the notification's delivery channels.
                    *
                    * @return array<int, string>
                    */
               public function via(object $notifiable): array
               {
                    return ['mail'];
               }

               /**
                    * Get the mail representation of the notification.
                    */
               public function toMail(object $notifiable): MailMessage
               {
                    return (new MailMessage)
                                   ->greeting("New Contact Created")
                                   ->line('Full Name : '.$this->data["firstname"]." ".$this->data["lastname"])
                                   ->line('Birth Date : '.$this->data["birthday"])
                                   ->line("Relative : {$this->data["relative"]}")
                                   ->action('Visit Site', $this->data["url"])
                                   ->line('Thank you for using our application!');
               }

               /**
                    * Get the array representation of the notification.
                    *
                    * @return array<string, mixed>
                    */
               public function toArray(object $notifiable): array
               {
                    return [
                         //
                    ];
               }
               }

               *line = text
               action = button

               *Email Notofication actually send email as a notification not actual email.
               Laravel already create template for email notification so follow the framework.

          =Viewing mailtrap inbox
               Inboxes > My Inbox > Contact Email Notify

               =>Email View 
                    =Create a contact with admin account
                         Contact Email Notify

                         From:DLT Student Management Project <yuzanapalaza@gmail.com>
                         To: <admin@gmail.com>

                         Show Headers > 
                         Date                Mon, 04 Mar 2024 19:48:57 +0630
                         From                DLT Student Management Project <yuzanapalaza@gmail.com>
                         To                  admin@gmail.com
                         Bcc                 Available on Enterprise, Premium, Business, and Team plans. 
                         Subject             Contact Email Notify
                    
                    =Create a contact with aung aung account
                         Contact Email Notify

                         From:DLT Student Management Project <yuzanapalaza@gmail.com>
                         To: <aungaung@gmail.com>

               =>Email Notification Template

               *Automatically create Subject From Notification file name
               *Automatically create Mailer Name From Application name 
               *Send to the current authenticated user email account 

     =>Sending Email Notification By Gmail

          *Gmail Risk 
               =Gmail password leak from .env file (It is not serious because we don't need to give actual gmail password for now)
               =can send to the spam
                    -solution: ssl certificate for the website
               
          =>Gmail Ingetrage (1.port forward,2.app password)
               =>IMAP On
                    Gmail > Setting Icon > See all settings > Forwarding and POP/IMAP >

                    IMAP access:   Status: IMAP is disabled
                                   *Enable IMAP
                                   Disable IMAP


                    *IMAP (Internet Management Access Protocol)
                    *Allow to gmail from own server, not gmail server
                         It is email forwarding.
                         Like message forwarding.We can forward other user's message.
                         Send email reach to the gmail and gmail transmit the mail to the user.
                    
               =>Creating Virtual Password
                    Gmail > Profile Icon > Magane Your Google Account > Security
                    2-Step Verification (Needed to on)
                         *for stronger security
                         -preventing attackers from hacking password by exploiting virtual password
                    
                    App passwords >s
                    App Name  - DLT Student Maganement Project
                    =Copy the password
          
          =In .env 
               # MAIL_MAILER=smtp
               # MAIL_HOST=sandbox.smtp.mailtrap.io
               # MAIL_PORT=2525
               # MAIL_USERNAME=a77caaa1571414
               # MAIL_PASSWORD=1dc9eaa9d53358
               # MAIL_ENCRYPTION=tls
               # MAIL_FROM_ADDRESS="yuzanapalaza@gmail.com"
               # MAIL_FROM_NAME="${APP_NAME}"

               MAIL_MAILER=smtp
               MAIL_HOST=smtp.gmail.com
               MAIL_PORT=587
               MAIL_USERNAME=thoonthoon469@gmail.com
               MAIL_PASSWORD="qstl fdqu mosh tsrk"
               MAIL_ENCRYPTION=tls
               MAIL_FROM_ADDRESS=thoonthoon469@gmail.com
               MAIL_FROM_NAME="${APP_NAME}"

          =>Other Person Inbox 
               "users"
                    id     name           email
                    20     aung aung      thoonlay779@gmail.com
               
               =logout aung aung
               =create a contact with "aung aung" account

               =>Gmail View
                    =from user email (thoonlay779@gmail.com)
                         DLT Student Management Project                    5:09 PM (4 minutes ago)
                         to me

                         from:	DLT Student Management Project <thoonthoon469@gmail.com>
                         to:	thoonlay779@gmail.com
                         date:	Mar 5, 2024, 5:09 PM
                         subject:	Contact Email Notify
                         mailed-by:	gmail.com
                         signed-by:	gmail.com
                         security:	 Standard encryption (TLS) Learn more
                    *Email are in the prmary inbox not in spam 

                    =from admin email (thoonthoon469@gmail.com)
                         DLT Student Management Project <thoonthoon469@gmail.com>    5:09 PM (14 minutes ago)
                         to thoonlay779

                         from:	DLT Student Management Project <thoonthoon469@gmail.com>
                         to:	thoonlay779@gmail.com
                         date:	Mar 5, 2024, 5:09 PM
                         subject:	Contact Email Notify
                         mailed-by:	gmail.com
                    *Email are in the Send box

     =>Email Sending Feature 
          =>Email Box
               -use ui accordion design from l1accordion
               
               =In students > show.blade.php
                    <div class="col-md-8 col-lg-9">
                         <h6>Compose</h6>
                         <div class="card border-0 rounded-0 shadow mb-4">
                              <div class="card-body">
                                   <div class="accordion">
                                        <div class="acctitle shown">Email</div>
                                        <div class="acccontent">
                                             <div class="col-md-12 py-3">
                                                  <form action="" method="">
                                                       @csrf
                                                       <div class="row">
                                                            <div class="col-md-6 form-group mb-3">
                                                                 <input type="email" name="cmpemail" id="cmpemail" class="form-control form-control-sm border-0 rounded-0" placeholder="To:" value="" />
                                                            </div>
                                                            <div class="col-md-6 form-group mb-3">
                                                                 <input type="ext" name="cmpsubject" id="cmpsubject" class="form-control form-control-sm border-0 rounded-0" placeholder="Subject" value="" />
                                                            </div>
                                                            <div class="col-md-12 form-group mb-3">
                                                                 <textarea name="cmpcontent" id="cmpcontent" class="form-control form-control-sm border-0 rounded-0" style="resize:none;" rows="3" placeholder="Your message here...."></textarea>
                                                            </div>

                                                            <div class="col d-flex justify-content-end align-items-end">
                                                                 <button type="submit" class="btn btn-secondary btn-sm rounded-0">Send</button>
                                                            </div>

                                                       </div>
                                                  </form>
                                             </div>
                                        </div>
                                   </div>
                              </div>
                         </div>
                         ....
                    </div>
                    ....
                    @section("css")
                    <style type="text/css">
                         /* Start Accordion */
                              .accordion{
                              width: 100%;
                              }
                              .acctitle{
                              font-size: 13px;
                              user-select: none;

                              padding: 5px;
                              margin: 0;

                              cursor: pointer;

                              user-select: none;

                              position: relative;
                              }
                              .acctitle::after{
                              content: '\f0e0';
                              font-family: 'Font Awesome 5 Free';

                              /* position: absolute;
                              right: 15px;
                              top: 50%;
                              transform: translateY(-50%); */

                              float: right;
                              }
                              /* .active.acctitle::after{
                              content: '\f068';
                              } */
                              .shown::after{
                              content: '\f2B6';
                              }
                              .acccontent{
                              height: 0;
                              background-color: #f4f4f4;
                              text-align: justify;

                              padding: 0 10px;

                              overflow: hidden;

                              transition: height 0.3s ease-in-out;
                              }
                         /* End Accordion */
                    ....
                    // Start Accordion
                    var getacctitles = document.getElementsByClassName('acctitle');
                    // console.log(getacctitles);
                    var getacccontents = document.querySelectorAll('.acccontent');
                    // console.log(getacccontents);


                    for(var x = 0 ; x < getacctitles.length ; x++){
                    
                    getacctitles[x].addEventListener('click',function(e){
                         // console.log(e.target);
                         // console.log(this);

                         this.classList.toggle('shown');

                         var getcontent = this.nextElementSibling;
                         // console.log(getcontent);

                         if(getcontent.style.height){
                              getcontent.style.height = null; //beware can't set 0
                         }else{
                              // console.log(getcontent.scrollHeight);
                              getcontent.style.height = getcontent.scrollHeight + 'px';
                         }
                    });

                    if(getacctitles[x].classList.contains('shown')){
                         getacccontents[x].style.height = getacccontents[x].scrollHeight + 'px';
                    }
                    }
                    // End Accordion

               -customer service staff can use this feature to easily communicate with users.

          =>Auto Filing Email Address
               =In students > show.blade.php
                    <div class="col-md-6 form-group mb-3">
                         <input type="email" name="cmpemail" id="cmpemail" class="form-control form-control-sm border-0 rounded-0" placeholder="To:" value="{{ $student->user['email'] }}" readonly />
                    </div>

          php artisan make:mail MailBox
          app > Mail > MailBox.php

          =>Original MailBox.php
               <?php

               namespace App\Mail;

               use Illuminate\Bus\Queueable;
               use Illuminate\Contracts\Queue\ShouldQueue;
               use Illuminate\Mail\Mailable;
               use Illuminate\Mail\Mailables\Content;
               use Illuminate\Mail\Mailables\Envelope;
               use Illuminate\Queue\SerializesModels;

               class MailBox extends Mailable
               {
               use Queueable, SerializesModels;

               /**
                    * Create a new message instance.
                    */
               public function __construct()
               {
                    //
               }

               /**
                    * Get the message envelope.
                    */
               public function envelope(): Envelope
               {
                    return new Envelope(
                         subject: 'Mail Box',
                    );
               }

               /**
                    * Get the message content definition.
                    */
               public function content(): Content
               {
                    return new Content(
                         view: 'view.name',
                    );
               }

               /**
                    * Get the attachments for the message.
                    *
                    * @return array<int, \Illuminate\Mail\Mailables\Attachment>
                    */
               public function attachments(): array
               {
                    return [];
               }
               }
          *__construct() for data request 
          *envelope() for email subject
          *content() for email temlate design
          *attachments() for attaching files 

          =In students > show.blade.php
               <form action="{{ route('students.mailbox') }}" method="POST">

          =In web.php 
               Route::resource("students",StudentsController::class);
               Route::post("compose/mailbox",[StudentsController::class,"mailbox"])->name("students.mailbox");
          
          =In MailBox.php 
               public $subject,$content;
               public function __construct($subject,$content)
               {   
                    $this->subject = $subject;
                    $this->content = $content;
               }
               public function envelope(): Envelope
               {
                    return new Envelope(
                         subject: $this->subject,
                    );
               }
          
          =In StudentsController.php 
               public function mailbox(Request $request){
                    // dd($request["cmpemail"]);        // "admin@gmail.com"
                    // dd($request["cmpsubject"]);      // "very important" // app\Http\Controllers\StudentsController.php:131
                    // dd($request["cmpcontent"]);      // "hello" // app\Http\Controllers\StudentsController.php:132
                    
                    $to = $request["cmpemail"];
                    $subject = $request["cmpsubject"];
                    $content = $request["cmpcontent"];

                    Mail::to($to)->send(new MailBox($subject,$content));

                    return redirect()->back();
               }
               *use Illuminate\Support\Facades\Mail;
               *use App\Mail\MailBox;

               *to() is primary email user.

          =>Using Cutomized Email Template
               =template.html 
                    -decorate your email design 
               
               resources > views > mailtemplate > mailbox.blade.php 
               =In mailbox.blade.php 
                    <!DOCTYPE html>
                    <html>
                         <head>

                              <title></title>
                              <style type="text/css">
                                   body{
                                        font-size: 12px;

                                        padding: 20px;
                                        margin: 20px;
                                        margin: 0;
                                   }

                                   .card-body{
                                        text-indent: 50px;
                                        text-align: justify;
                                   }

                                   .list-unstyled{
                                        list-style: none;

                                        padding: 0;
                                        margin: 0;
                                   }
                              </style>
                         </head>
                         <body>
                              

                              <section>
                                   <b>Deaer Student, </b>
                              </section>

                              <section>
                                   <div class="card">
                                        <div class="card-body">
                                             <p>
                                                  {!! $content  !!}
                                             </p>
                                        </div>
                                   </div>
                              </section>

                              <section>
                                   <ul class="list-unstyled">
                                        <li>Best Regards,</li>
                                        <li>{{ config("app.name") }}</li>
                                   </ul>
                              </section>
                         </body>
                    </html>

               =In MailBox.php 
                    public function content(): Content
                    {
                         return new Content(
                              view: 'mailtemplate.mailbox',
                         );
                    }

          =>Email Testing With mailtrap 
               =In .env
                    MAIL_MAILER=smtp
                    MAIL_HOST=sandbox.smtp.mailtrap.io
                    MAIL_PORT=2525
                    MAIL_USERNAME=a77caaa1571414
                    MAIL_PASSWORD=1dc9eaa9d53358
                    MAIL_ENCRYPTION=tls
                    MAIL_FROM_ADDRESS="yuzanapalaza@gmail.com"
                    MAIL_FROM_NAME="${APP_NAME}"

                    # MAIL_MAILER=smtp
                    # MAIL_HOST=smtp.gmail.com
                    # MAIL_PORT=587
                    # MAIL_USERNAME=thoonthoon469@gmail.com
                    # MAIL_PASSWORD="qstl fdqu mosh tsrk"
                    # MAIL_ENCRYPTION=tls
                    # MAIL_FROM_ADDRESS=thoonthoon469@gmail.com
                    # MAIL_FROM_NAME="${APP_NAME}"

               =>Mailtrap View 
                    =Send an email to a student (aung aung)
                         Very important

                         From:DLT Student Management Project <yuzanapalaza@gmail.com>
                         To:  <thoonlay779@gmail.com>

                         Show Headers > 
                         Date                Wed, 06 Mar 2024 16:20:45 +0630
                         From                DLT Student Management Project <yuzanapalaza@gmail.com>
                         To                  thoonlay779@gmail.com
                         Bcc                 Available on Enterprise, Premium, Business, and Team plans. 
                         Subject             Very important
                    
                    =Send an email to a student (admin)
                         Very important

                         From:DLT Student Management Project <yuzanapalaza@gmail.com>
                         To:  <admin@gmail.com>
                    =Email Template 
                         Deaer Student,
                              hello world

                         Best Regards,
                         DLT Student Management Project

                         *can add project icon, images 

               *Email Subject name display as specified. 
               *Email Template display as predefind.

               =>Additional Email Sending 
                    =In StudentController.php 
                    public function mailbox(Request $request){
                         ....
                         Mail::to($to)->cc("admin@dlt.com")->bcc("info@dlt.com")->send(new MailBox($subject,$content));

                         return redirect()->back();
                    }
                    *cc (carbon copy)
                    * bcc (blind carbon copy) = for checking outbound email of org
                    -email are sent to the copying email address 

                    *It is not multi user email sending.
                    Multi user email are sent by iteraing a looping of Mail::to()

          =>Requesting email data as Array
               php artisan make:mail StudentMailBox

               =In StudentMailBox.php 
                    public $data;
              
                    public function __construct($data)
                    {
                         $this->data = $data;
                    }

      
                    public function envelope(): Envelope
                    {
                         return new Envelope(
                              subject: $this->data["subject"],
                         );
                    }

          
                    public function content(): Content
                    {
                         return new Content(
                              view: 'mailtemplate.studentmailbox',
                         );
                    }

               =In StudentController.php 
                    public function mailbox(Request $request){
                         ....
                         // =>Method 2 (to StudentMailBox)
                         // $data["to"] = $request["cmpemail"];
                         // $data["subject"] = $request["cmpsubject"];
                         // $data["content"] = $request["cmpcontent"];

                         $data = [
                              "to" => $request["cmpemail"],
                              "subject" => $request["cmpsubject"],
                              "content" => $request["cmpcontent"]
                         ];
                         
                         Mail::to($data["to"])->send(new StudentMailBox($data));

                         return redirect()->back();
                    }
                    
               resources > views > mailtemplate >
               =In studentmailbox.blade.php 
                    <body>
          
                         <section>
                              <b>Deaer Student, </b>
                         </section>

                         <section>
                              <div class="card">
                                   <div class="card-body">
                                        <p>
                                             {!! $data["content"]  !!}
                                        </p>
                                   </div>
                              </div>
                         </section>

                         <section>
                              <ul class="list-unstyled">
                                   <li>Best Regards,</li>
                                   <li>{{ config("app.name") }}</li>
                              </ul>
                         </section>
                    </body>

     =>Queue Process 
          -Database Notification do not have to wait.
          -Email Notification and email sending have to wait a little.     
               checking header, datatype, authentication
          -It is a solution for waiting issue.

          =In .evn 
               QUEUE_CONNECTION=database

               sync (default), file can also be used.
               both 'sync' and 'database' still have to wait.
               -email sending tasks are stored at database.

          =>Generating Queue Table
               php artisan queue:table

               =>Queue migrations
                    public function up(): void
                    {
                         Schema::create('jobs', function (Blueprint $table) {
                              $table->bigIncrements('id');
                              $table->string('queue')->index();
                              $table->longText('payload');
                              $table->unsignedTinyInteger('attempts');
                              $table->unsignedInteger('reserved_at')->nullable();
                              $table->unsignedInteger('available_at');
                              $table->unsignedInteger('created_at');
                         });
                    }
               
               php artisan migrate

               =>phpmyadmin
                    "jobs"
                    id	queue	payload	attempts	reserved_at	available_at	created_at	


               =>Laravell Default 'failed_jobs' table
                    "failed_jobs"
                    id	uuid	connection	queue	payload	exception	failed_at	

          =>Email Notification & Email Sending Operations
               =Email Noti 
                    Example (Contact)
                    -DB (new contact store) 
                    -Sending Email Noti 
               =Queue Email Noti 
                    Example (Contact)
                    -DB (new contact store)
                    -DB (email noti sending task store at "jobs")
                    -Send Email Noti from stored database task 
               ----------------------------------------------------
               =Email Sending 
                    -Direct Email Send 
               
               =Queue Email Sending 
                    -DB (email sending task store at "jobs")
                    -Send Email from stored database task 

          =>Email Notification Queue
               =>Implementing ShouldQueue
                    class ContactEmailNotify extends Notification implements ShouldQueue
                    {....
                    }

                    (use Illuminate\Contracts\Queue\ShouldQueue;)

                    =create a new contact 
                    =create a new contact

                    "jobs"    
                    id	queue	payload	                                             attempts	reserved_at	available_at	created_at	
                    1    default   {"uuid":"9e0edf84-ef36-4d2e-bd67-b246329a47cc","di...  0         NULL           1709815251     1709815251
                    2    default   {"uuid":"4650182d-c5d9-454d-a9a1-7d90ab021f48","di...  0         NULL           1709816175     1709816175

                    {"uuid":"9e0edf84-ef36-4d2e-bd67-b246329a47cc","displayName":"App\\Notifications\\ContactEmailNotify","job":"Illuminate\\Queue\\CallQueuedHandler@call","maxTries":null,"maxExceptions":null,"failOnTimeout":false,"backoff":null,"timeout":null,"retryUntil":null,"data":{"commandName":"Illuminate\\Notifications\\SendQueuedNotifications","command":"O:48:\"Illuminate\\Notifications\\SendQueuedNotifications\":3:{s:11:\"notifiables\";O:45:\"Illuminate\\Contracts\\Database\\ModelIdentifier\":5:{s:5:\"class\";s:15:\"App\\Models\\User\";s:2:\"id\";a:1:{i:0;i:1;}s:9:\"relations\";a:0:{}s:10:\"connection\";s:5:\"mysql\";s:15:\"collectionClass\";N;}s:12:\"notification\";O:36:\"App\\Notifications\\ContactEmailNotify\":2:{s:42:\"\u0000App\\Notifications\\ContactEmailNotify\u0000data\";a:5:{s:9:\"firstname\";s:3:\"Tun\";s:8:\"lastname\";s:3:\"Hla\";s:8:\"birthday\";s:10:\"2024-03-22\";s:8:\"relative\";s:6:\"Friend\";s:3:\"url\";s:21:\"http:\/\/127.0.0.1:8000\";}s:2:\"id\";s:36:\"119aa1ad-2698-4d20-badb-de2e07253ddb\";}s:8:\"channels\";a:1:{i:0;s:4:\"mail\";}}"}}
                    
                    "failed_jobs"
                    id	uuid	connection	queue	payload	exception	failed_at	

                    mailtrap
                    -no mail receive 
                    
                    *ShouldQueue Interface, indicating to Laravel that the job should be pushed onto the queue to run asynchronously.
                    *store the respective task in the database to carry out later
               
               =>Working with Queue
                    php artisan queue:work
                    (or)
                    php artisan queue:listen
                    *this command needed to run continuously while the server on.
                    *tasks run in background from the "jobs" table.
                         2024-03-07 19:31:14 App\Notifications\ContactEmailNotify ................................................................ RUNNING  
                         2024-03-07 19:31:28 App\Notifications\ContactEmailNotify ............................................................... 14s DONE  
                         2024-03-07 19:31:28 App\Notifications\ContactEmailNotify ................................................................ RUNNING  
                         2024-03-07 19:31:30 App\Notifications\ContactEmailNotify ................................................................ 1s DONE  

                    "jobs"
                    id	queue	payload	attempts	reserved_at	available_at	created_at	

                    "failed_jobs"
                    id	uuid	connection	queue	payload	exception	failed_at	

                    mailtrap 
                    -mail arrive 
                    __________________________________________________________________________________________________________
                    =create a new contact 
                         =At queue working terminal
                              2024-03-07 19:31:14 App\Notifications\ContactEmailNotify ................................................................ RUNNING  
                              2024-03-07 19:31:28 App\Notifications\ContactEmailNotify ............................................................... 14s DONE  
                              2024-03-07 19:31:28 App\Notifications\ContactEmailNotify ................................................................ RUNNING  
                              2024-03-07 19:31:30 App\Notifications\ContactEmailNotify ................................................................ 1s DONE  
                              2024-03-07 19:38:44 App\Notifications\ContactEmailNotify ................................................................ RUNNING
                              2024-03-07 19:38:49 App\Notifications\ContactEmailNotify ................................................................ 5s DONE
                         
                         *do not have to run the command again
                         *proceed the tasks in the database
          
          =>Email Sending Queue
               =In StudentController.php 
                    public function mailbox(Request $request){
  
                         // Method 1 (to MailBox)
                         $to = $request["cmpemail"];
                         $subject = $request["cmpsubject"];
                         $content = $request["cmpcontent"];
                         Mail::to($to)->send(new MailBox($subject,$content));

                         return redirect()->back();
                    }
               
               =In Mailbox.php 
                    class MailBox extends Mailable implements ShouldQueue
                    {
                         ....
                    }

               =Use Gmail to solve mailtrap demo mail limit issue
               =send a mail to a student

               2024-03-08 17:13:19 App\Mail\MailBox .................................................................................... RUNNING
               2024-03-08 17:13:26 App\Mail\MailBox .................................................................................... 7s DONE

               *It work in current version, previsous version can't simply wirte only implements ShouldQueue

               =>****Important to Check 
                    =In .env
                         QUEUE_CONNECTION=database
                    Hovever the class implements ShouldQueue, setting above variable default 'sync' will not store tasks in database and directly work the task.
               ____________________________________________________________________________________________________________________________________________
          =>Queue Usage 
               -Email, SMS

               SMS Provider
               -twillo
               -local telecoms

               =User Queue
                    -full information user - success
                    -incomplete information user - queue 

                    A                   A 
                    B - incomplete      C 
                    C                   D 
                    D                   E 
                    E                   F  
                    F                   B 


     =>Email Sending By Job
          php artisan make:job MailBoxJob

          app > Jobs > MailBoxJob.php 
          =Original MailBoxJob.php
               <?php

               namespace App\Jobs;

               use Illuminate\Bus\Queueable;
               use Illuminate\Contracts\Queue\ShouldBeUnique;
               use Illuminate\Contracts\Queue\ShouldQueue;
               use Illuminate\Foundation\Bus\Dispatchable;
               use Illuminate\Queue\InteractsWithQueue;
               use Illuminate\Queue\SerializesModels;

               class MailBoxJob implements ShouldQueue
               {
               use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

               /**
                    * Create a new job instance.
                    */
               public function __construct()
               {
                    //
               }

               /**
                    * Execute the job.
                    */
               public function handle(): void
               {
                    //
               }
               }
          
          MailBoxJob > MailBox 
                    handle

          =>Using Job
               =Method 1 (to MailBox)
                    =In  StudentController.php 
                         public function mailbox(Request $request){     
                              dispatch(new MailBoxJob($to,$subject,$content));
                              // MailBoxJob::dispatch($to,$subject,$content);

                              return redirect()->back();
                         }

                         *use App\Jobs\MailBoxJob;

                    =In MailBoxJob.ph 
                         protected $to;
                         protected $subject;
                         protected $content;
               
                         public function __construct($to,$subject,$content)
                         {
                              $this->to = $to;
                              $this->subject = $subject;
                              $this->content = $content;
                         }

                         public function handle(): void
                         {
                              Mail::to($this->to)->send(new MailBox($this->subject,$this->content));
                         }
                         *use App\Mail\MailBox;
                         *use Illuminate\Support\Facades\Mail;

                    *conduct a job named MailBoxJob,
                         MailBoxJob operate EmailSending task 

                    2024-03-09 17:48:06 App\Jobs\MailBoxJob ............................................ RUNNING
                    2024-03-09 17:48:13 App\Jobs\MailBoxJob ............................................ 7s DONE
               =Method 2 (to StudentMailBox)
                    php artisan mke:job StudentMailBoxJob

                    =In StudentController.php 
                         public function mailbox(Request $request){

                              $data = [
                                   "to" => $request["cmpemail"],
                                   "subject" => $request["cmpsubject"],
                                   "content" => $request["cmpcontent"]
                              ];
                              
                              // Mail::to($data["to"])->send(new StudentMailBox($data));
                              dispatch(new StudentMailBoxJob($data));

                              return redirect()->back();
                         }
                         use App\Jobs\StudentMailBoxJob;

                    =In StudentMailBoxJob.php 
                         public function __construct($data)
                         {   
                              $this->data = $data;
                         }

                         public function handle(): void
                         {
                              Mail::to($this->data["to"])->send(new StudentMailBox($this->data));

                         }

                         use App\Mail\StudentMailBox;
                         use Illuminate\Support\Facades\Mail;

          =>Inspecting Error 
               
               *error 
                    $this->subject = $to;

                    "failed_jobs"
                    id	uuid	                                   connection	queue	payload	                                             exception	                                             failed_at	
                    3    626a1dc7-c73e-47e1-970a-61e890ad820f    database       default   {"uuid":"626a1dc7-c73e-47e1-970a-61e890ad820f","di...  Symfony\Component\Mime\Exception\LogicException: A...  2024-03-09 17:42:34

                    --------------------------------------------------------------
                    strage > logs > laravel.log 
                    *can read error message

     =>Like Feature 
          -Similar to Enroll 
          -User can only like a post one time. When a post is liked, unlike button appear.


          =Migration 
               php artisan make:migration create_post_like_table --create;
               =create_post_like_table.php 
                    up()
                         $table->id();
                         $table->foreignId("post_id")->constrained()->onUpdate("cascade")->onDelete("cascade");
                         $table->foreignId("user_id")->constrained(
                              table:"users",indexName:"post_user_id"
                         )->onUpdate("cascade")->onDelete("cascade");
                         $table->timestamps();

               php artisan migrate:status 
               php artisan migrate 

          =Seperate Controller 
               php artisan make:controller PostsLikeController
               =In PostsLikeController.php 
                    use App\Models\Post;
                    use Illuminate\Http\Request;

                    class PostsLikeController extends Controller
                    {
                         public function like(Post $post){

                         }

                         public function unlike(Post $post){

                         }
                    }

          =In Web.php 
               *use App\Http\Controllers\PostsLikeController;

               Route::resource("posts",PostsController::class);
               Route::post("posts/{post}/like",[PostsLikeController::class,"like"])->name("posts.like");
               Route::post("posts/{post}/unlike",[PostsLikeController::class,"unlike"])->name("posts.unlike");
          =In User.php 
               public function likes(){
                    return $this->belongsToMany(Post::class,"post_like");
               }
               *Many to Many relationship between Posts and Users,  the dummy table is "post_like".

          =In PostsLikeController.php 
               public function like(Post $post){
                    dd($post);
                    $user = Auth::user();
                    $user->likes()->attach($post);

                    session()->flash("success","You liked this post");
                    return redirect()->back();
               }
               *Route Model Binding
                    By type-hinting the controller method's parameter with the Post model (Post $post), Laravel knows that it should fetch a Post model from the database based on the post parameter in the URL. Laravel will automatically query the posts table for a record with an id matching the value provided in the URL.

                    *result ($post)
                         App\Models\Post {#1445 ▼ // app\Http\Controllers\PostsLikeController.php:12
                         #connection: "mysql"
                         #table: "posts"
                         #primaryKey: "id"
                         ....
                         #attributes: array:17 [▶]
                         #original: array:17 [▼
                         "id" => 3
                         "image" => "assets/img/posts/1659bede60b7573banner3.jpg"
                         "title" => "CSS Intermediate Batch5"
                         "slug" => ""
                         "content" => "hi sir"
                         "fee" => "15000.00"
                         "startdate" => "2023-11-22"
                         "enddate" => "2023-12-21"
                         "starttime" => "07:11:00"
                         "endtime" => "20:14:00"
                         "type_id" => 2
                         "tag_id" => 2
                         "attshow" => 3
                         "status_id" => 7
                         "user_id" => 1
                         "created_at" => "2024-01-08 19:12:55"
                         "updated_at" => "2024-01-22 18:35:13"
                         ]
                         ....
                         #fillable: array:14 [▶]
                         #guarded: array:1 [▶]
                         }
                    
               *Insert the dummy table using Many to Many relationship.

          =In posts > show.blade.php 
               <div class="w-100 d-flex flex-row justify-content-between mb-3">
                    @if(!$post->checkenroll($userdata->id))
                         <a href="#createmodal" class="w-100 btn btn-primary btn-sm rounded-0" data-bs-toggle="modal">Enroll</a>
                    @endif; 

                    <form class="w-100" action="{{route('posts.like',$post->id)}}" method="POST">
                         @csrf
                         <button type="submit" class="w-100 btn btn-outline-primary btn-sm rounded-0">Like</button>
                    </form>
               </div>

          =like a post
          =>phpmyadmin 
          "post_like"
               id   post_id   user_id   created_at     updated_at
               1    15        1         NULL           NULL


          =>Filling created and updated columns 
               =In User.php 
                    public function likes(){
                         return $this->belongsToMany(Post::class,"post_like")->withTimestamps();
                    }
               =phpmyadmin
                    "post_like"
                    id   post_id   user_id   created_at               updated_at
                    1    15        1         NULL                     NULL
                    2    15        1         2024-05-09 14:24:32      2024-05-09 14:24:32

          =>Prevent Double Like 
               =In User.php 
                    public function checkpostlike($postid){
                         return $this->likes()->where("post_id",$postid)->exists();
                    }
               =In posts > show.blade.php 
               <div class="w-100 d-flex flex-row justify-content-between mb-3">
                    @if(!$post->checkenroll($userdata->id))
                         <a href="#createmodal" class="w-100 btn btn-primary btn-sm rounded-0" data-bs-toggle="modal">Enroll</a>
                    @endif; 

                    @if($userdata->checkpostlike($post->id))
                         <form class="w-100" action="{{route('posts.unlike',$post->id)}}" method="POST">
                              @csrf
                              <button type="submit" class="w-100 btn btn-outline-primary btn-sm rounded-0">Unlike</button>
                         </form>
                    @else 
                         <form class="w-100" action="{{route('posts.like',$post->id)}}" method="POST">
                              @csrf
                              <button type="submit" class="w-100 btn btn-outline-primary btn-sm rounded-0">Like</button>
                         </form>
                    @endif;
                    
               </div>
                    
          =>Unlike Post 
               =In PostsLikeController.php 
                    public function unlike(Post $post){
                         $user = auth()->user();
                         $user->likes()->detach($post);

                         session()->flash("success","You unliked this post");
                         return redirect()->back();
                    }

               =like another post 
               =phpmyadmin
                    "post_like"
                    id   post_id   user_id   created_at               updated_at
                    1    15        1         NULL                     NULL
                    2    15        1         2024-05-09 14:24:32      2024-05-09 14:24:32
                    3    1         1         2024-05-09 14:24:32      2024-05-09 14:24:32

               -when unlike single like post it will only delete one row.
               =phpmyadmin
                    "post_like"
                    id   post_id   user_id   created_at               updated_at
                    1    15        1         NULL                     NULL
                    2    15        1         2024-05-09 14:24:32      2024-05-09 14:24:32

               -when unlike multiple likes post it will delete all row related to that post.

          =>Like/Unlike Testing with two user 
               =admin account
                    like a post 
               =aung aung account
                    like a post 
               
               =phpmyadmin
                    "post_like"
                    id   post_id   user_id   created_at               updated_at
                    4    1         1         2024-05-09 14:24:32      2024-05-09 14:24:32                   
                    5    1         20        2024-05-09 14:24:32      2024-05-09 14:24:32

               =admin account
                    unlike a post
               =phpmyadmin
                    "post_like"
                    id   post_id   user_id   created_at               updated_at
                    5    1         20        2024-05-09 14:24:32      2024-05-09 14:24:32     

               =aung aung account

          =>Counting Likes 
               =In Post.php 
                    public function likes(){
                         return $this->belongsToMany(User::class,"post_like");
                    }
                    *Many to Many relationship between Users and Posts.
                    *it don't need ->withTimestamps() fun. It won't insert like data.


               =In posts > show.blade.php
                    <div class="mb-5">
                         <p class="text-small text-muted text-uppercase mb-2">Other</p>
                         <div class="row g-0 mb-2">
                              <div class="col-auto me-2">
                                   <i class="fas fa-thumbs-up"></i>
                              </div>
                              <div class="col">{{ $post->likes()->count() }}</div>
                         </div>

               =>Counting Likes Testing with two users 
                    =admin Acc 
                         =like a post 
                         =view likes = 1
                    =aung aung Acc 
                         =view likes = 1
                         =like same post 
                         =view likes = 2

          *Like/Unlike feature has weakness of reloading because of php server language. 
          Others Plugins can be used to resolve this issues. Example Laravel plugin "Live Wire".    

     =>Follow Feature 
          =Migration 
               
               php artisan make:migration create_follower_user_table --create
               =In create_follower_user_table.php
                    up() 
                         $table->id();
                         $table->foreignId("user_id")->constrained()->onUpdate("cascade")->onDelete("cascade");
                         $table->foreignId("follower_id")->constrained(
                              table:"users",indexName:"users_follower_id"
                         )->onUpdate("cascade")->onDelete("cascade");
                         $table->timestamps();
               =php artisan migrate:status 
               =php artian migrate 
          
          =php artisan make:controller UsersFollowerController 
          =In UsersFollowerController.php  
               *use App\Models\User;
               public function follow(User $user){

               }

               public function unfollow(User $user){
                    
               }
          
          =In Web.php 
               *use App\Http\Controllers\UsersFollowerController;
               Route::post("users/{user}/follow",[UsersFollowerController::class,"follow"])->name("users.follow");
               Route::post("users/{user}/unfollow",[UsersFollowerController::class,"unfollow"])->name("users.unfollow");

          =In User.php 
               public function followings(){
                    return $this->belongsToMany(User::class,"follower_user")->withTimestamps();
               }
               -Establish many to many relationship between single user table.
          
          =In UsersFollowerController.php 
               public function follow(User $user){
                    $curloginuser = Auth::user();
                    $curloginuser->followings()->attach($user);

                    session()->flash("success","Followed Successfully");
                    return redirect()->back();
               }

               -Insert the user who follow another user to "follower_user" table

          =In students > show.blade.php 
               <form class="w-100" action="{{ route('users.follow',$student->user_id) }}" method="POST">
                    @csrf
                    <button type="submit" class="w-100 btn btn-outline-primary btn-sm rounded-0">Follow</button>
               </form>

          =follow a user 
               *error 
               SQLSTATE[HY000]: General error: 1364 Field 'follower_id' doesn't have a default value
               INSERT INTO `follower_user` (`created_at`, `updated_at`, `user_id`) VALUES (2024-05-10 13:46:56, 2024-05-10 13:46:56, 1)

          =>Adhering to naming convention
               =In User.php 
                    public function followings(){
                                                                                // fk           // rk (relative key)
                         return $this->belongsToMany(User::class,"follower_user","follower_id","user_id")->withTimestamps();
                    }

                    =Think by controller follow() func 
                         $curloginuser->followings()->attach($user);
                    *user1 <-> follower_id 
                    *user20 <-> user_id
               =phpmyadmin 
                    id   user_id   follower_id    created_at               updated_at
	               1    20        1              2024-05-10 13:53:17      2024-05-10 13:53:17

               =Misconcept XXXX
                    =In User.php 
                    public function followings(){
                         return $this->belongsToMany(User::class,"follower_user","user_id","follower_id")->withTimestamps();
                    }

                    =phpmyadmin 
                    id   user_id   follower_id    created_at               updated_at
	               1    20        1              2024-05-10 13:53:17      2024-05-10 13:53:17
	               1    1         20             2024-05-10 13:53:17      2024-05-10 13:53:17

                    follower_id = me
                    user_id = other 

                    userA <-> userB 
                    userB:    i have 4k followers.     
                    userA:    i have 8 followings.

          =>Prevent Multiple times follow 
               =In User.php 
                    public function checkuserfollowing($followingid){
                         return $this->followings()->where("user_id",$followingid)->exists();
                    
                         // Note:: user_id mean = Oher Person 
                         // Note:: follower_id mean = I
                         // Note:: $followingid mean = Other Person
                    }

               =In students > show.blade.php 
                    @if($userdata->checkuserfollowing($student->user_id))
                         <form class="w-100" action="{{ route('users.unfollow',$student->user_id) }}" method="POST">
                              @csrf
                              <button type="submit" class="w-100 btn btn-outline-primary btn-sm rounded-0">Unfollow</button>
                         </form>
                    @else 
                         <form class="w-100" action="{{ route('users.follow',$student->user_id) }}" method="POST">
                              @csrf
                              <button type="submit" class="w-100 btn btn-outline-primary btn-sm rounded-0">Follow</button>
                         </form>
                    @endif       

               =Noting 
                    =create_follower_user_table.php 
                         $table->foreignId("user_id")->constrained()->onUpdate("cascade")->onDelete("cascade")->comment("Other Person");
                         $table->foreignId("follower_id")->constrained(
                              table:"users",indexName:"users_follower_id"
                         )->onUpdate("cascade")->onDelete("cascade")->comment("I");   

                    php artisan migrate:rollback
                    php artisan migrate

          =>Unfollow User 
               =In UsersFollowerController.php 
                    public function unfollow(User $user){
                         $curloginuser = auth()->user();
                         $curloginuser->followings()->detach($user);

                         session()->flash("success","Unfollowed Successfully");
                         return redirect()->back();
                    }

          =Follow/Unfollow tesging
               =follow other users
               =phpmyadmin 
                    id   user_id   follower_id    created_at               updated_at
	               1    20        1              2024-05-10 13:53:17      2024-05-10 13:53:17
	               2    30        1              2024-05-10 13:53:17      2024-05-10 13:53:17
	               3    40        1              2024-05-10 13:53:17      2024-05-10 13:53:17

               =unfollow a user
               =phpmyadmin 
                    id   user_id   follower_id    created_at               updated_at
	               1    20        1              2024-05-10 13:53:17      2024-05-10 13:53:17
	               2    30        1              2024-05-10 13:53:17      2024-05-10 13:53:17

          =>Prevent Following myself
               =In students > show.blade.php 
                    @if($userdata->id !== $student->user_id)
                         @if($userdata->checkuserfollowing($student->user_id))
                              <form class="w-100" action="{{ route('users.unfollow',$student->user_id) }}" method="POST">
                                   @csrf
                                   <button type="submit" class="w-100 btn btn-outline-primary btn-sm rounded-0">Unfollow</button>
                              </form>
                         @else 
                              <form class="w-100" action="{{ route('users.follow',$student->user_id) }}" method="POST">
                                   @csrf
                                   <button type="submit" class="w-100 btn btn-outline-primary btn-sm rounded-0">Follow</button>
                              </form>
                         @endif
                    @endif 

               =Follow button appear for other users 
               =Follow button don't display for myself 

     =>API Delete 
          Studied  "API Switch to change on, off in UI" in previous lessions
          
          =In Web.php 
               Route::resource("types",TypesController::class)->except("destroy");
               Route::get("/typesstatus",[TypesController::class,"typestatus"]);
          
          php artisan route:list
               GET|HEAD        types ......... types.index › TypesController@index  
               POST            types ......... types.store › TypesController@store  
               GET|HEAD        types/create types.create › TypesController@create   
               GET|HEAD        types/{type} .... types.show › TypesController@show  
               PUT|PATCH       types/{type} types.update › TypesController@update   
               GET|HEAD        types/{type}/edit types.edit › TypesController@edit  
               GET|HEAD        typesstatus ............ TypesController@typestatus  
          *There is no "types.destroy" route.

          =In Web.php 
               Route::resource("types",TypesController::class)->except("destroy");
               Route::get("/typesstatus",[TypesController::class,"typestatus"]);
               Route::get("/typesdelete",[TypesController::class,"destroy"])->name("types.delete");

          php artisan route:list
               GET|HEAD        types ......... types.index › TypesController@index
               POST            types ......... types.store › TypesController@store  
               GET|HEAD        types/create types.create › TypesController@create   
               GET|HEAD        types/{type} .... types.show › TypesController@show  
               PUT|PATCH       types/{type} types.update › TypesController@update   
               GET|HEAD        types/{type}/edit types.edit › TypesController@edit  
               GET|HEAD        typesdelete types.delete › TypesController@destroy   
               GET|HEAD        typesstatus ............ TypesController@typestatus  
          *"type.delete" route is registered for api delete.

          =In TypesController.php 
               // public function destroy(string $id)
               // {
               //     $type = Type::findOrFail($id);
               //     $type->delete();

               //     session()->flash("info","Delete Successfully");
               //     return redirect()->back();
               // }

               public function destroy(Request $request)
               {
                    $type = Type::findOrFail($request["id"]);
                    $type->delete();

                    session()->flash("info","Delete Successfully");
                    return response()->json(["success"=>"Delete Successfully."]);
               }

          =In types > index.blade.php 
               <td>
                    <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$type->id}}" data-name="{{$type->name}}" data-status="{{$type->status_id}}"><i class="fas fa-pen"></i></a>
                    <!-- <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a> -->
                    <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}" data-id="{{$type->id}}"><i class="fas fa-trash-alt"></i></a>
               </td>
               {{-- 
               <form id="formdelete-{{ $idx }}" class="" action="{{route('types.destroy',$type->id)}}" method="POST">
                    @csrf
                    @method("DELETE")
               </form> --}}
               ....

               // Start Delete Item
               // $(".delete-btns").click(function(){
               //      // console.log('hay');
          
               //      var getidx = $(this).data("idx");
               //      // console.log(getidx);

               //      if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
               //           $('#formdelete-'+getidx).submit();
               //           return true;
               //      }else{
               //           false;
               //      }
               // });

               // by ajax 
               $(".delete-btns").click(function(){
                    const getidx = $(this).attr("data-idx");
                    const getid = $(this).data("id");
                    // console.log(getid);
                    
                    if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                         $.ajax({
                              url:"typesdelete",
                              type:"GET",
                              dataType:"json",
                              data:{"id":getid},
                              success:function(response){
                                   window.alert(response.success);
                              }
                         });
                         return true;
                    }else{
                         return false;
                    }
               });


               // End Delete Item

          =delete a type 
          =Chrome Inspect > Console Tab
               Delete Successfully.
          *Only problem is that tyoe information still exist at UI and deleted in next reload.
               
          =>UI Delete 
               =In types > index.blade.php 
                    if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                         // ui remove
                         $(this).parent().parent().remove();
                         //       <td>       <tr>


               *Inrelevant types information in UI is cleared.
               *Flash message also display at next reload. It no longer need to display for api delete.

     =>Payment
          php artisan make:controller PaymentmethodsController

          =Migration 
               php artisan make:model Paymentmethod -m

               =In create_paymentmethods_table.php 
                    $table->string("image")->nullable();
                    $table->string("name")->unique();
                    $table->string("slug");
                    $table->unsignedBigInteger("status_id");
                    $table->unsignedBigInteger("user_id");
               
               php artisan migrate:status 
               php artisan migrate

          =In Model (Paymentmethod.php)
               protected $table = "paymentmethods";
               protected $primaryKey = "id";
               protected $fillable = [
                    "image",
                    "name",
                    "slug",
                    "status_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }

          =In Web.php 
               *use App\Http\Controllers\PaymentmethodsController;

               Route::resource("paymentmethods",PaymentmethodsController::class);
          =In PaymentmethodsController.php 
               *copy from TypesController

               public function index()
               {
                    $paymentmethods = Paymentmethod::all();
                    $statuses = Status::whereIn("id",[3,4])->get();
                    return view("paymentmethods.index",compact("paymentmethods","statuses"));
               }


               public function create()
               {
                    $statuses = Status::whereIn("id",[3,4])->get();
                    return view("paymentmethods.create",compact("statuses"));
               }


               public function store(Request $request)
               {
                    $this->validate($request,[
                         "name" => "required|max:50|unique:paymentmethods",
                         "status_id" => "required|in:3,4",
                    ]);

                    $user = Auth::user();
                    $user_id = $user->id;

                    $paymentmethod = new Paymentmethod();
                    $paymentmethod->name = $request["name"];
                    $paymentmethod->slug = Str::slug($request["name"]);
                    $paymentmethod->status_id = $request["status_id"];
                    $paymentmethod->user_id = $user_id;
                    $paymentmethod->save();
                    return redirect(route("paymentmethods.index"));
               }

               public function update(Request $request, string $id)
               {
                    $this->validate($request,[
                         "name" => ["required","max:50","unique:paymentmethods,name,".$id],
                         "status_id" => ["required","in:3,4"],
                    ]);

                    $user = Auth::user();
                    $user_id = $user["id"];

                    $paymentmethod = Paymentmethod::findOrFail($id);
                    $paymentmethod->name = $request["name"];
                    $paymentmethod->slug = Str::slug($request["name"]);
                    $paymentmethod->status_id = $request["status_id"];
                    $paymentmethod->user_id = $user_id;
                    $paymentmethod->save();
                    return redirect(route("paymentmethods.index"));
               }

               public function destroy(Request $request)
               {
                    $paymentmethod = Paymentmethod::findOrFail($request["id"]);
                    $paymentmethod->delete();

                    // session()->flash("info","Delete Successfully");
                    return response()->json(["success"=>"Delete Successfully."]);
               }

               public function typestatus(Request $request){
                    $paymentmethod = Paymentmethod::findOrFail($request["id"]);
                    $paymentmethod->status_id = $request["status_id"];
                    $paymentmethod->save();

                    return response()->json(["success"=>"Status Change Successfully"]);
               }

          "Paymentmethods"
               cash
               bank transfer
               mpu 
               visa
               master
               kpay 
               wave 
               truemoney

          =CRUD Testing 
               Edit wave to cbpay 
               Delete truemoney
                    *It only deleted in UI. Because the route is not registered.
          
          =>API Delete (Default Route)
               -the sperate route method requires extra routes.
                    ->except("destroy");
                    Route::get("/typesdelete"

               -This lession will use laravel default route
                    php artisan route:list   
                         GET|HEAD        paymentmethods ............................................ paymentmethods.index › PaymentmethodsController@index  
                         POST            paymentmethods ............................................ paymentmethods.store › PaymentmethodsController@store  
                         GET|HEAD        paymentmethods/create ................................... paymentmethods.create › PaymentmethodsController@create  
                         GET|HEAD        paymentmethods/{paymentmethod} .............................. paymentmethods.show › PaymentmethodsController@show
                         PUT|PATCH       paymentmethods/{paymentmethod} .......................... paymentmethods.update › PaymentmethodsController@update  
                         DELETE          paymentmethods/{paymentmethod} ........................ paymentmethods.destroy › PaymentmethodsController@destroy  
                         GET|HEAD        paymentmethods/{paymentmethod}/edit ......................... paymentmethods.edit › PaymentmethodsController@edit  

                    *default route use DELETE method
                    DELETE    paymentmethods/{paymentmethod}     paymentmethods.destroy

               
               =In PaymentmethodsController.php 
                    *use Exception;
                    public function destroy(Paymentmethod $paymentmethod)
                    {
                         try{
                              if($paymentmethod){
                                   $paymentmethod->delete();
                                   return response()->json(["status"=>"success","data"=>$paymentmethod,"message"=>"Delete Successfully"]);
                              }
                              return response()->json(["status"=>"failed","message"=>"No Data Found"]);
                         }catch(Exception $e){
                              Log::error($e->getmessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    }
                    *Paymentmethod information is obtained from method parameter. 
                    *It is called with ajax. try catch must be used.
                    *Alghough the id don't have a chance to unmatch (only the available is shown on the interface),
                         whatever it is protected by checking if condition. 

                         Id can wrong when js function mistakenly pass getidx.
                         It is deleted in database, and delete again from UI.

               =In paymentmethods > index.blade.php 
                    ....
                    @foreach($paymentmethods as $idx=>$paymentmethod)
                         <tr id="delete_{{$paymentmethod->id}}">
                    ....
                    // by ajax 
                    // Using default laravel route
                    $(".delete-btns").click(function(){
                         const getidx = $(this).attr("data-idx");
                         const getid = $(this).data("id");
                         // console.log(getid);
                         
                         if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                              // ui remove
                         
                              // data remove 
                              $.ajax({
                                   url:`paymentmethods/${getid}`,
                                   type:"DELETE",
                                   dataType:"json",
                                   success:function(response){
                                        if(response && response.status === "success"){
                                             const getdata = response.data;
                                             $(`#delete_${getdata.id}`).remove();
                                        }
                                   }
                              });
                              return true;
                         }else{
                              return false;
                         }
                    });

                    -ajax's data property isn't required.It will process with route id.
                    -data is passed to inform the deleted data and clear the irrelevant data in UI.

                    =delet a paymentmethod 
                    *Error
                    DELETE http://127.0.0.1:8000/paymentmethods/7 419 (unknown status)

                    =Chrome Inspect > Network Tab
                         Name      Status    Type      Initiator                Size      Time      Waterfall
                         7	     419	     xhr	     jquery-3.6.3.min.js:2	14.0 kB	461 ms
                    *Header Authenticate Error 

                    =>Solving Error
                         =>Sending _token data
                              =>In paymentmethods > index.blade.php 
                                   // data remove 
                                   $.ajax({
                                        url:`paymentmethods/${getid}`,
                                        type:"DELETE",
                                        dataType:"json",
                                        data:{_token:"{{csrf_token()}}"},
                                        success:function(response){
                                             if(response && response.status === "success"){
                                                  const getdata = response.data;
                                                  $(`#delete_${getdata.id}`).remove();
                                             }
                                        }
                                   });

                                   -laravel check token code in background. Ajax must send token information.

                         =>Ajax Header 
                              =>In layouts > adminheader.blade.php 
                                   <!-- Application Name -->
                                   <title>{{ config('app.name') }}</title>

                                   <meta name="csrf-token" content="{{ csrf_token() }}"/>
                              
                              =>In paymentmethods > index.blade.php 
                                   <script type="text/javascript">
          
                                   // Start Passing Header Token
                                   $.ajaxSetup({
                                        headers:{
                                             "X-CSRF-TOKEN": $("meta[name='csrf-token']").attr("content")
                                        }
                                   });
                                   // End Passing Header Token       
                                   ....
                                   // data remove 
                                   $.ajax({
                                        url:`paymentmethods/${getid}`,
                                        type:"DELETE",
                                        dataType:"json",
                                        // data:{_token:"{{csrf_token()}}"},
                                        success:function(response){
                                             if(response && response.status === "success"){
                                                  const getdata = response.data;
                                                  $(`#delete_${getdata.id}`).remove();
                                             }
                                        }
                                   });

                                   *Sending Required Technical Info With Header 
                                   *Get meta element with Attribute Selector and attain its value
                                   *can't define id and class to meta tag, id and class can only defien in body tag
                              
                    =>Meta Tag 
                         =layouts > adminheader.blade.php 
                              <!-- Application Name -->
                              <title>{{ config('app.name') }}</title>

                              <meta charseet="utf-8" />

                         *to display myanmar font and unicode font correctly

          =>Ajax Only Status Change 
               =>In Web.php 
                    Route::resource("paymentmethods",PaymentmethodsController::class);
                    Route::get("/paymentmethodsstatus",[PaymentmethodsController::class,"typestatus"]);

               =>In paymentmethods > index.blade.php 
                    //Start change-btn
                    $(".change-btn").change(function(){
                         var getid = $(this).data("id");
                         // console.log(getid); // 1 2

                         var setstatus = $(this).prop("checked") === true ? 3 : 4;
                         // console.log(setstatus); // 3 4

                         $.ajax({
                              url:"paymentmethodsstatus",
                              type:"GET",
                              dataType:"json",
                              data:{"id":getid,"status_id":setstatus},
                              success:function(response){
                                   console.log(response); // {success: 'Status Change Successfully'}
                                   console.log(response.success); // Status Change Successfully
                              }
                         });
                    });
                    // End change btn   

          =>Ajax Edit 
               =In PaymentmethodsController.php 
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => ["required","max:50","unique:paymentmethods,name,".$id],
                              "status_id" => ["required","in:3,4"],
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         try{
                              $paymentmethod = Paymentmethod::findOrFail($id);
                              $paymentmethod->name = $request["name"];
                              $paymentmethod->slug = Str::slug($request["name"]);
                              $paymentmethod->status_id = $request["status_id"];
                              $paymentmethod->user_id = $user_id;
                              $paymentmethod->save();

                              if($paymentmethod){
                                   return response()->json(["status"=>"success","data"=>$paymentmethod]);
                              }
                              return response()->json(["status"=>"failed","data"=>"Failed to update Payment Method"]);
                         }catch(Exception $e){
                              Log:error($e->getMessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    }
               
               =In paymentmethods > index.blade.php 
                    ....
                    <td>
                         <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$paymentmethod->id}}" data-name="{{$paymentmethod->name}}" data-status="{{$paymentmethod->status_id}}"><i class="fas fa-pen"></i></a>
                         <!-- <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a> -->
                         <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}" data-id="{{$paymentmethod->id}}"><i class="fas fa-trash-alt"></i></a>
                    </td>   
                    ....
                    <!-- start edit modal -->
                         <div id="editmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Edit Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="">
                                                  <div class="row align-items-end">
                                                       <div class="col-md-7">
                                                            <label for="editname">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="name" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                                       </div>
                                                       
                                                       <div class="col-md-3 form-group">
                                                            <label for="editstatus_id">Status</label>
                                                            <select name="status_id" id="editstatus_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($statuses as $status)
                                                                      <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>
                                                       
                              
                                                       <div class="col-md-2">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                    <!-- end edit modal -->
                    .... 
                    // Start Passing Header Token
                    $.ajaxSetup({
                         headers:{
                              "X-CSRF-TOKEN": $("meta[name='csrf-token']").attr("content")
                         }
                    });
                    // End Passing Header Token

                    $(document).ready(function(){
                         // Start Edit Form
                         $(document).on("click",".editform",function(e){
                              
                              $("#editname").val($(this).attr("data-name"));
                              $("#editstatus_id").val($(this).data("status"));
                              
                              const getid = $(this).attr("data-id");
                              $("#formaction").attr("action",`/paymentmethods/${getid}`);
                              console.log(getid);
                         });

                         $("#formaction").submit(function(e){
                              e.preventDefault();

                              const getid = 1;
                              console.log(getid);

                              $.ajax({
                                   url:`paymentmethods/${getid}`,
                                   type:"PUT",
                                   dataType:"json",
                                   data:$("#formaction"),
                                   success:function(response){
                                        console.log(data);
                                   }
                              });

                              console.log("hello");
                         });
                         // End Edit Form

                    *Edit form doesn't need action and method.
                    *Error(PUT http://127.0.0.1:8000/paymentmethods/1 422 (Unprocessable Content))

                    =>In paymentmethods > index.blade.php 
                         // Start Edit Form
                         $(document).on("click",".editform",function(e){
                              
                              $("#editname").val($(this).attr("data-name"));
                              $("#editstatus_id").val($(this).data("status"));
                              
                              const getid = $(this).attr("data-id");
                              $("#formaction").attr("data-id",getid); // send id to formaction for request id from submit action
                              // console.log(getid);
                         });

                         $("#formaction").submit(function(e){
                              e.preventDefault();

                              const getid = $(this).attr("data-id");
                              console.log(getid);

                              $.ajax({
                                   url:`paymentmethods/${getid}`,
                                   type:"PUT",
                                   dataType:"json",
                                   data:$("#formaction").serialize(), // name=&status_id=4
                                   success:function(response){
                                        // console.log(this.data);  //name=kpay&status_id=3
                                        // console.log(response);   // paymentmethods:525 {status: 'success', data: {…}}
                                        console.log(response.status);
                                        $("#editmodal").modal("hide");

                                        // window.location.reload(); // temp reload

                                   }
                              });

                         });
                         // End Edit Form

                         *Transfering payment id to Edit form as attribute when cliking edit button. Use id data and submit ajax request. 
                         *$(formelment).serialize() get all form data. Not individual data with objects in previous status change.
                         *this.data is serialized form data not response data.
                         *UI remain irrelevant data because it is retrieved with php laravel by looping. After next reload, it is consistent.
                         *Upon the sucessful update, Edit Modal is hidden.
                         *Since avoiding reloading page, do not use js reload() 

                    =>Getting id for route 
                         =Way 2
                         =In paymentmethods > index.blade.php
                              <form id="formaction" action="" method="">
                                   <div class="row align-items-end">
                                        <div class="col-md-7">
                                             <label for="editname">Name <span class="text-danger">*</span></label>
                                             <input type="text" name="name" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter Status Name" value="{{ old('name') }}"/>
                                        </div>
                                        ....
                                        <input type="number" name="id" id="editid" hidden />
                                        ....
                                         // Start Edit Form
                                        $(document).on("click",".editform",function(e){
                                             
                                             $("#editname").val($(this).attr("data-name"));
                                             $("#editstatus_id").val($(this).data("status"));

                                             $("#editid").val($(this).attr("data-id"));
                                        });


                                        $("#formaction").submit(function(e){
                                             e.preventDefault();

                                             const getid = $("#editid").val();
                                             console.log(getid);

                                             $.ajax({
                                                  url:`paymentmethods/${getid}`,
                                                  type:"PUT",
                                                  dataType:"json",
                                                  data:$("#formaction").serialize(), // name=&status_id=4
                                                  success:function(response){
                                                       // console.log(this.data);  //name=kpay&status_id=3
                                                       // console.log(response);   // paymentmethods:525 {status: 'success', data: {…}}
                                                       console.log(response.status);
                                                       $("#editmodal").modal("hide");
                                                  }
                                             });

                                        });

          =>Ajax Quick Action 
               =In enrolls > index.blade.php 
                    <td>
                         <a href="javascript:void(0);" class="text-primary me-2 quickform" data-bs-toggle="modal" data-bs-target="#quickmodal" data-id="{{$enroll->id}}" data-stage="{{$enroll->stage_id}}" data-remark="{{$enroll->remark}}"><i class="fas fa-user-check"></i></a>
                         <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$enroll->id}}" data-stage_id="{{$enroll->stage_id}}"><i class="fas fa-pen"></i></a>
                    </td>
                    ....
                    <!-- START MODAL AREA -->
                         <!-- start quick modal -->
                         <div id="quickmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Quick Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="quickformaction" action="" method="">
                                        
                                                  <div class="row align-items-end">
                                                       
                                                       <div class="col-md-3 form-group">
                                                            <label for="editstage_id">Stage <span class="text-danger">*</span></label>
                                                            <select name="editstage_id" id="editstage_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($stages as $stage)
                                                                      <option value="{{$stage->id}}">{{$stage->name}}</option> 
                                                                 @endforeach     
                                                            </select>
                                                       </div>

                                                       <div class="col-md-7 form-group">
                                                            <label for="editremark">Remark <span class="text-danger">*</span></label>
                                                            <input type="text" name="editremark" id="editremark" class="form-control form-control-sm rounded-0"/>
                                                       </div>
                                                       
                              
                                                       <div class="col-md-2">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- end quick modal -->
                    <!-- END MODAL AREA -->
                    ....

                    $.ajaxSetup({
                         headers:{
                              "X-CSRF-TOKEN" : $("meta[name='csrf-token']").attr("content")
                         }
                    });
                    $(document).ready(function(){

                         // Start Edit Form
                         $(document).on("click",".quickform",function(){
                              $("#editstage_id").val($(this).attr("data-stage"));
                              $("#editremark").val($(this).attr("data-remark"));

                              const getid = $(this).data("id");
                              // console.log(getid);

                              $("#quickformaction").attr("data-id",getid);
                         });

                         $("#quickformaction").submit(function(e){
                              e.preventDefault();

                              const getid = $(this).attr("data-id");

                              $.ajax({
                                   url:`enrolls/${getid}`,
                                   type:"PUT",
                                   dataType:"json",
                                   data: $(this).serialize(),
                                   success:function(response){
                                        if(response && response.status === "success"){
                                             console.log(response);
                                             $("#quickmodal").modal("hide");
                                        }
                                   }
                              });
                         });

                         // End Edit Form

               *Transfering enroll id to Quick form as attribute when cliking quick action button. Use id data and submit ajax request. 
               *Chrome's inxpect Element Tab
                    <form id="quickformaction" action="" method="" data-id="11">
               *dynamically change id

               *Admin can write remark for the enrollment and change enroll stage.

               =In EnrollsController.php 
                    public function update(Request $request, string $id)
                    {

                         $user = Auth::user();
                         $user_id = $user->id;

                         try{
                              $enroll = Enroll::findOrFail($id);
                              $enroll->stage_id = $request["editstage_id"];
                              $enroll->remark = $request["editremark"];
                              $enroll->user_id = $user_id;
                              $enroll->save();   
                              if($enroll){
                                   return response()->json(["status"=>"success","data"=>$enroll]);
                              }

                              return response()->json(["status"=>"failed","message"=>"Failed to update"]);
                         }catch(Exception $e){
                              Log::error($e->getMessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    }

          =>Ajax Create
               =In payments > index.blade.php 
                    <form id="createform" action="" method="">

                         <div class="row align-items-end">
                              <div class="col-md-4">
                                   <label for="name">Name <span class="text-danger">*</span></label>
                                   @error("name")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Type Name" value="{{ old('name') }}"/>
                              </div>

                              <div class="col-md-4">
                                   <label for="status_id">Status</label>
                                   @error("status_id")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                        @foreach($statuses as $status)
                                             <option value="{{$status['id']}}">{{$status['name']}}</option>
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-4">
                                   <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                   <button type="submit" id="create-btn" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                              </div>
                         </div>
                    </form>
                    ....
                    $(document).ready(function(){

                    // Start Passing Header Token
                    $.ajaxSetup({
                         headers:{
                              "X-CSRF-TOKEN": $("meta[name='csrf-token']").attr("content")
                         }
                    });
                    // End Passing Header Token

                    // Start Create Form
                    $("#create-btn").click(function(e){
                         e.preventDefault();
                         
                         $.ajax({
                              url:"{{route('paymentmethods.store')}}",
                              type:"POST",
                              dataType:"json",
                              // data:$("#createform").serialize(),
                              data:$("#createform").serializeArray(),
                              success:function(response){
                                   console.log(response);
                                   console.log(response.status);
                              },
                              error:function(response){
                                   console.log("Error:",response);
                              }
                         })
                    });
                    // End Create Form

                    *result (response)
                         {status: 'success', data: {…}}
                         data: {name: 'truemoney', slug: 'truemoney', status_id: '3', user_id: 1, updated_at: '2024-05-16T12:03:52.000000Z', …}
                         status: "success"
                         [[Prototype]]: Object

                         *response.data can be used in prompting alert box when the item is created.

               =In PaymentmethodsController.php 
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|max:50|unique:paymentmethods",
                              "status_id" => "required|in:3,4",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         try{
                              $paymentmethod = new Paymentmethod();
                              $paymentmethod->name = $request["name"];
                              $paymentmethod->slug = Str::slug($request["name"]);
                              $paymentmethod->status_id = $request["status_id"];
                              $paymentmethod->user_id = $user_id;
                              $paymentmethod->save();

                              if($paymentmethod){
                                   return response()->json(["status"=>"success","data"=>$paymentmethod]);
                              }
                         }catch(Exception $e){
                              Log::error($e->getMessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }

                         
                    }

               *New item is not instantly appear on UI.
               *To see the added item, reload the web page.

               =>Reflecting created data 
                    =In  payments > index.blade.php 
                         $.ajax({
                              url:"{{route('paymentmethods.store')}}",
                              type:"POST",
                              dataType:"json",
                              // data:$("#createform").serialize(),
                              data:$("#createform").serializeArray(),
                              success:function(response){
                                   console.log(response);
                                   // console.log(response.status);
                                   // console.log(this.data);

                                   const data = response.data;
                                   $("#mytable").prepend(
                                        `
                                        <tr id="${'delete_'+data.id}">
                                             <td>${data.id}</td>
                                             <td>${data.name}</td>
                                             <td>
                                                  <div class="form-checkbox form-switch">
                                                       <input type="checkbox" class="form-check-input change-btn" ${data.status_id === 3 ? "checked" : ""} data-id="${data.id}" />
                                                  </div>
                                             </td>
                                             <td>${data.user_id}</td>
                                             <td>${data.created_at}</td>
                                             <td>${data.updated_at}</td>
                                             <td>
                                                  <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="${data.id}" data-name="${data.name}" data-status="${data.status_id}"><i class="fas fa-pen"></i></a>
                                                  <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                             </td>
                                        </tr>
                                        `
                                   );
                              },
                              error:function(response){
                                   console.log("Error:",response);
                              }
                         })

                    *result (UI)
                    Number    Name      Status    By        Created At                    Updaed At     
                    18	     1005	               1	     2024-05-17T07:17:24.000000Z	2024-05-17T07:17:24.000000Z
                    
                    *New added item instantly appear on UI but there are some weak points.
                    *It will display table id not index number. It is complicated to implement index number with php code and js code.
                    *It display user as integer number. Created/Updated date and time are not formated. 

     =>Social Application 
          =Migration
               php artisan make:model Socialapplication -m

               =In create_socialapplications_table.php
                    up()
                         $table->string("name")->unique();
                         $table->string("slug");
                         $table->unsignedBigInteger("status_id");
                         $table->unsignedBigInteger("user_id");

               php artian migrate:status 
               php artisan migrate

          =In Socialapplication.php
               protected $table = "socialapplications";
               protected $primaryKey = "id";
               protected $fillable = [
                    "name",
                    "slug",
                    "status_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }

          php artisan make:controller SocialapplicationsController
          
          =In web.php
               *use App\Http\Controllers\SocialapplicationsController;
               Route::resource("socialapplications",SocialapplicationsController::class);
               Route::get("/socialapplicationsstatus",[SocialapplicationsController::class,"typestatus"]);
               
          =In SocialapplicationsController.php 
               <?php

               namespace App\Http\Controllers;

               use Illuminate\Http\Request;
               use App\Models\Status;
               use App\Models\Socialapplication;
               use Illuminate\Support\Facades\Auth;
               use Illuminate\Support\Str;
               use Illuminate\Support\Facades\Log;
               use Exception;

               class SocialapplicationsController extends Controller
               {
                    public function index()
                    {
                         $socialapplications = Socialapplication::all();
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("socialapplications.index",compact("socialapplications","statuses"));
                    }


                    public function create()
                    {
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("socialapplications.create",compact("statuses"));
                    }


                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|max:50|unique:socialapplications",
                              "status_id" => "required|in:3,4",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         try{
                              $socialapplication = new Socialapplication();
                              $socialapplication->name = $request["name"];
                              $socialapplication->slug = Str::slug($request["name"]);
                              $socialapplication->status_id = $request["status_id"];
                              $socialapplication->user_id = $user_id;
                              $socialapplication->save();

                              if($socialapplication){
                                   return response()->json(["status"=>"success","data"=>$socialapplication]);
                              }
                         }catch(Exception $e){
                              Log::error($e->getMessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }

                         
                    }

                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => ["required","max:50","unique:socialapplications,name,".$id],
                              "status_id" => ["required","in:3,4"],
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         try{
                              $socialapplication = Socialapplication::findOrFail($id);
                              $socialapplication->name = $request["name"];
                              $socialapplication->slug = Str::slug($request["name"]);
                              $socialapplication->status_id = $request["status_id"];
                              $socialapplication->user_id = $user_id;
                              $socialapplication->save();

                              if($socialapplication){
                                   return response()->json(["status"=>"success","data"=>$socialapplication]);
                              }
                              return response()->json(["status"=>"failed","data"=>"Failed to update Payment Method"]);
                         }catch(Exception $e){
                              Log:error($e->getMessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                         
                    }

                    public function destroy(Socialapplication $socialapplication)
                    {
                         try{
                              if($socialapplication){
                                   $socialapplication->delete();
                                   return response()->json(["status"=>"success","data"=>$socialapplication,"message"=>"Delete Successfully"]);
                              }
                              return response()->json(["status"=>"failed","message"=>"No Data Found"]);
                         }catch(Exception $e){
                              Log::error($e->getmessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    }

                    public function typestatus(Request $request){
                         $socialapplication = Socialapplication::findOrFail($request["id"]);
                         $socialapplication->status_id = $request["status_id"];
                         $socialapplication->save();

                         return response()->json(["success"=>"Status Change Successfully"]);
                    }
               }

          =>Ajax create 
               =In socialapplications > index.blade.php 
                    <!-- Start Page Content Area -->
                    <div class="container-fluid">
                         
                         <div class="col-md-12">
                              <a href="javascript:void(0);" id="modal-btn" class="btn btn-primary btn-sm rounded-0">Create</a>
                         </div>
                         
                         <hr/>

                         <div class="col-md-12">
                              
                              <table id="mytable" class="table table-sm table-hover border">
                         
                                   <thead>
                                        <th>No</th>
                                        <th>Name</th>
                                        <th>Status</th>
                                        <th>By</th>
                                        <th>Created At</th>
                                        <th>Updated At</th>
                                        <th>Action</th>
                                   </thead>
                         
                                   <tbody>
                                        @foreach($socialapplications as $idx=>$socialapplication)
                                        <tr id="delete_{{$socialapplication->id}}">
                                             <td>{{++$idx}}</td>
                                             <td>{{$socialapplication["name"]}}</td>
                                             <td>
                                                  <div class="form-checkbox form-switch">
                                                       <input type="checkbox" class="form-check-input change-btn" {{  $socialapplication->status_id === 3 ? 'checked' : '' }} data-id="{{ $socialapplication->id }}" />
                                                  </div>
                                             </td>
                                             <td>{{ $socialapplication["user"]["name"] }}</td>
                                             <td>{{ $socialapplication->created_at->format('d M Y') }}</td>
                                             <td>{{ $socialapplication->updated_at->format('d M Y') }}</td>
                                             <td>
                                                  <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$socialapplication->id}}" data-name="{{$socialapplication->name}}" data-status="{{$socialapplication->status_id}}"><i class="fas fa-pen"></i></a>
                                                  <!-- <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a> -->
                                                  <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}" data-id="{{$socialapplication->id}}"><i class="fas fa-trash-alt"></i></a>
                                             </td>
                                        </tr>
                                        @endforeach
                                   </tbody>
                         
                              </table>
                         

                         </div>
                    </div>
                    <!-- End Page Content Area -->

                    <!-- START MODAL AREA -->
                         <!-- start create modal -->
                         <div id="createmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Create Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="">
                                                  <div class="row align-items-end">
                                                       <div class="col-md-7">
                                                            <label for="name">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Application Name" value="{{ old('name') }}"/>
                                                       </div>
                                                       
                                                       <div class="col-md-3 form-group">
                                                            <label for="status_id">Status</label>
                                                            <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($statuses as $status)
                                                                      <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>
                                                       
                              
                                                       <div class="col-md-2">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- end create modal -->
                    ....
                    $(document).ready(function(){

                    // Start Passing Header Token
                    $.ajaxSetup({
                         headers:{
                              "X-CSRF-TOKEN": $("meta[name='csrf-token']").attr("content")
                         }
                    });
                    // End Passing Header Token

                    // Start Create Form
                         $("#modal-btn").click(function(){
                              $("#createmodal").modal("show"); // toggle() can also used.
                         });

                         $("#formaction").validate({
                              rules:{
                                   name:"required"
                              },
                              messages:{
                                   name:"Please enter the application name"
                              },

                              submitHandler:function(form){
                                   // let formdata = $("#formaction").serialize();
                                   // let formdata = $("#formaction").serializeArray();
                                   let formdata = $("#formaction").serialize();
                                   // let formdata = $("#formaction").serializeArray();

                                   $.ajax({
                                        url: "{{route('socialapplications.store')}}",
                                        type:"POST",
                                        data: formdata,
                                        dataType:"json",
                                        success:function(response){
                                             console.log(response);
                                             // console.log(response.status);
                                             
                                             if(response && response.status === "success"){
                                                  $("#createmodal").modal("hide"); // toggle() can also used.
                                             }
                                        },
                                        error:function(response){
                                             console.log("Error:",response);
                                        }
                                   })
                              }
                         });
                    // End Create Form

               =Show modal using javascript

               =>jQuery Validate 
                    =to validate the form in frontend

                    =Google >  jquery validate
                    =open jQuery Validation Plugin site
                    =copy compressed file link (https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js) 
                    =integrate the file within the system
                    =Explore Documentation (https://jqueryvalidation.org/validate/)

                    .validate() is jquery based plug in.
                    *Error (Uncaught TypeError: $(...).validate is not a function)

                    submitHandler - Callback for handling the actual submit when the form is valid.
                    form - The form currently being validated, as a DOMElement.

                    rules: property specify the validation rules for each input. Rules can be single or compound.
                    message: property specify the validation error messages if the entry do not match the specified rules.

               =Create social application with same name (Without commenting laravel validation)
                    *error (from laravel)
                    POST http://127.0.0.1:8000/socialapplications 422 (Unprocessable Content)
                    Error: {readyState: 4, getResponseHeader: ƒ, getAllResponseHeaders: ƒ, setRequestHeader: ƒ, overrideMimeType: ƒ, …}
               =Create social application with same name (With commenting laravel validation)
                    *error (from database)
                    {status: 'failed', message: 'SQLSTATE[23000]: Integrity constraint violation: 1… 3, 1, 2024-05-17 18:19:08, 2024-05-17 18:19:08))'}
               
               =Create social appliation with empty name (After jQuery validate())
                    *Error Message display below the form field.

               =>Wiping Previous Form data 
                    =In socialapplications > index.blade.php
                         // Start Create Form
                         $("#modal-btn").click(function(){
                         
                              // clear form data
                              console.log($("#formaction")); // E.fn.init {0: form#formaction, length: 1}
                              console.log($("#formaction")[0]); // if you use reset(), that element can't be array.
                              // =method 1
                              // $("#formaction")[0].reset();

                              // =method 2
                              $("#formaction").trigger("reset");

                              $("#createmodal").modal("show"); // toggle() can also used.
                         
                         }); 

                    =create a socialapplication
                    =*do not reload
                    =create another socialapplication
                    =the prior form data still remain

                    *$("#formaction") returns a jQuery object, which is a specialized array-like object.
                    *To use reset(), It muse be an element especially form element.
                         So to obtain the absolute element, access the array with index number.$("#formaction")[0] 

                    The trigger() method activates the specified event.
                    
          =>Ajax delete
               =In SocialapplicationsController.php
                    *use Illuminate\Support\Facades\Response;
                    
                    public function destroy(string $id)
                    {
                         try{
                              $socialapplication = Socialapplication::where("id",$id)->delete();
                              return Response::json($socialapplication);

                         }catch(Exception $e){
                              Log::error($e->getmessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    }

                    *Using Laravel default parameter strind id, not modal class object.
                    *Using Response class and its json method.
                    *If succcess, it will return 1. If encounter problem, it will return error message.
                         because it do not directly return the deletet item. It return after excuting delete().

               =In socialapplications > index.blade.php 
                    // by ajax 
                    // Using default laravel route
                    $(".delete-btns").click(function(){
                         const getidx = $(this).attr("data-idx");
                         const getid = $(this).data("id");
                         // console.log(getid);
                         
                         if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                         
                              // data remove 
                              $.ajax({
                                   url:`socialapplications/${getid}`,
                                   type:"DELETE",
                                   dataType:"json",
                                   // data:{_token:"{{csrf_token()}}"},
                                   success:function(response){
                                        console.log(response);   // 1
                                        
                                        if(response){
                                             // ui remove
                                             $(`#delete_${getid}`).remove();
                                        }
                                   },
                                   error:function(response){
                                        console.log("Error: ",response)
                                   }
                              });
                              return true;
                         }else{
                              return false;
                         }
                    });

                    // End Delete Item

               *Server return boolean value, can't use response.data for deleted item.
               So that,getid value from delete btn is used.

          =>Single modal box and form for create/edit 
               =>Create Segment
                    =In socialapplications > index.blade.php 
                         <div class="col-md-12">
                              <a href="javascript:void(0);" id="modal-btn" class="btn btn-primary btn-sm rounded-0">Create</a>
                         </div>
                         ....
                         <!-- start create modal -->
                         <div id="createmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Modal Title</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="">
                                                  <div class="row align-items-end">
                                                       <div class="col-md-7">
                                                            <label for="name">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Application Name" value="{{ old('name') }}"/>
                                                       </div>
                                                       
                                                       <div class="col-md-3 form-group">
                                                            <label for="status_id">Status</label>
                                                            <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($statuses as $status)
                                                                      <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>
                                                       
                              
                                                       <div class="col-md-2">
                                                            <button type="submit" id="action-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- end create modal -->
                         ....
                         $(document).ready(function(){

                              // Start Passing Header Token
                              $.ajaxSetup({
                                   headers:{
                                        "X-CSRF-TOKEN": $("meta[name='csrf-token']").attr("content")
                                   }
                              });
                              // End Passing Header Token

                              // Start Create Form
                              $("#modal-btn").click(function(){
                              
                                   // clear form data
                                   // console.log($("#formaction")); // E.fn.init {0: form#formaction, length: 1}
                                   // console.log($("#formaction")[0]); // if you use reset(), that element can't be array.
                                   // =method 1
                                   // $("#formaction")[0].reset();

                                   // =method 2
                                   $("#formaction").trigger("reset");

                                   $("#createmodal").modal("show"); // toggle() can also used.
                                   
                                   $("#createmodal .modal-title").text("Create Form");
                              });

                              $("#formaction").validate({
                                   rules:{
                                        name:"required"
                                   },
                                   messages:{
                                        name:"Please enter the application name"
                                   },

                                   submitHandler:function(form){
                                        // let formdata = $("#formaction").serialize();
                                        // let formdata = $("#formaction").serializeArray();
                                        let formdata = $(form).serialize();
                                        // let formdata = $(form).serializeArray();

                                        $("#action-btn").text("Sending....");

                                        $.ajax({
                                             url: "{{route('socialapplications.store')}}",
                                             type:"POST",
                                             data: formdata,
                                             dataType:"json",
                                             success:function(response){
                                                  console.log(response);
                                                  // console.log(response.status);
                                                  
                                                  if(response && response.status === "success"){
                                                       $("#createmodal").modal("hide"); // toggle() can also used.
                                                       
                                                       const data = response.data;
                                                       let html = `
                                                       <tr id="delete_${data.id}">
                                                            <td>${data.id}</td>
                                                            <td>${data.name}</td>
                                                            <td>
                                                                 <div class="form-checkbox form-switch">
                                                                      <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                 </div>
                                                            </td>
                                                            <td>${data.user_id}</td>
                                                            <td>${data.created_at}</td>
                                                            <td>${data.updated_at}</td>
                                                            <td>
                                                                 <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="${data.id}" data-name="${data.name}" data-status="${data.status_id}"><i class="fas fa-pen"></i></a>
                                                                 <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                            </td>
                                                       </tr>
                                                       `;
                                                       $("#mytable tbody").prepend(html);

                                                       $("#action-btn").html("Sutmit");
                                                  }
                                             },
                                             error:function(response){
                                                  console.log("Error:",response);
                                             }
                                        })
                                   }
                              });
                              // End Create Form

                    *Change Modal Title describing whether to create or update
                    *Submit button is for two purpose, create or update
                    
                    *result 
                    let html = `
                         <tr id="delete_{{$socialapplication->id}}">
                              <td>{{++$idx}}</td>
                              <td>{{$socialapplication["name"]}}</td>
                              <td>
                                   <div class="form-checkbox form-switch">
                                        <input type="checkbox" class="form-check-input change-btn" {{  $socialapplication->status_id === 3 ? 'checked' : '' }} data-id="{{ $socialapplication->id }}" />
                                   </div>
                              </td>
                              <td>{{ $socialapplication["user"]["name"] }}</td>
                              <td>{{ $socialapplication->created_at->format('d M Y') }}</td>
                              <td>{{ $socialapplication->updated_at->format('d M Y') }}</td>
                              <td>
                                   <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$socialapplication->id}}" data-name="{{$socialapplication->name}}" data-status="{{$socialapplication->status_id}}"><i class="fas fa-pen"></i></a>
                                   <!-- <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a> -->
                                   <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}" data-id="{{$socialapplication->id}}"><i class="fas fa-trash-alt"></i></a>
                              </td>
                         </tr>
                         `;
                    
                    3	kpay	admin	18 May 2024	18 May 2024
                    *show the last entry, looping stop in endmost item. 

                    *It will display the user as integer. This is because we use the ajax and blade with default laravel route not api route.

                    *Should not check condition with triple equal to ${data.status_id === 3 ? "checked" : "" }
                         it do not show the correct ouput.
                         =creaet a social application with status "on"
                         =ui show the off switch.

                         -ajax response present the data as string.

                    =>Sending Button when data submiting to server 
                         =create a socialapplication freely 
                         =Button change text to Sending and shortly revert to text Submit

                         =create a socialapplication with the same name 
                         =Button change text to Sending permanently and do not revert to text Submit
                              Because the item is not created errorlessly (Duplicate Entry).

                         =create a socialapplication freely while the button is Sending
                         =It can create an item and already added the item in UI. 

               =>Edit Segment 
                    =In socialapplications > index.blade.php
                         <td>
                              <a href="javascript:void(0);" class="text-info edit-btns" data-id="{{$socialapplication->id}}" ><i class="fas fa-pen"></i></a>
                              <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}" data-id="{{$socialapplication->id}}"><i class="fas fa-trash-alt"></i></a>
                         </td>
                         ....

                              let html = `
                              <tr id="delete_${data.id}">
                                   <td>${data.id}</td>
                                   <td>${data.name}</td>
                                   <td>
                                        <div class="form-checkbox form-switch">
                                             <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                        </div>
                                   </td>
                                   <td>${data.user_id}</td>
                                   <td>${data.created_at}</td>
                                   <td>${data.updated_at}</td>
                                   <td>
                                        <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                        <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                   </td>
                              </tr>
                         ....
                         // Start Edit Form
                              $(document).on("click",".edit-btns",function(){
                                   const getid = $(this).data("id");
                                   // console.log(getid);

                                   $.get(`socialapplications/${getid}/edit`,function(response){
                                        // console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}
                                   
                                        $("#createmodal .modal-title").text("Edit Form");
                                        $("#createmodal").modal("show"); // toggle() can also used.
                                        
                                        $("#name").val(response.name);
                                        $("#status_id").val(response.status_id);
                                   });
                              });
                         // End Edit Form

                    *Retrieve data from database instead of getting data passing from ui 
                    *Get dynamic data from database when clicking edit btn and display them in edit modal

                    =>In SocialapplicationsController.php 
                         public function edit(string $id){
                              $socialapplication = Socialapplication::findOrFail($id);
                              return response()->json($socialapplication);
                         }
                    *direct database response not from data

                    =edit a socialapplication
                    *result (inserting new socialapplication)
                         23	indonesia	1	2024-05-19T09:59:28.000000Z	2024-05-19T09:59:28.000000Z

                    *The submit button is not defined clearly for both create and edit

                    =>Designating Submit Btn
                         =In socialapplications > index.blade.php 
                              <div class="col-md-2">
                                   <button type="submit" id="action-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                              </div>
                              ....
                              <form id="formaction" action="" method="">
                                   <div class="row align-items-end">
                                        <div class="col-md-7">
                                             <label for="name">Name <span class="text-danger">*</span></label>
                                             <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Application Name" value="{{ old('name') }}"/>
                                        </div>
                                        
                                        <div class="col-md-3 form-group">
                                             <label for="status_id">Status</label>
                                             <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                                  @foreach($statuses as $status)
                                                       <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                  @endforeach     
                                             </select>
                                        </div>
                                        
                                        <input type="hidden" name="id" id="id"/>

                                        <div class="col-md-2">
                                             <button type="submit" id="action-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                        </div>
                                   </div>
                              </form>
                              ....
                              $("#formaction").validate({
                                   rules:{
                                        name:"required"
                                   },
                                   messages:{
                                        name:"Please enter the application name"
                                   },

                                   submitHandler:function(form){
                                        let actiontype = $("#action-btn").val();
                                        console.log(actiontype);

                                        if(actiontype === "create-btn"){
                                             let formdata = $(form).serialize();

                                             $("#action-btn").text("Sending....");

                                             $.ajax({
                                                  url: "{{route('socialapplications.store')}}",
                                                  type:"POST",
                                                  data: formdata,
                                                  dataType:"json",
                                                  success:function(response){
                                                       console.log(response);
                                                       // console.log(response.status);
                                                       
                                                       if(response && response.status === "success"){
                                                            $("#createmodal").modal("hide"); // toggle() can also used.
                                                            
                                                            const data = response.data;
                                                            let html = `
                                                            <tr id="delete_${data.id}">
                                                                 <td>${data.id}</td>
                                                                 <td>${data.name}</td>
                                                                 <td>
                                                                      <div class="form-checkbox form-switch">
                                                                           <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                      </div>
                                                                 </td>
                                                                 <td>${data.user_id}</td>
                                                                 <td>${data.created_at}</td>
                                                                 <td>${data.updated_at}</td>
                                                                 <td>
                                                                      <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                      <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                                 </td>
                                                            </tr>
                                                            `;
                                                            $("#mytable tbody").prepend(html);

                                                            $("#action-btn").html("Sutmit");
                                                       }
                                                  },
                                                  error:function(response){
                                                       console.log("Error:",response);
                                                  }
                                             })
                                        }else{
                                             const getid = $("#id").val();
                                             
                                             $.ajax({
                                                  url:`socialapplications/${getid}`,
                                                  type:"PUT",
                                                  dataType:"json",
                                                  data:$("#formaction").serialize(), // name=&status_id=4
                                                  success:function(response){
                                                       // console.log(this.data);  //name=kpay&status_id=3
                                                       console.log(response);   // paymentmethods:525 {status: 'success', data: {…}}
                                                       // console.log(response.status);
                                                       const data = response.data;
                                                       let html = `
                                                            <tr id="delete_${data.id}">
                                                                 <td>${data.id}</td>
                                                                 <td>${data.name}</td>
                                                                 <td>
                                                                      <div class="form-checkbox form-switch">
                                                                           <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                      </div>
                                                                 </td>
                                                                 <td>${data.user_id}</td>
                                                                 <td>${data.created_at}</td>
                                                                 <td>${data.updated_at}</td>
                                                                 <td>
                                                                      <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                      <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                                 </td>
                                                            </tr>
                                                            `;
                                                       $("#delete_"+data.id).replaceWith(html);
                                                       
                                                       $("#createmodal").modal("hide");

                                                       // window.location.reload(); // temp reload
                                                  }
                                             });
                                        }
                                   }
                              });
                              // Start Edit Form
                                   $(document).on("click",".edit-btns",function(){
                                        const getid = $(this).data("id");
                                        // console.log(getid);

                                        $.get(`socialapplications/${getid}/edit`,function(response){
                                             // console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}
                                        
                                             $("#createmodal .modal-title").text("Edit Form");
                                             $("#action-btn").text("Update");
                                             $("#action-btn").val("edit-btn");
                                             $("#createmodal").modal("show"); // toggle() can also used.
                                             
                                             $("#id").val(response.id);
                                             $("#name").val(response.name);
                                             $("#status_id").val(response.status_id);
                                        });
                                   });
                              // End Edit Form
                    
                         *Chrome's inspect > Element
                              =Initial State
                                   <button type="submit" id="action-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>         
                              =After Clicking Create Button 
                                   <button type="submit" id="action-btn" class="btn btn-primary btn-sm rounded-0" value="create-btn">Submit</button>

                              Click create means submit form to store new item 
                              Click Edit icon mean update the existing item

                         *Passing socialapplication id as from input
                              -get id from response and pass to hidden input
                               *Chrome's inspect > Element
                                   =Click Create btn 
                                        <input type="hidden" name="id" id="id">
                                   =Click Edit Btn 
                                        <input type="hidden" name="id" id="id" value="18">
          
          =>Ajsx Concept
               Create (Store into database and show in UI)
               Edit (Retrieve from database and display in modal and show in UI)
               Delete (Delete from database and remove from UI)

          =>My Own Create Update Single Form 

               =>Create Part
                    <div class="col-md-12">
                         <a href="javascript:void(0);" id="create-btn" class="btn btn-primary btn-sm rounded-0">Create</a>
                    </div>
                    ....
                    <!-- start create edit modal -->
                         <div id="cemodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Modal Title</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="">
                                                  <div class="row align-items-end">
                                                       <div class="col-md-7">
                                                            <label for="name">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Application Name" value="{{ old('name') }}"/>
                                                       </div>
                                                       
                                                       <div class="col-md-3 form-group">
                                                            <label for="status_id">Status</label>
                                                            <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($statuses as $status)
                                                                      <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>
                                                       
                                                       <div class="col-md-2">
                                                            <button type="submit" id="action-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                    <!-- end create edit modal -->
                    ....

                    $(document).ready(function(){

                         // Start Passing Header Token
                         $.ajaxSetup({
                              headers:{
                                   "X-CSRF-TOKEN": $("meta[name='csrf-token']").attr("content")
                              }
                         });
                         // End Passing Header Token

                    
                         $("#create-btn").click(function(){
                              // Clearing previous form data
                              $("#formaction").trigger("reset");

                              // Preparing modal and form for create
                              $("#cemodal .modal-title").text("Create Form");
                              $("#action-btn").html("Sutmit");
                              $("#action-btn").val("creating");

                              // Showing modal
                              $("#cemodal").modal("show");
                         });

                         $("#formaction").validate({
                              rules:{
                                   name:"required"
                              },
                              messages:{
                                   name:"Please enter the application name"
                              },

                              submitHandler:function(form){
                                   let actiontype = $("#action-btn").val();
                                   console.log(actiontype);

                                   if(actiontype === "creating"){
                                        let formdata = $(form).serialize();

                                        $("#action-btn").text("Sending....");

                                        $.ajax({
                                             url: "{{route('socialapplications.store')}}",
                                             type:"POST",
                                             data: formdata,
                                             dataType:"json",
                                             success:function(response){
                                                  console.log(response);
                                                  // console.log(response.status);
                                                  
                                                  if(response && response.status === "success"){
                                                       
                                                       const data = response.data;
                                                       let html = `
                                                       <tr id="socialapp_${data.id}">
                                                            <td>${data.id}</td>
                                                            <td>${data.name}</td>
                                                            <td>
                                                                 <div class="form-checkbox form-switch">
                                                                      <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                 </div>
                                                            </td>
                                                            <td>${data.user_id}</td>
                                                            <td>${data.created_at}</td>
                                                            <td>${data.updated_at}</td>
                                                            <td>
                                                                 <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                 <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                            </td>
                                                       </tr>
                                                       `;
                                                       $("#mytable tbody").prepend(html);

                                                       $("#action-btn").html("Sutmit");

                                                       // Hide modal after adding social app item
                                                       $("#cemodal").modal("hide"); 
                                                  }
                                             },
                                             error:function(response){
                                                  console.log("Error:",response);
                                             }
                                        })
                                   }

               =>Edit Part
                    <td>
                         <a href="javascript:void(0);" class="text-info edit-btns" data-id="{{$socialapplication->id}}" ><i class="fas fa-pen"></i></a>
                         <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}" data-id="{{$socialapplication->id}}"><i class="fas fa-trash-alt"></i></a>
                    </td>
                    ....
                    <!-- start create edit modal -->
                    <div id="cemodal" class="modal fade">
                         <div class="modal-dialog modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Modal Title</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <form id="formaction" action="" method="">
                                             <div class="row align-items-end">
                                                  <div class="col-md-7">
                                                       <label for="name">Name <span class="text-danger">*</span></label>
                                                       <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Application Name" value="{{ old('name') }}"/>
                                                  </div>
                                                  
                                                  <div class="col-md-3 form-group">
                                                       <label for="status_id">Status</label>
                                                       <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                                            @foreach($statuses as $status)
                                                                 <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                            @endforeach     
                                                       </select>
                                                  </div>
                                                  
                                                  <input type="hidden" name="id" id="id"/>

                                                  <div class="col-md-2">
                                                       <button type="submit" id="action-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                  </div>
                                             </div>
                                        </form>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end create edit modal -->

                    // Start Edit Form
                              $(document).on("click",".edit-btns",function(){
                              const getid = $(this).data("id");
                              // console.log(getid);

                              $.get(`socialapplications/${getid}/edit`,function(response){
                                   // console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}

                                   // Preparing modal and form for create
                                   $("#cemodal .modal-title").text("Edit Form");
                                   $("#action-btn").text("Update");
                                   $("#action-btn").val("editing");
                                   
                                   $("#id").val(response.id);
                                   $("#name").val(response.name);
                                   $("#status_id").val(response.status_id);

                                   $("#cemodal").modal("show");
                              });
                         });
                    // End Edit Form

                    $("#formaction").validate({
                         rules:{
                              name:"required"
                         },
                         messages:{
                              name:"Please enter the application name"
                         },

                         submitHandler:function(form){
                              let actiontype = $("#action-btn").val();
                              console.log(actiontype);

                              if(actiontype === "create-btn"){
                                   ....
                              }else{
                                        const getid = $("#id").val();
                                        
                                        $.ajax({
                                             url:`socialapplications/${getid}`,
                                             type:"PUT",
                                             dataType:"json",
                                             data:$("#formaction").serialize(), // name=&status_id=4
                                             success:function(response){
                                                  // console.log(this.data);  //name=kpay&status_id=3
                                                  console.log(response);   // paymentmethods:525 {status: 'success', data: {…}}
                                                  // console.log(response.status);
                                                  const data = response.data;
                                                  let html = `
                                                       <tr id="socialapp_${data.id}">
                                                            <td>${data.id}</td>
                                                            <td>${data.name}</td>
                                                            <td>
                                                                 <div class="form-checkbox form-switch">
                                                                      <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                 </div>
                                                            </td>
                                                            <td>${data.user_id}</td>
                                                            <td>${data.created_at}</td>
                                                            <td>${data.updated_at}</td>
                                                            <td>
                                                                 <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                 <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                            </td>
                                                       </tr>
                                                       `;
                                                  $("#socialapp_"+data.id).replaceWith(html);
                                                  
                                                  // Hide modal after replacing social app item
                                                  $("#cemodal").modal("hide");
                                             }
                                        });
                                   }
                              }
                    });

               =>Delete Social Application 
                    $(".delete-btns").click(function(){
                         const getidx = $(this).attr("data-idx");
                         const getid = $(this).data("id");
                         // console.log(getid);

                         if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                              
                              // data remove 
                              $.ajax({
                                   url:`socialapplications/${getid}`,
                                   type:"DELETE",
                                   dataType:"json",
                                   // data:{_token:"{{csrf_token()}}"},
                                   success:function(response){
                                        console.log(response);   // 1
                                        
                                        if(response){
                                             // ui remove
                                             $(`#socialapp_${getid}`).remove();
                                        }
                                   },
                                   error:function(response){
                                        console.log("Error: ",response)
                                   }
                              });
                              return true;
                         }else{
                              return false;
                         }
                    });          

          =>Ajax Read 
               =In SocialapplicationsController.php    
                    public function fetchalldatas()
                    {
                         try{
                              $socialapplications = Socialapplication::all();
                              return response()->json(["status"=>"scuccess","data"=>$socialapplications]);
                         }catch(Exception $e){
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                         
                    }

               =socialapplications > index.blade.php 
                    //Start change-btn
                    $(document).on("change",".change-btn",function(){
                         console.log("hi");

                         var getid = $(this).data("id");
                         // console.log(getid); // 1 2

                         var setstatus = $(this).prop("checked") === true ? 3 : 4;
                         // console.log(setstatus); // 3 4

                         $.ajax({
                              url:"socialapplicationsstatus",
                              type:"GET",
                              dataType:"json",
                              data:{"id":getid,"status_id":setstatus},
                              success:function(response){
                                   console.log(response); // {success: 'Status Change Successfully'}
                                   console.log(response.success); // Status Change Successfully
                              }
                         });
                    });
                    // End change btn

                    // Start Delete Item
                    // by ajax 
                    // Using default laravel route
                    $(document).on("click",".delete-btns",function(){
                         const getidx = $(this).attr("data-idx");
                         const getid = $(this).data("id");
                         // console.log(getid);
                         
                         if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                         
                              // data remove 
                              $.ajax({
                                   url:`socialapplications/${getid}`,
                                   type:"DELETE",
                                   dataType:"json",
                                   // data:{_token:"{{csrf_token()}}"},
                                   success:function(response){
                                        console.log(response);   // 1
                                        
                                        if(response){
                                             // ui remove
                                             $(`#delete_${getid}`).remove();
                                        }
                                   },
                                   error:function(response){
                                        console.log("Error: ",response)
                                   }
                              });
                              return true;
                         }else{
                              return false;
                         }
                    });

                    // End Delete Item

                    *generate custom idx 
                    *$(".change-btn").change(function(){  
                    is not working (we can't change status for social application, nothing happen) 
                    because it is not pure html element.
                    tr, td and buttons are created by javascript and moved to html page.
                    so we use document element calling method.   

                    =Change Status 
                    =Edit form (Stage already changed)

                    =Change status from Edit form
                    =Check status in UI (Stage already changed)             

          =>Alert Box for Ajax request
               =toaster only work when reload 
               =we ned to use another alert box to work with ajax

               https://sweetalert2.github.io/

               Examples > 
               A confirm dialog, with a function attached to the "Confirm"-button

               Swal.fire({
                    title: "Are you sure?",
                    text: "You won't be able to revert this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
               }).then((result) => {
                    if (result.isConfirmed) {
                         Swal.fire({
                              title: "Deleted!",
                              text: "Your file has been deleted.",
                              icon: "success"
                         });
                    }
               });

               DOWNLOAD & INSTALL
               <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

               =>Alert for delete socialapplications
                    =In socialapplications > index.blade.php 

                         @section("scripts")
                              <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js" type="text/javascript"></script>
                              <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js" type="text/javascript"></script>
                              <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

                              ....
                              // Using default laravel route
                              $(document).on("click",".delete-btns",function(){
                                   const getidx = $(this).attr("data-idx");
                                   const getid = $(this).data("id");
                                   // console.log(getid);
                                   
                                   Swal.fire({
                                        title: "Are you sure?",
                                        text: `You won't be able to revert this id ${getidx}`,
                                        icon: "warning",
                                        showCancelButton: true,
                                        confirmButtonColor: "#3085d6",
                                        cancelButtonColor: "#d33",
                                        confirmButtonText: "Yes, delete it!"
                                   }).then((result) => {
                                        if (result.isConfirmed) {
                                             // data remove 
                                             $.ajax({
                                                  url:`socialapplications/${getid}`,
                                                  type:"DELETE",
                                                  dataType:"json",
                                                  // data:{_token:"{{csrf_token()}}"},
                                                  success:function(response){
                                                       console.log(response);   // 1
                                                       
                                                       if(response){
                                                            // ui remove
                                                            $(`#delete_${getid}`).remove();
                                                       
                                                            Swal.fire({
                                                                 title: "Deleted!",
                                                                 text: "Your file has been deleted.",
                                                                 icon: "success"
                                                            });
                                                       }
                                                  },
                                                  error:function(response){
                                                       console.log("Error: ",response)
                                                  }
                                             });
                                             
                                        }
                                   });   
                              });

               =>Alert for create socialapplications
                    =In socialapplications > index.blade.php 
                         $("#formaction").validate({
                              rules:{
                                   name:"required"
                              },
                              messages:{
                                   name:"Please enter the application name"
                              },

                              submitHandler:function(form){
                                   let actiontype = $("#action-btn").val();
                                   console.log(actiontype);

                                   if(actiontype === "create-btn"){
                                        let formdata = $(form).serialize();

                                        $("#action-btn").text("Sending....");

                                        $.ajax({
                                             url: "{{route('socialapplications.store')}}",
                                             type:"POST",
                                             data: formdata,
                                             dataType:"json",
                                             success:function(response){
                                                  console.log(response);
                                                  // console.log(response.status);
                                                  
                                                  if(response && response.status === "success"){
                                                       $("#createmodal").modal("hide"); // toggle() can also used.
                                                       
                                                       const data = response.data;
                                                       let html = `
                                                       <tr id="delete_${data.id}">
                                                            <td>${data.id}</td>
                                                            <td>${data.name}</td>
                                                            <td>
                                                                 <div class="form-checkbox form-switch">
                                                                      <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                 </div>
                                                            </td>
                                                            <td>${data.user_id}</td>
                                                            <td>${data.created_at}</td>
                                                            <td>${data.updated_at}</td>
                                                            <td>
                                                                 <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                 <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                            </td>
                                                       </tr>
                                                       `;
                                                       $("#mytable tbody").prepend(html);

                                                       $("#action-btn").html("Sutmit");

                                                       Swal.fire({
                                                            title: "Added!",
                                                            text: "Added Successfully",
                                                            icon: "success"
                                                       });
                                                  }
                                             },
                                             error:function(response){
                                                  console.log("Error:",response);
                                             }
                                        })
                                   }else{
                                        ....
                                   }
                              }
                         });
               
               =>Alert for update socialapplications
                    =In socialapplications > index.blade.php 
                         $("#formaction").validate({
                              rules:{
                                   name:"required"
                              },
                              messages:{
                                   name:"Please enter the application name"
                              },

                              submitHandler:function(form){
                                   let actiontype = $("#action-btn").val();
                                   console.log(actiontype);

                                   if(actiontype === "create-btn"){
                                   ....
                                   }else{
                                        const getid = $("#id").val();
                                        
                                        $.ajax({
                                             url:`socialapplications/${getid}`,
                                             type:"PUT",
                                             dataType:"json",
                                             data:$("#formaction").serialize(), // name=&status_id=4
                                             success:function(response){
                                                  // console.log(this.data);  //name=kpay&status_id=3
                                                  console.log(response);   // paymentmethods:525 {status: 'success', data: {…}}
                                                  // console.log(response.status);
                                                  const data = response.data;
                                                  let html = `
                                                       <tr id="delete_${data.id}">
                                                            <td>${data.id}</td>
                                                            <td>${data.name}</td>
                                                            <td>
                                                                 <div class="form-checkbox form-switch">
                                                                      <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                 </div>
                                                            </td>
                                                            <td>${data.user_id}</td>
                                                            <td>${data.created_at}</td>
                                                            <td>${data.updated_at}</td>
                                                            <td>
                                                                 <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                 <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                            </td>
                                                       </tr>
                                                       `;
                                                  $("#delete_"+data.id).replaceWith(html);
                                                  
                                                  $("#createmodal").modal("hide");

                                                  Swal.fire({
                                                       title: "Updated!",
                                                       text: "Updated Successfully",
                                                       icon: "success"
                                                  });
                                             }
                                        });
                                   }
                              }
                         });

               =>Alert for status change socialapplications 
                    =In socialapplications > index.blade.php 
                         //Start change-btn
                         $(document).on("change",".change-btn",function(){

                              var getid = $(this).data("id");
                              // console.log(getid); // 1 2

                              var setstatus = $(this).prop("checked") === true ? 3 : 4;
                              // console.log(setstatus); // 3 4

                              $.ajax({
                                   url:"socialapplicationsstatus",
                                   type:"GET",
                                   dataType:"json",
                                   data:{"id":getid,"status_id":setstatus},
                                   success:function(response){
                                        console.log(response); // {success: 'Status Change Successfully'}
                                        console.log(response.success); // Status Change Successfully
                                   
                                        Swal.fire({
                                             title: "Updated!",
                                             text: "Updated Successfully",
                                             icon: "success"
                                        });
                                   }
                              });
                         });
                         // End change btn

                    =change status on/off 
                    =review alert message 
                    =reload the page (check status actually change)

          =>Testing Data Sending By changing network speed - (to notice button changes )
               Chrome  > http://127.0.0.1:8000/socialapplications
               Inspect 
               Network Tab 
               Network speed Dropdown > 
                    Change No Trottling - Slow 3G 

               =Edit a socialapplication 
               =You will notice the connection is very slow and see the button change its text to Sending.

     =>Attendance Code Auto Generator          
          Current attandance code system have some weaknesses.
               -students can provide multiple attendance codes for incorrect class and class date
               -database consumption
               -attendance data inaccuracy
               -need more human resource to verify attendance codes 

          Auto Attendance Generator Advantates
               -Student can only provide correct attendance code for precise class and class date 
               -database optiimation
               -Enhance data accuracy

          =Migration 
               php artisan make:model Attcodegenerator -m 

               =In create_attcodegenerators_table.php 
                    up()
                         $table->date("classdate");
                         $table->foreignId("post_id")->constrained()->onUpdate("cascade")->onDelete("cascade");
                         $table->string("attcode");    
                         $table->unsignedBigInteger("status_id");
                         $table->unsignedBigInteger("user_id");

                    *status_id for restriction of att code entry at the next day after class. 
                    The att code is expire after one day 24 hr. All code exceed one day, should automatically change state to 'off'. 

               php artisan migrate:status 
               php artisan migrate
     
          php artisan make:controller AttcodegeneratorsController

          =In web.php 
               *use App\Http\Controllers\AttcodegeneratorsController;
               
               Route::resource("attcodegenerators",AttcodegeneratorsController::class);
               Route::get("/attcodegeneratorssstatus",[AttcodegeneratorsController::class,"typestatus"]);
               
          =In Attcodegenerator.php 
               protected $table = "attcodegenerators";
               protected $primaryKey = "id";
               protected $fillable = [
                    "classdate",
                    "post_id",
                    "attcode",
                    "status_id",
                    "user_id"
               ];

               public function post(){
                    return $this->belongsTo(Post::class);
               }

               public function user(){
                    return $this->belongsTo(User::class);
               }


          =In attcodegenerators > index.blade.php 
               <form action="{{route('attcodegenerators.store')}}" method="POST">
                    {{ csrf_field() }}

                    <div class="row align-items-end">
                         <div class="col-md-3 form-group mb-3">
                              <label for="classdate">Class Date <span class="text-danger">*</span></label>
                              @error("classdate")
                                   <span class="text-danger">{{ $message }}<span>
                              @enderror
                              <input type="date" name="classdate" id="classdate" class="form-control form-control-sm rounded-0" value="{{ $gettoday }}"/>
                         </div>

                         <div class="col-md-3 form-group mb-3">
                              <label for="post_id">Class <span class="text-danger">*</span></label>
                              @error("post_id")
                                   <span class="text-danger">{{ $message }}<span>
                              @enderror
                              <select name="post_id" id="post_id" class="form-control form-control-sm rounded-0">
                                   <option selected disabled>Choose class</option>
                                   @foreach($posts as $post)
                                        {{-- <option value="{{$post['id']}}">{{$post['title']}}</option> --}}
                                        <option value="{{$post->id}}">{{$post->title}}</option> 
                                   @endforeach     
                              </select>
                         </div>

                         <div class="col-md-3 form-group mb-3">
                              <label for="status_id">Status</label>
                              @error("status_id")
                                   <span class="text-danger">{{ $message }}<span>
                              @enderror
                              <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                   @foreach($statuses as $status)
                                        <option value="{{$status['id']}}">{{$status['name']}}</option>
                                   @endforeach     
                              </select>
                         </div>

                         <div class="col-md-3 form-group mb-3">
                              <label for="attcode">Attendance Code <span class="text-danger">*</span></label>
                              @error("attcode")
                                   <span class="text-danger">{{ $message }}<span>
                              @enderror
                              <input type="text" name="attcode" id="attcode" class="form-control form-control-sm rounded-0" value="{{ old('attcode') }}"/>
                         </div>

                         <div class="col-md-12 text-end">
                              <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                              <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                         </div>
                    </div>
               </form>
               ...
               <table id="mytable" class="table table-sm table-hover border">
          
                    <thead>
                         <th>No</th>
                         <th>Class</th>
                         <th>Att Code</th>
                         <th>Class Date</th>
                         <th>By</th>
                         <th>Created At</th>
                         <th>Action</th>
                    </thead>
          
                    <tbody>
                         @foreach($attcodegenerators as $idx=>$attcodegenerator)
                         <tr>
                              <td>{{++$idx}}</td>
                              <td>{{$attcodegenerator->post["title"]}}</td>
                              <td>{{ $attcodegenerator->attcode }}</td>
                              <td>{{ $attcodegenerator->classdate }}</td>
                              <td>{{  $attcodegenerator->user->name }}</td>
                              <td>{{ $attcodegenerator->created_at->format('d M Y') }}</td>
                              <td>
                                   <div class="form-checkbox form-switch">
                                        <input type="checkbox" class="form-check-input change-btn" {{  $attcodegenerator->status_id === 3 ? 'checked' : '' }} data-id="{{ $attcodegenerator->id }}" />
                                   </div>
                              </td>
                         </tr>
                         @endforeach
                    </tbody>
               </table>
               ....

               //Start change-btn
               $(document).on("change",".change-btn",function(){

                    var getid = $(this).data("id");
                    // console.log(getid); // 1 2

                    var setstatus = $(this).prop("checked") === true ? 3 : 4;
                    // console.log(setstatus); // 3 4

                    $.ajax({
                         url:"attcodegeneratorssstatus",
                         type:"GET",
                         dataType:"json",
                         data:{"id":getid,"status_id":setstatus},
                         success:function(response){
                              console.log(response); // {success: 'Status Change Successfully'}
                              console.log(response.success); // Status Change Successfully
                         
                              Swal.fire({
                                   title: "Updated!",
                                   text: "Updated Successfully",
                                   icon: "success"
                              });
                         }
                    });
               });
               // End change btn

               *Laravel Server send today data as "Y-m-d"
                    -HTML show today as "m-d-Y" // 06/03/2024

               *When laravel send today as 
                    $gettoday = date("m-d-Y",strtotime(Carbon::today())); 
                    -HTML can't show date and time correctly.

          =In AttcodegeneratorsController.php
               public function index()
               {
                    $attcodegenerators = Attcodegenerator::orderBy('created_at','desc')->get();
                    // $posts = Post::where("attshow",3)->get();
                    $posts = DB::table("posts")->where("attshow",3)->orderBy("title","asc")->get();
                    $statuses = Status::whereIn("id",[3,4])->get();
                    // $gettoday = date("Y-m-d",strtotime(Carbon::today())); 
                    $gettoday = Carbon::today()->format("Y-m-d");
                    // dd($gettoday);//  "2024-06-03" 
                    // dd(strtotime(Carbon::today())); // 1717349400
                    
                    return view("attcodegenerators.index",compact("attcodegenerators","posts","statuses","gettoday"));
               }
               ....
               public function typestatus(Request $request){
                    $paymentmethod = Attcodegenerator::findOrFail($request["id"]);
                    $paymentmethod->status_id = $request["status_id"];
                    $paymentmethod->save();

                    return response()->json(["success"=>"Status Change Successfully"]);
               }

          =create an attcodegeeneratos without filling Attendance Code      
          *empty value will store to database 

          System must generate a random att code if nothing fill to att code.
          
          =>Generating Random Attendance Code
               =In AttcodegeneratorsController.php 

                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "classdate" => "required|date",
                              "post_id" => "required"
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $attcodegenerator = new Attcodegenerator();
                         $attcodegenerator->classdate = $request["classdate"];
                         $attcodegenerator->post_id = $request["post_id"];
                         $attcodegenerator->attcode = is_null($request['attcode']) ? $attcodegenerator->randomstringgenerator(4) : Str::upper($request["attcode"]);
                         $attcodegenerator->status_id = $request["status_id"];
                         $attcodegenerator->user_id = $user_id;

                         $attcodegenerator->save();
                         session()->flash("success","Att Code Created");
                         return redirect(route("attcodegenerators.index"));
                    }

               =In Attcodegenerator.php 
                    public function randomstringgenerator($length){
        
                         $characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; // index 0 to 35
                         $characterlengts = strlen($characters);
                         // dd($characterlengts); // 36 

                         $randomstring = "";
                         for($i=0 ; $i<$length; $i++){
                              $randomstring .=  $characters[rand(0,$characterlengts-1)];
                         }

                         // dd($randomstring); // VJMD // 1XES
                         return $randomstring;
                    }

               -Until the string length reaching to its limitation, 
               -pick up string from characters array as the random generated index number 

               *result 
                    $randomstring .= rand(0,$characterlengts-1);
                    // 1528719
               *Nuber comming out more than 4 because number greater than 10 (more than 1 digit) can be generated 

               =In phpmyadmin 
                    "attcodegeneratos"
                         id	classdate	     post_id	attcode	status_id	user_id	created_at	     updated_at	
                         4    2024-06-04     16        VRVC      3         1         2024-06-04 16:05:32 2024-06-04 16:12:05
                         6    2024-06-04     17        SK7Q      3         1         2024-06-04 16:06:08 2024-06-04 16:12:07

                         manual entry (attcode)
                         7    2024-06-04     20        A1B1      3         1         2024-06-04 16:07:09 2024-06-04 16:12:01

          =>Verifying Student provided att code 

               =In AttendancesController.php 
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "classdate" => "required|date",
                              "post_id" => "required",
                              "attcode" => "required"
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $getclassdate = $request["classdate"];
                         $getpostid = $request["post_id"];
                         $getattcode = Str::upper($request["attcode"]);

                         $attendance = new Attendance();
                         if($attendance->checkattcode($getclassdate,$getpostid,$getattcode)){
                              $attendance->classdate = $getclassdate;
                              $attendance->post_id = $getpostid;
                              $attendance->attcode = $getattcode;
                              $attendance->user_id = $user_id;
                    
                              $attendance->save();
                              session()->flash("success","Att Created");
                         }else{
                              session()->flash("error","Failed Try Again!");
                         }
                         return redirect(route("attendances.index"));
                         
                    }
               
               =In Attendance.php 
                    public function checkattcode($classdate,$postid,$attcode){
                         $checkresult = \DB::table("attcodegenerators")->whereDate("classdate",$classdate)->where("post_id",$postid)->where("attcode",$attcode)->where("status_id",3)->exists();
                         // dd($checkresult);
                         return $checkresult;
                    }

                    *The precedence of data column in checking where condition is to narrow scope of findings.
                         Among many class, firstly sort out today classes,
                         then choose the specific class, 
                         finally check class status.
               
               =In layouts > adminfooter.blade.php 
                    ....
                     @if(session()->has("error"))
                         <script>toastr.error('{{ session()->get("error") }}', 'Inconceivable')</script>
                    @endif

               *result (false) - Wrong Code 
                    Class Date * = 06/04/2024     
                    Class * = JS Small App Batch 10     
                    Attendance Code * = abcd

               *result (false) - Wrong Class 
                    Class Date * = 06/04/2024     
                    Class * = CSS Inter Batch 5
                    Attendance Code * = SK7Q

               *result (false) - Wrong Date 
                    Class Date * = 06/02/2024     
                    Class * = JS Small App Batch 10 
                    Attendance Code * = SK7Q

               *result (false) - (attcodegenerator status off)
                    Class Date * = 06/04/2024     
                    Class * = JS Small App Batch 10     
                    Attendance Code * = SK7Q

               *result (true) - (attcodegenerator status on)
                    Class Date * = 06/04/2024     
                    Class * = JS Small App Batch 10     
                    Attendance Code * = SK7Q

               We need to off status of attcodegenerator at 12PM at midnight automatically.
               We can use 
                    Linux - Chrome Job 
                    Window - Auto TAsk 
                    Laravel (single command) - Job

     =>Warehouse
          =>Ajax Weakness
               http://127.0.0.1:8000/socialapplications
               No	Name	Status	By	Created At	               Updated At	
               1	indonesia	     1	2024-05-19T12:21:15.000000Z	2024-06-03T09:45:24.000000Z        

               *By show user as number not user name 
               *Created At and Updated At are not formatted

          =Migration
               php artisan make:model Warehouse -m
          
               =In create_warehouses_table.php 
                    $table->string("name")->unique();
                    $table->string("slug");
                    $table->unsignedBigInteger("status_id");
                    $table->unsignedBigInteger("user_id");
               
               php artisan migrate:status 
               php artisan migrate 
          
          =In Web.php 
               Route::resource("warehouses",WarehousesController::class);
               Route::get("/warehousesstatus",[WarehousesController::class,"typestatus"]);
               Route::get("/warehousesfetchalldatas",[WarehousesController::class,"fetchalldatas"])->name("warehouses.fetchalldatas");

          php artisan optimize  (all inclusive of clear and cache with single command)
          php artisan route:clear (Route cache cleared successfully.)
          php artisan route:cache ( Routes cached successfully.)
          php artisan config:clear
          php artisan config:cache 

          php artisan optimize
          Caching the framework bootstrap files.
          config ..................................................... 163ms DONE
          routes ...................................................... 56ms DONE 

     
          php artisan make:controller WarehousesController 
          
          =>Restful API
               =>Step 1
                    php artisan make:resource WarehousesResource

                    > ercisetwo\app\Http\Resources\WarehousesResource.php

                    Resource - for customizing the desire model data to choose. specify data output. 

                    =Original WarehousesResource.php 
                         <?php

                         namespace App\Http\Resources;

                         use Illuminate\Http\Request;
                         use Illuminate\Http\Resources\Json\JsonResource;

                         class WarehousesResource extends JsonResource
                         {
                              /**
                              * Transform the resource into an array.
                              *
                              * @return array<string, mixed>
                              */
                              public function toArray(Request $request): array
                              {
                                   return parent::toArray($request);
                              }
                         }
                         
               =>Step 2 
                    php artisan make:resource WarehousesCollection

                    -to work with resource 
                    -to wrap informaion with data property 

                    > ercisetwo\app\Http\Resources\WarehousesCollection.php

                    =Original WarehousesCollection.php 
                         <?php

                         namespace App\Http\Resources;

                         use Illuminate\Http\Request;
                         use Illuminate\Http\Resources\Json\ResourceCollection;

                         class WarehousesCollection extends ResourceCollection
                         {
                              /**
                                   * Transform the resource collection into an array.
                                   *
                                   * @return array<int|string, mixed>
                                   */
                              public function toArray(Request $request): array
                              {
                                   return parent::toArray($request);
                              }
                         }

               =>Sepreating isolated API Controller for api request 
                    We can use 
                         php artisan make:controller WarehouseAPIController

                    There may exists so many api route for each item. (these api route are given to mobile developers to integrate in their interface) 
                    Spliting api routes to avoid confusion. 

                    php artisan make:controller Api/WarehousesController --api

                    *Api folder will automatically created under > Controllers.

                    =Original Controllers > Api > WarehousesController
                         <?php

                         namespace App\Http\Controllers\Api;

                         use App\Http\Controllers\Controller;
                         use Illuminate\Http\Request;

                         class WarehousesController extends Controller
                         {
                         /**
                              * Display a listing of the resource.
                              */
                         public function index()
                         {
                              //
                         }

                         /**
                              * Store a newly created resource in storage.
                              */
                         public function store(Request $request)
                         {
                              //
                         }

                         /**
                              * Display the specified resource.
                              */
                         public function show(string $id)
                         {
                              //
                         }

                         /**
                              * Update the specified resource in storage.
                              */
                         public function update(Request $request, string $id)
                         {
                              //
                         }

                         /**
                              * Remove the specified resource from storage.
                              */
                         public function destroy(string $id)
                         {
                              //
                         }
                         }

               =>Registering api routes 
                    routes > api.php 

                         -Normal Resource Controller is only for interface. (required - do not remove)
                         -Api is for data transfer purpose. 
                    
                    =Original api.php 
                         <?php

                         use Illuminate\Http\Request;
                         use Illuminate\Support\Facades\Route;

                         use App\Http\Controllers\Api\WarehousesController;

                         /*
                         |--------------------------------------------------------------------------
                         | API Routes
                         |--------------------------------------------------------------------------
                         |
                         | Here is where you can register API routes for your application. These
                         | routes are loaded by the RouteServiceProvider and all of them will
                         | be assigned to the "api" middleware group. Make something great!
                         |
                         */

                         Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
                         return $request->user();
                         });

                    =In api.php 
                         *use App\Http\Controllers\Api\WarehousesController;
                         Route::apiResource("warehouses",WarehousesController::class);

                         *We do not implement authentication for api route.

                    =>Calling api route 
                         http://127.0.0.1:8000/api/warehouses

                         http://127.0.0.1:8000/warehouses (show ui interface)

                         Interface route and api route do not conflict.

                         php artisan config:clear
                         php artisan config:cache 
                         php artisan route:clear (Route cache cleared successfully.)
                         
                         php artisan route:cache 
                         php artisan optimize  
                         *Error 
                              LogicException 
                              Unable to prepare route [warehouses] for serialization. Another route has already been assigned name [warehouses.index].

                              *the same route name for interface and api

               =>Export API 
                    =In WarehousesResource.php 
                         public function toArray(Request $request): array
                         {
                              return [
                                   "id"=>$this->id,
                                   "name"=>$this->name,
                                   "slug"=>$this->slug,
                                   "status_id"=>$this->status_id,
                                   "user_id"=>$this->user_id,
                                   "created_at"=>$this->created_at,
                                   "updated_at"=>$this->updated_at
                              ];
                         }
                    *Muste review Model 
                         -Grab important data 
                         -Add extra data
                              (to Resource)

                    =In WarehousesCollection.php 
                         public function toArray(Request $request): array
                         {
                              return [
                                   "data"=> $this->collection->transform(function($warehouse){
                                        return [
                                             "id"=>$warehouse->id,
                                             "name"=>$warehouse->name,
                                             "slug"=>$warehouse->slug,
                                             "status_id"=>$warehouse->status_id,
                                             "user_id"=>$warehouse->user_id,
                                             "created_at"=>$warehouse->created_at,
                                             "updated_at"=>$warehouse->updated_at
                                        ];
                                   })
                              ];
                         }

                    =In api > WarehousesController.php 
                         *use App\Http\Resources\WarehousesCollection;
                         *use App\Models\Warehouse;
                         public function index()
                         {
                              return new WarehousesCollection(Warehouse::all());
                         }

                    http://127.0.0.1:8000/api/warehouses
                    {"data":[{"id":3,"name":"Main Warehouse","slug":"main-warehouse","status_id":3,"user_id":1,"created_at":"2024-06-05T09:20:03.000000Z","updated_at":"2024-06-05T09:20:03.000000Z"},{"id":4,"name":"Warehouse 2","slug":"warehouse-2","status_id":3,"user_id":1,"created_at":"2024-06-05T11:02:59.000000Z","updated_at":"2024-06-05T11:02:59.000000Z"},{"id":5,"name":"Warehouse 3","slug":"warehouse-3","status_id":3,"user_id":1,"created_at":"2024-06-05T11:03:08.000000Z","updated_at":"2024-06-05T11:03:08.000000Z"}]}

                    =>Api Result Before customizing
                         =Enable Preety Print in Chrome
                         {
                              "data": [
                                   {
                                        "id": 3,
                                        "name": "Main Warehouse",
                                        "slug": "main-warehouse",
                                        "status_id": 3,
                                        "user_id": 1,
                                        "created_at": "2024-06-05T09:20:03.000000Z",
                                        "updated_at": "2024-06-05T09:20:03.000000Z"
                                   },
                                   {
                                        "id": 4,
                                        "name": "Warehouse 2",
                                        "slug": "warehouse-2",
                                        "status_id": 3,
                                        "user_id": 1,
                                        "created_at": "2024-06-05T11:02:59.000000Z",
                                        "updated_at": "2024-06-05T11:02:59.000000Z"
                                   },
                                   {
                                        "id": 5,
                                        "name": "Warehouse 3",
                                        "slug": "warehouse-3",
                                        "status_id": 3,
                                        "user_id": 1,
                                        "created_at": "2024-06-05T11:03:08.000000Z",
                                        "updated_at": "2024-06-05T11:03:08.000000Z"
                                   }
                              ]
                         }

                    =>Api Result After customizing
                         -can drop unnecessary column 
                         -can change format 
                         -can restrict serious column

                         =In WarehousesCollection.php 
                              public function toArray(Request $request): array
                              {
                                   return [
                                        "data"=> $this->collection->transform(function($warehouse){
                                             return [
                                                  "id"=>$warehouse->id,
                                                  "name"=>$warehouse->name,
                                                  "slug"=>$warehouse->slug,
                                                  "status_id"=>$warehouse->status_id,
                                                  "user_id"=>$warehouse->user_id,
                                                  
                                                  "created_at"=>$warehouse->created_at->format("d m Y"),
                                                  "updated_at"=>$warehouse->updated_at->format("d m Y"),
                                                  
                                                  // "user"=>User::where("id",$warehouse->user_id)->first()
                                                  // "user"=>User::where("id",$warehouse->user_id)->first("name")
                                                  // "user"=>User::where("id",$warehouse->user_id)->pluck("name")
                                                  
                                                  // "user"=>User::where("id",$warehouse->user_id)->select("id","name")->get()
                                                  // "user"=>User::where("id",$warehouse->user_id)->select(["id","name"])->get()
                                                  "user"=>User::where("id",$warehouse->user_id)->select(["id","name"])->first(),
                                                  

                                                  "status"=>Status::where("id",$warehouse->status_id)->select(["id","name"])->first()
                                             ];
                                        })
                                   ];
                              }
                              
                              *looping each resource and assemble information as needed.
                              *Formatting created_at, updated_at date 
                              *Displaying user name 
                                   first() - Extra columns
                                   first(column) - single column 
                                   pluck() - key value 

                                   select(,) - Specific columns
                                   select([]) 
                                   get() - enclose with array 

                         *result 
                         {
                              "data": [
                              {
                                   "id": 3,
                                   "name": "Main Warehouse",
                                   "slug": "main-warehouse",
                                   "status_id": 3,
                                   "user_id": 1,
                                   "created_at": "05 06 2024",
                                   "updated_at": "05 06 2024",
                                   "user": {
                                   "id": 1,
                                   "name": "admin"
                                   }
                              },
                              {
                                   "id": 4,
                                   "name": "Warehouse 2",
                                   "slug": "warehouse-2",
                                   "status_id": 3,
                                   "user_id": 1,
                                   "created_at": "05 06 2024",
                                   "updated_at": "05 06 2024",
                                   "user": {
                                   "id": 1,
                                   "name": "admin"
                                   }
                              },
                              {
                                   "id": 5,
                                   "name": "Warehouse 3",
                                   "slug": "warehouse-3",
                                   "status_id": 3,
                                   "user_id": 1,
                                   "created_at": "05 06 2024",
                                   "updated_at": "05 06 2024",
                                   "user": {
                                   "id": 1,
                                   "name": "admin"
                                   }
                              }
                              ]
                         }

                    =>My finding (Chatgpt)
                         Laravel မှာ Resource နဲ့ ResourceCollection က အရေးကြီးတဲ့ အပိုင်းတွေ ဖြစ်ပြီး API တွေရဲ့ output ကို manage လုပ်ဖို့ အသုံးပြုပါတယ်။
                         
                         Resource က တစ်ယောက်ချင်းစီရဲ့ data ကို manage လုပ်ပြီး ResourceCollection က data အများကြီးကို စုပေါင်းပြီး manage လုပ်နိုင်ပါတယ်။
     
                         =>Resource ကတော့ တစ်ခုချင်းစီရဲ့ model data ကို အရည်အသွေးမြင့်မားတဲ့ API response အဖြစ် ပြောင်းစေတဲ့ class တစ်ခုဖြစ်ပါတယ်။ 
                              Resource ဖန်တီးနည်း
                              ------------------
                              php artisan make:resource UserResource

                              namespace App\Http\Resources;

                              use Illuminate\Http\Resources\Json\JsonResource;

                              class UserResource extends JsonResource
                              {
                                   public function toArray($request)
                                   {
                                        return [
                                             'id' => $this->id,
                                             'name' => $this->name,
                                             'email' => $this->email,
                                             // လိုအပ်တဲ့အချက်အလက်တွေကိုဒီမှာထည့်
                                        ];
                                   }
                              }
                         
                         =>ResourceCollection ကတော့ တစ်ခါထဲမှာ multiple items များစွာကို စုစည်းပြီး response အဖြစ် ပြောင်းပေးနိုင်တဲ့ class တစ်ခုဖြစ်ပါတယ်။ ResourceCollection ကို အသုံးပြုပြီး တစ်ခါတည်းမှာ အများကြီးသော data တွေကို handle လုပ်နိုင်ပါတယ်။
                              ResourceCollection ဖန်တီးနည်း
                              ---------------------------
                              php artisan make:resource UserCollection


                              namespace App\Http\Resources;

                              use Illuminate\Http\Resources\Json\ResourceCollection;

                              class UserCollection extends ResourceCollection
                              {
                              public function toArray($request)
                              {
                                   return [
                                        'data' => $this->collection,
                                        'meta' => [
                                             'total' => $this->collection->count(),
                                        ],
                                   ];
                              }
                              }

                         =>Resource ကို Controller မှာ အသုံးပြုနည်း
                              use App\Http\Resources\UserResource;

                              class UserController extends Controller
                              {
                                   public function show($id)
                                   {
                                        $user = User::find($id);
                                        return new UserResource($user);
                                   }
                              }
                         =>ResourceCollection ကို Controller မှာ အသုံးပြုနည်း
                              class UserController extends Controller
                              {
                                   public function index()
                                   {
                                        $users = User::all();
                                        return new UserCollection($users);
                                   }
                              }

                         =>အကျိုးကျေးဇူးများ
                              ကောင်းမွန်သောအချက်အလက်ပြောင်းလဲမှု:Resource နဲ့ ResourceCollection တို့က API response ကို အကြောင်းအမျိုးမျိုးအတွက် ပြန်လည် ပြောင်းပေးနိုင်ပါတယ်။
                              အချိန်ကုန်သက်သာခြင်း: အရင်က data ကို response format ပြောင်းစရာ မလိုဘဲ Resource နဲ့ ResourceCollection တွေက auto ပြန်လည် ပြောင်းပေးနိုင်ပါတယ်။
                              Codebase ကို ရှင်းလင်းစွာ စီမံနိုင်ခြင်း: Controller တွေမှာ data transformation logic မထည့်ဘဲ Resource တွေမှာ ထည့်နိုင်တယ်။

                    =>Checking Routes 
                         php artisan route:list 
                          
                         =>Api route 
                              GET|HEAD        api/warehouses ................................................ warehouses.index › Api\WarehousesController@index  
                              POST            api/warehouses ................................................ warehouses.store › Api\WarehousesController@store  
                              GET|HEAD        api/warehouses/{warehouse} ...................................... warehouses.show › Api\WarehousesController@show
                              PUT|PATCH       api/warehouses/{warehouse} .................................. warehouses.update › Api\WarehousesController@update  
                              DELETE          api/warehouses/{warehouse} ................................ warehouses.destroy › Api\WarehousesController@destroy  

                         =>UI route 
                              GET|HEAD        warehouses ........................................................ warehouses.index › WarehousesController@index  
                              POST            warehouses ........................................................ warehouses.store › WarehousesController@store  
                              GET|HEAD        warehouses/create ............................................... warehouses.create › WarehousesController@create  
                              GET|HEAD        warehouses/{warehouse} .............................................. warehouses.show › WarehousesController@show  
                              PUT|PATCH       warehouses/{warehouse} .......................................... warehouses.update › WarehousesController@update
                              DELETE          warehouses/{warehouse} ........................................ warehouses.destroy › WarehousesController@destroy  
                              GET|HEAD        warehouses/{warehouse}/edit ......................................... warehouses.edit › WarehousesController@edit  
                              GET|HEAD        warehousesfetchalldatas ........................... warehouses.fetchalldatas › WarehousesController@fetchalldatas  
                              GET|HEAD        warehousesstatus ................................................................ WarehousesController@typestatus  

                         php artisan route:clear
                         php artisan route:cache  
                         *Error( 
                              LogicException 
                              Unable to prepare route [warehouses] for serialization. Another route has already been assigned name [warehouses.index].
                         )

                         =>Avoiding Error 
                              =Define another name not the same with ui route
                              (or)
                              =Route::apiResource("warehouses",WarehousesController::class,["as"=>"api"]);
                              
                              *solved
                              php artisan route:cache
                              php artisan optimize 
                         
                    =>Resource VS ResourceCollection 
                         Resource - for C,U,D operation (it allow direct access to model)
                         ResourceCollection - only for R operation (it place model information under 'data' property)

                         *Do not need to issue both Resource and ResourceCollection for each item 
                         *Issue as requirement of the item 

                         =>Using Resource instead of Resource Collection 
                              =In api > WarehousesController.php 
                                   *use App\Http\Resources\WarehousesResource;

                                   public function index()
                                   {
                                        // $warehouses = Warehouse::all();
                                        // return new WarehousesCollection($warehouses);

                                        $warehouses = Warehouse::all();
                                        return  WarehousesResource::collection($warehouses);
                                   }
                                   -new keyword is not need when using Resource. Calling collection under WarehousesResource.
                              =>Before customizing
                                   {
                                        "data": [
                                        {
                                             "id": 3,
                                             "name": "Main Warehouse",
                                             "slug": "main-warehouse",
                                             "status_id": 3,
                                             "user_id": 1,
                                             "created_at": "2024-06-05T09:20:03.000000Z",
                                             "updated_at": "2024-06-05T09:20:03.000000Z"
                                        },
                                        {
                                             "id": 4,
                                             "name": "Warehouse 2",
                                             "slug": "warehouse-2",
                                             "status_id": 3,
                                             "user_id": 1,
                                             "created_at": "2024-06-05T11:02:59.000000Z",
                                             "updated_at": "2024-06-05T11:02:59.000000Z"
                                        },
                                        {
                                             "id": 5,
                                             "name": "Warehouse 3",
                                             "slug": "warehouse-3",
                                             "status_id": 3,
                                             "user_id": 1,
                                             "created_at": "2024-06-05T11:03:08.000000Z",
                                             "updated_at": "2024-06-05T11:03:08.000000Z"
                                        }
                                        ]
                                   }

                                   *api response is already wrapped with data.
                              =>After customizing 
                                   =In WarehousesResource.php 

                                   {
                                        "data": [
                                        {
                                             "id": 3,
                                             "name": "Main Warehouse",
                                             "slug": "main-warehouse",
                                             "status_id": 3,
                                             "user_id": 1,
                                             "created_at": "05 06 2024",
                                             "updated_at": "05 06 2024",
                                             "user": {
                                             "id": 1,
                                             "name": "admin"
                                             },
                                             "status": {
                                             "id": 3,
                                             "name": "On"
                                             }
                                        },
                                        {
                                             "id": 4,
                                             "name": "Warehouse 2",
                                             "slug": "warehouse-2",
                                             "status_id": 3,
                                             "user_id": 1,
                                             "created_at": "05 06 2024",
                                             "updated_at": "05 06 2024",
                                             "user": {
                                             "id": 1,
                                             "name": "admin"
                                             },
                                             "status": {
                                             "id": 3,
                                             "name": "On"
                                             }
                                        },
                                        {
                                             "id": 5,
                                             "name": "Warehouse 3",
                                             "slug": "warehouse-3",
                                             "status_id": 3,
                                             "user_id": 1,
                                             "created_at": "05 06 2024",
                                             "updated_at": "05 06 2024",
                                             "user": {
                                             "id": 1,
                                             "name": "admin"
                                             },
                                             "status": {
                                             "id": 3,
                                             "name": "On"
                                             }
                                        }
                                        ]
                                   }

                    =>Api Delete 
                         =In api >  WarehousesController.php 
                              public function destroy(string $id)
                              {
                                   $warehouse = Warehouse::findOrFail($id);
                                   $warehouse->delete();
                                   return new WarehousesResource($warehouse);
                              }
                         
                         =In warehouses > index.blade.php 
                               // Using api route
                              $(document).on("click",".delete-btns",function(){
                                   const getidx = $(this).attr("data-idx");
                                   const getid = $(this).data("id");
                                   // console.log(getid);
                                   
                                   Swal.fire({
                                        title: "Are you sure?",
                                        text: `You won't be able to revert this id ${getidx}`,
                                        icon: "warning",
                                        showCancelButton: true,
                                        confirmButtonColor: "#3085d6",
                                        cancelButtonColor: "#d33",
                                        confirmButtonText: "Yes, delete it!"
                                   }).then((result) => {
                                        if (result.isConfirmed) {
                                             // data remove 
                                             $.ajax({
                                                  url:`api/warehouses/${getid}`,
                                                  type:"DELETE",
                                                  dataType:"json",
                                                  // data:{_token:"{{csrf_token()}}"},
                                                  success:function(response){
                                                       console.log(response);   // 1
                                                       
                                                       if(response){
                                                            // ui remove
                                                            $(`#delete_${getid}`).remove();
                                                       
                                                            Swal.fire({
                                                                 title: "Deleted!",
                                                                 text: "Your file has been deleted.",
                                                                 icon: "success"
                                                            });
                                                       }
                                                  },
                                                  error:function(response){
                                                       console.log("Error: ",response)
                                                  }
                                             });
                                             
                                        }
                                   });   
                              });

                              // End Delete Item

                         *result api response
                         {data: {…}}
                              data: {id: 4, name: 'Warehouse 2', slug: 'warehouse-2', status_id: 3, user_id: 1, …}
                              [[Prototype]]: Object
                              
                    =>Api Edit 

                         Api Controller access auth user information.
                         *Error
                         PUT http://127.0.0.1:8000/api/warehouses/6 500 (Internal Server Error)
                          
                              public function update(Request $request, string $id)
                              {
                                   $this->validate($request,[
                                        "name" => "required|unique:warehouses,name,".$id,
                                        "status_id" => "required",
                                        // "user_id" => "required"
                                   ]);

                                   $user = Auth::user();
                                   $user_id = $user["id"];

                                   $warehouse = Warehouse::findOrFail($id);
                                   $warehouse->name = $request["name"];
                                   $warehouse->slug = Str::slug($request["name"]);
                                   $warehouse->status_id = $request["status_id"];
                                   $warehouse->user_id = 20;

                                   $warehouse->save();

                                   return new WarehousesResource($warehouse);
                                   
                              }

                         =In warehouses > index.blade.php 
                              <form id="formaction" action="" method="">
                                   <div class="row align-items-end px-3">
                                        <div class="col-md-7 form-group">
                                             <label for="name">Name <span class="text-danger">*</span></label>
                                             <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Application Name" value="{{ old('name') }}"/>
                                        </div>
                                        
                                        <div class="col-md-3 form-group">
                                             <label for="status_id">Status</label>
                                             <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                                  @foreach($statuses as $status)
                                                       <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                  @endforeach     
                                             </select>
                                        </div>
                                        
                                        <input type="hidden" name="id" id="id"/>
                                        <input type="hidden" name="user_id" id="user_id" value="{{ $userdata->id }}"/>
                                   
                                        <div class="col-md-2">
                                             <button type="submit" id="action-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                        </div>
                                   </div>
                              </form>
                              *hidden field for user_id
                              ....

                              $("#formaction").validate({
                                   rules:{
                                        name:"required"
                                   },
                                   messages:{
                                        name:"Please enter the warehouse name"
                                   },

                                   submitHandler:function(form){
                                        let actiontype = $("#action-btn").val();
                                        console.log(actiontype);

                                        if(actiontype === "create-btn"){
                                           ....
                                        }else{
                                             const getid = $("#id").val();
                                             
                                             $("#action-btn").text("Sending....");
                                             $.ajax({
                                                  url:`api/warehouses/${getid}`,
                                                  type:"PUT",
                                                  dataType:"json",
                                                  data:$("#formaction").serialize(), // name=&status_id=4
                                                  success:function(response){
                                                       // console.log(this.data);  //name=kpay&status_id=3
                                                       console.log(response);   // paymentmethods:525 {status: 'success', data: {…}}
                                                       // console.log(response.status);
                                                       const data = response.data;
                                                       let html = `
                                                            <tr id="delete_${data.id}">
                                                                 <td>${data.id}</td>
                                                                 <td>${data.name}</td>
                                                                 <td>
                                                                      <div class="form-checkbox form-switch">
                                                                           <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                      </div>
                                                                 </td>
                                                                 <td>${data.user["name"]}</td>
                                                                 <td>${data.created_at}</td>
                                                                 <td>${data.updated_at}</td>
                                                                 <td>
                                                                      <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                      <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                                 </td>
                                                            </tr>
                                                            `;
                                                       $("#delete_"+data.id).replaceWith(html);
                                                       
                                                       $("#action-btn").html("Update");
                                                       $("#createmodal").modal("hide");

                                                       // window.location.reload(); // temp reload

                                                       Swal.fire({
                                                            title: "Updated!",
                                                            text: "Updated Successfully",
                                                            icon: "success"
                                                       });
                                                  }
                                             });
                                        }
                                   }
                              });

                              *replace update api route
                              *display user name
                           
                         =In api > WarehousesController.php 
                              public function update(Request $request, string $id)
                              {
                                   $this->validate($request,[
                                        "name" => "required|unique:warehouses,name,".$id,
                                        "status_id" => "required",
                                        "user_id" => "required"
                                   ]);

                                   $warehouse = Warehouse::findOrFail($id);
                                   $warehouse->name = $request["name"];
                                   $warehouse->slug = Str::slug($request["name"]);
                                   $warehouse->status_id = $request["status_id"];
                                   $warehouse->user_id = $request["user_id"];

                                   $warehouse->save();

                                   return new WarehousesResource($warehouse);
                                   
                              }

                         *result after edit
                              6	Warehouse 4, extra	admin	06 06 2024	06 06 2024	 

                         =edit a warehouse by aung aung Acc 
                              *result after edit
                              6	Warehouse 4, extra	aung aung	06 06 2024	06 06 2024	

                    =>Api Create 
                         =In api > WarehousesController.php 
                              public function store(Request $request)
                              {
                                   $this->validate($request,[
                                        "name" => "required|unique:warehouses,name",
                                        "status_id" => "required",
                                        "user_id" => "required"
                                   ]);

                                   $warehouse = new Warehouse();
                                   $warehouse->name = $request["name"];
                                   $warehouse->slug = Str::slug($request["name"]);
                                   $warehouse->status_id = $request["status_id"];
                                   $warehouse->user_id = $request["user_id"];

                                   $warehouse->save();

                                   return new WarehousesResource($warehouse);
                                   
                              }

                         =In warehouses > index.blade.php 
                              $("#formaction").validate({
                                   rules:{
                                        name:"required"
                                   },
                                   messages:{
                                        name:"Please enter the warehouse name"
                                   },

                                   submitHandler:function(form){
                                        let actiontype = $("#action-btn").val();
                                        console.log(actiontype);

                                        if(actiontype === "create-btn"){
                                             let formdata = $(form).serialize();

                                             $("#action-btn").text("Sending....");

                                             $.ajax({
                                                  url: "{{ url('api/warehouses')}}",
                                                  type:"POST",
                                                  data: formdata,
                                                  dataType:"json",
                                                  success:function(response){
                                                       console.log(response);
                                                       // console.log(response.status);
                                                       
                                                       if(response){
                                                            $("#createmodal").modal("hide"); // toggle() can also used.
                                                            
                                                            const data = response.data;
                                                            let html = `
                                                            <tr id="delete_${data.id}">
                                                                 <td>${data.id}</td>
                                                                 <td>${data.name}</td>
                                                                 <td>
                                                                      <div class="form-checkbox form-switch">
                                                                           <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                      </div>
                                                                 </td>
                                                                 <td>${data.user.name}</td>
                                                                 <td>${data.created_at}</td>
                                                                 <td>${data.updated_at}</td>
                                                                 <td>
                                                                      <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                      <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                                 </td>
                                                            </tr>
                                                            `;
                                                            $("#mytable tbody").prepend(html);

                                                            $("#action-btn").html("Sutmit");

                                                            Swal.fire({
                                                                 title: "Added!",
                                                                 text: "Added Successfully",
                                                                 icon: "success"
                                                            });
                                                       }
                                                  },
                                                  error:function(response){
                                                       console.log("Error:",response);
                                                  }
                                             })
                                        }else{
                                             ....
                                        }
                                   }
                              });
                         *replace create api route 
                         *display user name 
                         *loose the condition of (&& response.status === "success") because api response do not include status

                    =>Api Status Change 
                         =In api > WarehousesController.php 
                              public function typestatus(Request $request){
                                   $warehouse = Warehouse::findOrFail($request["id"]);
                                   $warehouse->status_id = $request["status_id"];
                                   $warehouse->save();

                                   return new WarehousesResource($warehouse);
                              }
                         =In api.php 
                              Route::apiResource("warehouses",WarehousesController::class,["as"=>"api"]);
                              Route::get("/warehousesstatus",[WarehousesController::class,"typestatus"]);

                         =In warehouses > index.blade.php 
                              //Start change-btn
                              $(document).on("change",".change-btn",function(){

                                   var getid = $(this).data("id");
                                   // console.log(getid); // 1 2

                                   var setstatus = $(this).prop("checked") === true ? 3 : 4;
                                   // console.log(setstatus); // 3 4

                                   $.ajax({
                                        url:"api/warehousesstatus",
                                        type:"GET",
                                        dataType:"json",
                                        data:{"id":getid,"status_id":setstatus},
                                        success:function(response){
                                             console.log(response); // {success: 'Status Change Successfully'}
                                             console.log(response.success); // Status Change Successfully
                                        
                                             Swal.fire({
                                                  title: "Updated!",
                                                  text: "Updated Successfully",
                                                  icon: "success"
                                             });
                                        }
                                   });
                              });
                              // End change btn

                    =>Api Read 
                          // Start Fetch All Datas 
                         function fetchalldatas(){
                              $.ajax({
                                   // url:"{{url('api/warehouses')}}",
                                   // url:"{{'api/warehouses'}}",
                                   url:"{{route('api.warehouses.index')}}",
                                   

                                   method:"GET",
                                   dataType:"json",
                                   success:function(response){
                                        console.log(response); // {status: 'scuccess', data: Array(2)}
                                        const datas = response.data;
                                        // console.log(datas);
                                        
                                        let html;
                                        datas.forEach(function(data,idx){
                                             // console.log(data);
                                             html += `
                                             <tr id="delete_${data.id}">
                                                  <td>${++idx}</td>
                                                  <td>${data.name}</td>
                                                  <td>
                                                       <div class="form-checkbox form-switch">
                                                            <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                       </div>
                                                  </td>
                                                  {{-- <td>${data.user["name"]}</td> --}}
                                                  <td>${data.user.name}</td>
                                                  <td>${data.created_at}</td>
                                                  <td>${data.updated_at}</td>
                                                  <td>
                                                       <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                       <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${idx}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                  </td>
                                             </tr>
                                             `;

                                        });
                                        $("#mytable tbody").prepend(html);

                                   }
                              });
                         }
                         fetchalldatas();
                         // End Fetch All Datas

                    =>Api method 
                         =In api.php 
                              Route::apiResource("warehouses",WarehousesController::class,["as"=>"api"]);
                              Route::put("/warehousesstatus",[WarehousesController::class,"typestatus"]);

                         =In warehouses > index.blade.php 
                              //Start change-btn
                              $(document).on("change",".change-btn",function(){

                                   var getid = $(this).data("id");
                                   // console.log(getid); // 1 2

                                   var setstatus = $(this).prop("checked") === true ? 3 : 4;
                                   // console.log(setstatus); // 3 4

                                   $.ajax({
                                        url:"api/warehousesstatus",
                                        type:"PUT",
                                        dataType:"json",
                                        data:{"id":getid,"status_id":setstatus},
                                        success:function(response){
                                             console.log(response); // {success: 'Status Change Successfully'}
                                             console.log(response.success); // Status Change Successfully
                                        
                                             Swal.fire({
                                                  title: "Updated!",
                                                  text: "Updated Successfully",
                                                  icon: "success"
                                             });
                                        }
                                   });
                              });
                              // End change btn

                         *api method and ajax method must be the same.
                         
                         =In warehouses > index.blade.php 
                              $.ajax({
                                   url:"api/warehousesstatus",
                                   type:"GET",

                              *Error (GET http://127.0.0.1:8000/api/warehousesstatus?id=7&status_id=3 405 (Method Not Allowed))

     =>Bulk Delete 

          =In CitiesController.php 
               public function bulkdeletes(Request $request)
               {
                    try{
                         $getselectedids = $request->selectedids;
                         City::whereIn("id",$getselectedids)->delete();
                         return response()->json(["success"=>"Selected data have been deleted successfully"]);
                    }catch(Exception $e){
                         Log::error($e->getMEssage());
                         return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                    }
               }
          
          =In web.php 
               Route::delete("/citiesbulkdeletes",[CitiesController::class,"bulkdeletes"])->name("cities.bulkdeletes");

          =In cities > index.blade.php 
               <div class="col-md-12">
                    <div>
                         <a href="javascript:void(0);" id="bulkdelete-btn" class="btn btn-danger btn-sm rounded-0">Bulk Delete</a>
                    </div>
               ....
               @foreach($cities as $idx=>$city)
                    <tr id="tablerole_{{$city->id}}">
                         <td>
                              <input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="{{$city->id}}"/>
                         </td>
               ....


               // Start Bulk Delete 
               $("#selectalls").click(function(){
                    $(".singlechecks").prop("checked",$(this).prop("checked"));
               });

               $("#bulkdelete-btn").click(function(){
                    let getselectedids = [];
                    
                    console.log($("input:checkbox[name=singlechecks]:checked"));
                    $("input:checkbox[name='singlechecks']:checked").each(function(){
                         getselectedids.push($(this).val());
                    });
                    
                    
                    // console.log(getselectedids); // (4) ['1', '2', '3', '4']
               
                    $.ajax({
                         url:"{{ route('cities.bulkdeletes') }}",
                         type:"DELETE",
                         dataType:"json",
                         data:{
                              selectedids:getselectedids,
                              _token:"{{ csrf_token() }}"
                         },
                         success:function(response){
                              console.log(response);
                              if(response){
                                   $.each(getselectedids,function(key,val){
                                        $(`#tablerole_${val}`).remove();
                                   });
                              }
                         },
                         error:function(response){
                              console.log("Error: ",response)
                         }
                    });
               });
               // End Bulk Delete 

               
               *When the selectedalls button is checked, all single checkboxes are checked.
               *When the selectealls button is unckecked, all gingle bheckboxes are unckecked.

               =>My Study for jQuery prop()
                    The prop() method sets or returns properties and values of the selected elements.
                    When this method is used to return the property value, it returns the value of the FIRST matched element.
                    When this method is used to set property values, it sets one or more property/value pairs for the set of matched elements.

                    Syntax
                    Return the value of a property:

                    $(selector).prop(property)
                    Set the property and value:

                    $(selector).prop(property,value)

               *Get all selected ids and keep in array 
               *pass the array to ajax data 
               *Controller perform bulk delete function
               *After backend server successfully deleted items and return response,
                    delete table row in ui as selected id array.

               =>Bulk delete with swal()
                    // Start Bulk Delete 
                    $("#selectalls").click(function(){
                         $(".singlechecks").prop("checked",$(this).prop("checked"));
                    });

                    $("#bulkdelete-btn").click(function(){
                         let getselectedids = [];
                         
                         console.log($("input:checkbox[name=singlechecks]:checked"));
                         $("input:checkbox[name='singlechecks']:checked").each(function(){
                              getselectedids.push($(this).val());
                         });
                         
                         
                         // console.log(getselectedids); // (4) ['1', '2', '3', '4']
               


                         Swal.fire({
                              title: "Are you sure?",
                              text: `You won't be able to revert!`,
                              icon: "warning",
                              showCancelButton: true,
                              confirmButtonColor: "#3085d6",
                              cancelButtonColor: "#d33",
                              confirmButtonText: "Yes, delete it!"
                         }).then((result) => {
                              if (result.isConfirmed) {
                                   // data remove 
                                   $.ajax({
                                        url:"{{ route('cities.bulkdeletes') }}",
                                        type:"DELETE",
                                        dataType:"json",
                                        data:{
                                             selectedids:getselectedids,
                                             _token:"{{ csrf_token() }}"
                                        },
                                        success:function(response){
                                             console.log(response);   // 1
                                             
                                             if(response){
                                                  // ui remove
                                                  $.each(getselectedids,function(key,val){
                                                       $(`#tablerole_${val}`).remove();
                                                  });
                                             
                                                  Swal.fire({
                                                       title: "Deleted!",
                                                       text: "Your file has been deleted.",
                                                       icon: "success"
                                                  });
                                             }
                                        },
                                        error:function(response){
                                             console.log("Error: ",response)
                                        }
                                   });
                                   
                              }
                         });   
                    });
                    // End Bulk Delete 

     =Adding status column to countries 

          https://www.worldometers.info/geography/how-many-countries-are-there-in-the-world/
          Insert 195 countries entry manually

          =>Short Way
               https://www.html-code-generator.com/mysql/country-name-table
               =check id, Country Name colum 
               =Generate Code 
               =Copy code 

               =In phpmyadmin 
                    =Run code 
                    =Adjust countries table 
                         UPDATE countries SET user_id = 1;
                         UPDATE countries SET status_id = 4;
                         UPDATE countries SET created_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP;
                         UPDATE countries SET slug = LOWER(name);

          =Migration
               php artisan make:migration add_status_id_to_countries_table --table=countries     

               =In add_status_id_to_countries_table.php 
                    up()
                         $table->unsignedBigInteger("status_id")->after("slug");

                    down()
                         $table->dropColumn("status_id");
               
               php artisan migrate:status
               php artisan migrate 
          
          =Create Modifications 

               =In CountriesController.php 
                    public function index()
                    {
                         // http://127.0.0.1:8000/countries?filtername=mm
                         // dd(request("filtername")); // mm

                         $countries = Country::where(function($query){
                              if($getname = request("filtername")){
                                   $query->where("name","LIKE","%".$getname."%");
                              }
                         })->get();
                         // dd($countries);

                         $statuses = Status::whereIn("id",[3,4])->get();

                         return view("countries.index",compact("countries","statuses"));
                    }
                    // request() - get the request form value

                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|unique:countries,name",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         $country = new Country();
                         $country->name = $request["name"];
                         $country->status_id = $request["status_id"];
                         $country->slug = Str::slug($request["name"]);
                         $country->user_id = $user_id;

                         $country->save();
                         return redirect(route("countries.index"));
                    }


               =In Country.php 
                    protected $table = "countries";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "name",
                         "slug",
                         "status_id",
                         "user_id"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }

                    public function status(){
                         return $this->belongsTo(Status::class);
                    }

               =In countries > index.blade.php 
                    <form action="{{route('countries.store')}}" method="POST">
                         {{ csrf_field() }}
                         <div class="row align-items-end">
                              <div class="col-md-3 form-group mb-3">
                                   <label for="name">Name <span class="text-danger">*</span></label>
                                   @error("name")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Country Name" value="{{ old('name') }}"/>
                              </div>

                              <div class="col-md-3 form-group mb-3">
                                   <label for="status_id">Status</label>
                                   <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                        @foreach($statuses as $status)
                                             <option value="{{$status['id']}}">{{$status['name']}}</option>
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-6 mb-3 text-sm-end text-md-start">
                                   <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                   <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                              </div>
                         </div>
                    </form>

          =Change Modifications 
               =In Web.php 
                    Route::get("/countriesstatus",[CountriesController::class,"typestatus"]);

               =In CountriesController.php 
                    public function typestatus(Request $request){
                         $country = Country::findOrFail($request["id"]);
                         $country->status_id = $request["status_id"];
                         $country->save();
                    
                         return response()->json(["success"=>"Status Change Successfully"]);
                    }

               =In countries > index.blade.php 
                    <td>
                         <div class="form-check form-switch">
                              <input type="checkbox" class="form-check-input change-btn" {{ $country->status_id === 3 ? "checked" : "" }} data-id="{{ $country->id }}"/>
                         </div>
                    </td>
                    ....
                    
                    //Start change-btn
                    $(document).on("change",".change-btn",function(){

                         var getid = $(this).data("id");
                         // console.log(getid); // 1 2

                         var setstatus = $(this).prop("checked") === true ? 3 : 4;
                         // console.log(setstatus); // 3 4

                         $.ajax({
                              url:"countriesstatus",
                              type:"GET",
                              dataType:"json",
                              data:{"id":getid,"status_id":setstatus},
                              success:function(response){
                                   console.log(response); // {success: 'Status Change Successfully'}
                                   console.log(response.success); // Status Change Successfully
                              
                                   Swal.fire({
                                        title: "Updated!",
                                        text: "Updated Successfully",
                                        icon: "success"
                                   });
                              }
                         });
                    });
                    // End change btn

          =Edit Modifications 
               =In countries > index.blade.php 
                    <td>
                         <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$country->id}}" data-name="{{$country->name}}" data-status="{{ $country->status_id }}"><i class="fas fa-pen"></i></a>
                         <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                    
                    </td>
                    <!-- start edit modal -->
                         <div id="editmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Edit Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="formaction" action="" method="POST">
                                                  {{ csrf_field() }}
                                                  {{ method_field('PUT') }}
                                                  <div class="row align-items-end">
                                                       <div class="col-md-6 form-group mb-3">
                                                            <label for="editname">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="editname" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter country Name" value="{{ old('name') }}"/>
                                                       </div>

                                                       <div class="col-md-4 form-group mb-3">
                                                            <label for="editstatus_id">Status</label>
                                                            <select name="editstatus_id" id="editstatus_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($statuses as $status)
                                                                      <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>
                              
                                                       <div class="col-md-2 text-sm-end text-start mb-3">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                    <!-- end edit modal -->
                    ....

                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         // console.log($(this).attr("data-id"),$(this).attr("data-name"));
                         
                         $("#editname").val($(this).attr("data-name"));
                         $("#editstatus_id").val($(this).attr("data-status"));

                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("action",`/countries/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form
               
               =In CountriesController.php 
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "editname" => "required|unique:countries,name,".$id,
                         ]);

                         $user = Auth::user();
                         $user_id = $user['id'];

                         $country = Country::findOrFail($id);
                         $country->name = $request["editname"];
                         $country->status_id = $request["editstatus_id"];
                         $country->slug = Str::slug($request["name"]);
                         $country->user_id = $user_id;

                         $country->save();
                         return redirect(route("countries.index"));
                    }

     =>Adding country id to cities 
          =Migration
               php artisan make:migration add_country_id_to_cities --table=cities

               =In add_country_id_to_cities
                    up()
                         $table->dropColumn("country_id");
                         $table->dropColumn("status_id");
                    down()
                         $table->dropColumn("country_id");
                         $table->dropColumn("status_id");
               *also add status_id in the single migration

               php artisan migrate

          =In phpmyadmin 
               "cities"
                    id	name	          slug	          country_id	status_id	user_id	created_at	     updated_at	
	               15   yangon         yangon         154            3         1         2024-06-07 16:57:10 2024-06-07 16:57:10
                    18   pyin oo lwin   pyin-oo-lwin   154            3         1         2024-06-07 16:57:29 2024-06-07 16:57:29     
     
               *Manuall edit country_id to 154, status_id to 3
     
          =In City.php 
               use HasFactory;
               protected $table = "cities";
               protected $primaryKey = "id";
               protected $fillable = [
                    "name",
                    "slug",
                    "country_id",
                    "status_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function country(){
                    return $this->belongsTo(Country::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }
     
          php artisan make:controller Api/CitiesController --api

          php artisan make:resource CitiesResource
          =In CitiesResource.php
               *use App\Models\Country;
               use App\Models\User;
               use App\Models\Status;
               public function toArray(Request $request): array
               {
                    return [
                         "id"=>$this->id,
                         "name"=>$this->name,
                         "slug"=>$this->slug,
                         "country_id"=>$this->country_id,
                         "status_id"=>$this->status_id,
                         "user_id"=>$this->user_id,
                         "created_at"=>$this->created_at->format("d m Y"),
                         "updated_at"=>$this->updated_at->format("d m Y"),

                         "country"=>Country::where("id",$this->country_id)->select(["id","name"])->first(),
                         "user"=>User::where("id",$this->user_id)->select(["id","name"])->first(),
                         "status"=>Status::where("id",$this->status_id)->select(["id","name"])->first()
                    ];
               }

          =In api.php 
               *use App\Http\Controllers\Api\CitiesController;

               Route::apiResource("cities",CitiesController::class,["as"=>"api"]);
               Route::put("/citiesstatus",[CitiesController::class,"typestatus"]);

          =>City Read Api 
               =In cities > index.blade.php 

                    <table id="mytable" class="table table-sm table-hover border">
               
                         <thead>
                              <th>
                                   <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                              </th>
                              <th>Id</th>
                              <th>Name</th>
                              <th>Country</th>
                              <th>Status</th>
                              <th>By</th>
                              <th>Created At</th>
                              <th>Updated At</th>
                              <th>Action</th>
                         </thead>
               
                         <tbody>
                         
                         </tbody>
                    </table>

                    ....
                     $(document).ready(function(){
                         // Start Passing Header Token
                         $.ajaxSetup({
                              headers:{
                                   "X-CSRF-TOKEN": $("meta[name='csrf-token']").attr("content")
                              }
                         });
                         // End Passing Header Token

                         // Start Fetch All Datas 
                         function fetchalldatas(){
                              $.ajax({
                         
                                   url:"{{'api/cities'}}",
                                   method:"GET",
                                   dataType:"json",
                                   success:function(response){
                                        console.log(response); // {status: 'scuccess', data: Array(2)}
                                        const datas = response.data;
                                        // console.log(datas);
                                        
                                        let html;
                                        datas.forEach(function(data,idx){
                                             // console.log(data);
                                             html += `
                                             <tr id="delete_${data.id}">
                                                  <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="${data.id}" /></td>
                                                  <td>${++idx}</td>
                                                  <td>${data.name}</td>
                                                  <td>${data.country["name"]}</td>
                                                  <td>
                                                       <div class="form-checkbox form-switch">
                                                            <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                       </div>
                                                  </td>
                                                  <td>${data.user.name}</td>
                                                  <td>${data.created_at}</td>
                                                  <td>${data.updated_at}</td>
                                                  <td>
                                                       <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                       <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${idx}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                  </td>
                                             </tr>
                                             `;

                                        });
                                        $("#mytable tbody").prepend(html);

                                   }
                              });
                         }
                         fetchalldatas();
                         // End Fetch All Datas

               =In api > CitiesController.php 
                    public function index()
                    {
                         $cities = City::all();
                         return  CitiesResource::collection($cities);
                    }
          
          =>City Create Api
               =In CitiesController.php 
                    public function index()
                    {
                         $cities = City::where(function($query){
                              if($getname = request("filtername")){
                                   $query->where("name","LIKE","%".$getname."%");
                              }
                         })->get();
                         // dd($cities);

                         $countries = Country::where("status_id",3)->orderBy("name","asc")->get();
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("cities.index",compact("cities","countries","statuses"));
                    }
               
               =In cities > index.blade.php 
                    <form id="createform">
                         <div class="row align-items-end">
                              <div class="col-md-3 form-group mb-3">
                                   <label for="name">Name <span class="text-danger">*</span></label>
                                   {{-- @error("name")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror --}}
                                   <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter City Name" value="{{ old('name') }}"/>
                              </div>

                              <div class="col-md-3 form-group mb-3">
                                   <label for="country_id">Country</label>
                                   <select name="country_id" id="country_id" class="form-control form-control-sm rounded-0">
                                        @foreach($countries as $country)
                                             <option value="{{$country['id']}}">{{$country['name']}}</option>
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-3 form-group mb-3">
                                   <label for="status_id">Status</label>
                                   <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                        @foreach($statuses as $status)
                                             <option value="{{$status['id']}}">{{$status['name']}}</option>
                                        @endforeach     
                                   </select>
                              </div>

                              <input type="hidden" name="user_id" id="user_id" value="{{ $userdata['id'] }}">

                              <div class="col-md-3 mb-3 text-sm-end text-md-start">
                                   <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                   <button type="submit" id="create-btn" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                              </div>
                         </div>
                    </form>
                    ....

                    // Start Create Form
                    $("#createform").validate({
                         rules:{
                              name:"required"
                         },
                         messages:{
                              name:"Please enter the city name"
                         },

                         submitHandler:function(form){

                              $("#create-btn").text("Sending....");
                              let formdata = $(form).serialize();

                              $.ajax({
                                   url: "{{ url('api/cities')}}",
                                   type:"POST",
                                   data: formdata,
                                   dataType:"json",
                                   success:function(response){
                                        console.log(response);

                                        // console.log(response.status);
                                        
                                        if(response){
                                             
                                             const data = response.data;
                                             let html = `
                                             <tr id="delete_${data.id}">
                                                  <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="${data.id}" /></td>
                                                  <td>${data.id}</td>
                                                  <td>${data.name}</td>
                                                  <td>${data.country["name"]}</td>

                                                  <td>
                                                       <div class="form-checkbox form-switch">
                                                            <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                       </div>
                                                  </td>
                                                  <td>${data.user.name}</td>
                                                  <td>${data.created_at}</td>
                                                  <td>${data.updated_at}</td>
                                                  <td>
                                                       <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                       <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                  </td>
                                             </tr>
                                             `;
                                             $("#mytable tbody").prepend(html);

                                             $("#create-btn").html("Sutmit");

                                             Swal.fire({
                                                  title: "Added!",
                                                  text: "Added Successfully",
                                                  icon: "success"
                                             });
                                        }
                                   },
                                   error:function(response){
                                        console.log("Error:",response);
                                        $("#create-btn").html("Try Again");
                                   }
                              })
                         }
                    });
                    // End Create Form

               =In api > CitiesController.php 
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|unique:cities,name",
                              "status_id" => "required",
                              "user_id" => "required"
                         ]);
                    
                         $city = new City();
                         $city->name = $request["name"];
                         $city->slug = Str::slug($request["name"]);
                         $city->country_id = $request["country_id"];
                         $city->status_id = $request["status_id"];
                         $city->user_id = $request["user_id"];
                    
                         $city->save();
                    
                         return new CitiesResource($city);
                    }

          =>City Status Change Api
               =In api > CitiesController.php 
                    public function typestatus(Request $request){
                         $city = City::findOrFail($request["id"]);
                         $city->status_id = $request["status_id"];
                         $city->save();
                    
                         return new CitiesResource($city);
                    }
               
               =In cities > index.blade.php
                    $(document).on("change",".change-btn",function(){

                         var getid = $(this).data("id");
                         // console.log(getid); // 1 2

                         var setstatus = $(this).prop("checked") === true ? 3 : 4;
                         // console.log(setstatus); // 3 4

                         $.ajax({
                              url:"api/citiesstatus",
                              type:"PUT",
                              dataType:"json",
                              data:{"id":getid,"status_id":setstatus},
                              success:function(response){
                                   console.log(response); // {success: 'Status Change Successfully'}
                                   console.log(response.success); // Status Change Successfully
                              
                                   Swal.fire({
                                        title: "Updated!",
                                        text: "Updated Successfully",
                                        icon: "success"
                                   });
                              }
                         });
                    });
     
          =>City Edit Api 
               =In CitiesController.php 
                    public function edit($id){
                         $city = City::findOrFail($id);
                         return response()->json($city);
                    }

               =In api > CitiesController.php     
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "editname" => "required|unique:cities,name,".$id,
                              "editcountry_id" => "required",
                              "editstatus_id" => "required",
                              "user_id" => "required"
                         ]);
                    
                         $city = City::findOrFail($id);
                         $city->name = $request["editname"];
                         $city->slug = Str::slug($request["editname"]);
                         $city->country_id = $request["editcountry_id"];
                         $city->status_id = $request["editstatus_id"];
                         $city->user_id = $request["user_id"];
                    
                         $city->save();
                    
                         return new CitiesResource($city);
                    }

               =In cities > index.blade.php 
                     <!-- start edit modal -->
                         <div id="editmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Edit Form</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="editform">
                                   
                                                  <div class="row align-items-end">
                                                       <div class="col-md-5 form-group mb-3">
                                                            <label for="editname">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="editname" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter city Name" value="{{ old('name') }}"/>
                                                       </div>
                                                       <div class="col-md-4 form-group mb-3">
                                                            <label for="editcountry_id">Country</label>
                                                            <select name="editcountry_id" id="editcountry_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($countries as $country)
                                                                      <option value="{{$country['id']}}">{{$country['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>

                                                       <div class="col-md-3 form-group mb-3">
                                                            <label for="status_id">Status</label>
                                                            <select name="editstatus_id" id="editstatus_id" class="form-control form-control-sm rounded-0">
                                                                 @foreach($statuses as $status)
                                                                      <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                 @endforeach     
                                                            </select>
                                                       </div>
                                                       <input type="hidden" name="id" id="id"/>
                                                       <input type="hidden" name="user_id" id="user_id" value="{{ $userdata['id'] }}"/>

                              
                                                       <div class="col-md-12 text-end mb-3">
                                                            <button type="submit" id="edit-btn" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                    <!-- end edit modal -->
                    ....


                    // Start Edit Form
                    $(document).on("click",".edit-btns",function(){
                         const getid = $(this).data("id");
                         // console.log(getid);

                         $.get(`cities/${getid}/edit`,function(response){
                              // console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}
                         
                              $("#editmodal").modal("show"); // toggle() can also used.
                              
                              $("#id").val(response.id);
                              $("#editname").val(response.name);
                              $("#editcountry_id").val(response.country_id);
                              $("#editstatus_id").val(response.status_id);
                         });
                    });
                    // End Edit Form

                    // Start Edit Modal
                    $("#editform").validate({
                         rules:{
                              editname:"required"
                         },
                         messages:{
                              editname:"Please enter the city name"
                         },

                         submitHandler:function(form){

                              const getid = $("#id").val();

                              $("#edit-btn").text("Sending....");
                              let formdata = $(form).serialize();

                              $.ajax({
                                   url: `api/cities/${getid}`,
                                   type:"PUT",
                                   data: formdata,
                                   dataType:"json",
                                   success:function(response){
                                        console.log(response);

                                        // console.log(response.status);
                                        
                                        if(response){
                                             
                                             const data = response.data;
                                             let html = `
                                             <tr id="delete_${data.id}">
                                                  <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="${data.id}" /></td>
                                                  <td>${data.id}</td>
                                                  <td>${data.name}</td>
                                                  <td>${data.country["name"]}</td>
                                                  <td>
                                                       <div class="form-checkbox form-switch">
                                                            <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                       </div>
                                                  </td>
                                                  <td>${data.user.name}</td>
                                                  <td>${data.created_at}</td>
                                                  <td>${data.updated_at}</td>
                                                  <td>
                                                       <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                       <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                  </td>
                                             </tr>
                                             `;
                                             $("#delete_"+data.id).replaceWith(html);

                                             $("#edit-btn").text("Update");
                                             $("#editmodal").modal("hide"); // toggle()

                                             Swal.fire({
                                                  title: "Updated!",
                                                  text: "Updated Successfully",
                                                  icon: "success"
                                             });

                                        }
                                   },
                                   error:function(response){
                                        console.log("Error:",response);
                                        $("#edit-btn").html("Try Again");
                                   }
                              })
                         }
                    });
                    // End Edit Modal

               =My idea better for edit 
                    =In cities > index.blade.php 
                         <!-- start edit modal -->
                              <div id="editmodal" class="modal fade">
                                   <div class="modal-dialog modal-dialog-centered">
                                        <div class="modal-content">
                                             <div class="modal-header">
                                                  <h6 class="modal-title">Edit Form</h6>
                                                  <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                             </div>

                                             <div class="modal-body">
                                                  <form id="editform">
                                        
                                                       <div class="row align-items-end">
                                                            <div class="col-md-5 form-group mb-3">
                                                                 <label for="editname">Name <span class="text-danger">*</span></label>
                                                                 <input type="text" name="editname" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter city Name" value="{{ old('name') }}"/>
                                                            </div>
                                                            <div class="col-md-4 form-group mb-3">
                                                                 <label for="editcountry_id">Country</label>
                                                                 <select name="editcountry_id" id="editcountry_id" class="form-control form-control-sm rounded-0">
                                                                      @foreach($countries as $country)
                                                                           <option value="{{$country['id']}}">{{$country['name']}}</option>
                                                                      @endforeach     
                                                                 </select>
                                                            </div>

                                                            <div class="col-md-3 form-group mb-3">
                                                                 <label for="status_id">Status</label>
                                                                 <select name="editstatus_id" id="editstatus_id" class="form-control form-control-sm rounded-0">
                                                                      @foreach($statuses as $status)
                                                                           <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                                      @endforeach     
                                                                 </select>
                                                            </div>
                                                            <input type="hidden" name="user_id" id="user_id" value="{{ $userdata['id'] }}"/>

                                   
                                                            <div class="col-md-12 text-end mb-3">
                                                                 <button type="submit" id="edit-btn" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                            </div>
                                                       </div>
                                                  </form>
                                             </div>

                                             <div class="modal-footer">

                                             </div>
                                        </div>
                                   </div>
                              </div>
                         <!-- end edit modal -->
                         ....
                         *drop id input field

                         // Start Edit Form
                         $(document).on("click",".edit-btns",function(){
                              const getid = $(this).data("id");
                              // console.log(getid);

                              $.get(`cities/${getid}/edit`,function(response){
                                   // console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}
                              
                                   
                                   $("#editname").val(response.name);
                                   $("#editcountry_id").val(response.country_id);
                                   $("#editstatus_id").val(response.status_id);
                              });

                              // Start Edit Modal
                              $("#editform").validate({
                                   rules:{
                                        editname:"required"
                                   },
                                   messages:{
                                        editname:"Please enter the city name"
                                   },

                                   submitHandler:function(form){

                                        $("#edit-btn").text("Sending....");
                                        let formdata = $(form).serialize();

                                        $.ajax({
                                             url: `api/cities/${getid}`,
                                             type:"PUT",
                                             data: formdata,
                                             dataType:"json",
                                             success:function(response){
                                                  console.log(response);

                                                  // console.log(response.status);
                                                  
                                                  if(response){
                                                       
                                                       const data = response.data;
                                                       let html = `
                                                       <tr id="delete_${data.id}">
                                                            <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="${data.id}" /></td>
                                                            <td>${data.id}</td>
                                                            <td>${data.name}</td>
                                                            <td>${data.country["name"]}</td>
                                                            <td>
                                                                 <div class="form-checkbox form-switch">
                                                                      <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                                                 </div>
                                                            </td>
                                                            <td>${data.user.name}</td>
                                                            <td>${data.created_at}</td>
                                                            <td>${data.updated_at}</td>
                                                            <td>
                                                                 <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                                 <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                                            </td>
                                                       </tr>
                                                       `;
                                                       $("#delete_"+data.id).replaceWith(html);

                                                       $("#edit-btn").text("Update");
                                                       $("#editmodal").modal("hide"); // toggle()

                                                       Swal.fire({
                                                            title: "Updated!",
                                                            text: "Updated Successfully",
                                                            icon: "success"
                                                       });

                                                  }
                                             },
                                             error:function(response){
                                                  console.log("Error:",response);
                                                  $("#edit-btn").html("Try Again");
                                             }
                                        })
                                   }
                              });
                              // End Edit Modal
                         });
                         // End Edit Form

                         *using a single getid for edit modal and update

          =>City Delete Api 
               =In api > CitiesController.php 
                    public function destroy(string $id)
                    {
                         $city = City::findOrFail($id);
                         $city->delete();
                         return new CitiesResource($city);
                    }
               
               =In cities > index.blade.php 
                    // Start Delete Item
                    // Using api route
                    $(document).on("click",".delete-btns",function(){
                         const getidx = $(this).attr("data-idx");
                         const getid = $(this).data("id");
                         // console.log(getid);
                         
                         Swal.fire({
                              title: "Are you sure?",
                              text: `You won't be able to revert this id ${getidx}`,
                              icon: "warning",
                              showCancelButton: true,
                              confirmButtonColor: "#3085d6",
                              cancelButtonColor: "#d33",
                              confirmButtonText: "Yes, delete it!"
                         }).then((result) => {
                              if (result.isConfirmed) {
                                   // data remove 
                                   $.ajax({
                                        url:`api/cities/${getid}`,
                                        type:"DELETE",
                                        dataType:"json",
                                        // data:{_token:"{{csrf_token()}}"},
                                        success:function(response){
                                             console.log(response);   // 1
                                             
                                             if(response){
                                                  // ui remove
                                                  $(`#delete_${getid}`).remove();
                                             
                                                  Swal.fire({
                                                       title: "Deleted!",
                                                       text: "Your file has been deleted.",
                                                       icon: "success"
                                                  });
                                             }
                                        },
                                        error:function(response){
                                             console.log("Error: ",response)
                                        }
                                   });
                                   
                              }
                         });   
                    });
                    // End Delete Item 

          =>City Bulk Delete 
               =In index.blade.php 
                    // Start Bulk Delete 
                    $("#selectalls").click(function(){
                         $(".singlechecks").prop("checked",$(this).prop("checked"));
                    });

                    $("#bulkdelete-btn").click(function(){
                         let getselectedids = [];
                         
                         // console.log($("input:checkbox[name=singlechecks]:checked"));
                         $("input:checkbox[name='singlechecks']:checked").each(function(){
                              getselectedids.push($(this).val());
                         });                
                         
                         // console.log(getselectedids); // (4) ['1', '2', '3', '4']

                         Swal.fire({
                              title: "Are you sure?",
                              text: `You won't be able to revert!`,
                              icon: "warning",
                              showCancelButton: true,
                              confirmButtonColor: "#3085d6",
                              cancelButtonColor: "#d33",
                              confirmButtonText: "Yes, delete it!"
                         }).then((result) => {
                              if (result.isConfirmed) {
                                   // data remove 
                                   $.ajax({
                                        url:"{{ route('cities.bulkdeletes') }}",
                                        type:"DELETE",
                                        dataType:"json",
                                        data:{
                                             selectedids:getselectedids,
                                             _token:"{{ csrf_token() }}"
                                        },
                                        success:function(response){
                                             console.log(response);   // 1
                                             
                                             if(response){
                                                  // ui remove
                                                  $.each(getselectedids,function(key,val){
                                                       $(`#delete_${val}`).remove();
                                                  });
                                             
                                                  Swal.fire({
                                                       title: "Deleted!",
                                                       text: "Your file has been deleted.",
                                                       icon: "success"
                                                  });
                                             }
                                        },
                                        error:function(response){
                                             console.log("Error: ",response)
                                        }
                                   });
                                   
                              }
                         });   
                    });
                    // End Bulk Delete 

               =In CitiesController.php 
                    public function bulkdeletes(Request $request)
                    {
                         try{
                              $getselectedids = $request->selectedids;
                              City::whereIn("id",$getselectedids)->delete();
                              return response()->json(["success"=>"Selected data have been deleted successfully"]);
                         }catch(Exception $e){
                              Log::error($e->getMEssage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    }
     
     =>Warehouses Pagination 
          =In WarehousesController.php 
               public function index()
               {
                    $warehouses = Warehouse::paginate(5);
                    $statuses = Status::whereIn("id",[3,4])->get();
                    return view("warehouses.index",compact("warehouses","statuses"));
               }

               *Nothing change in UI warehouse because data are fetched with api route.

          =In api > WarehousesController.php 
               public function index()
               {
                    // $warehouses = Warehouse::all();
                    // return new WarehousesCollection($warehouses);

                    $warehouses = Warehouse::paginate(5);
                    return  WarehousesResource::collection($warehouses);
               }
               *Warehouses are showed as pagination limits. Items didn't change when pagniation page change.


          =In warehouses > index.blade.php 
               </table>

               {{ $warehouses->links() }}

          =In WarehousesController.php 
               public function index()
               {
                    $warehouses = Warehouse::all();
                    $statuses = Status::whereIn("id",[3,4])->get();
                    return view("warehouses.index",compact("warehouses","statuses"));
               }
               
               Error (*Method Illuminate\Database\Eloquent\Collection::links does not exist.)
               *links() closely work with UI route.

     =>Scroll Feed (cities)

          =In api > CitiesController.php 
               public function index()
               {
                    $cities = City::paginate(3);
                    return  CitiesResource::collection($cities);
               }
               
          http://127.0.0.1:8000/api/cities?page=1
          *result (first 3 cities)
          {
               "data": [
               {
                    "id": 15,
                    "name": "yangon",
                    "slug": "yangon",
                    "country_id": 154,
                    "status_id": 3,
                    "user_id": 1,
                    "created_at": "07 06 2024",
                    "updated_at": "07 06 2024",
                    "country": {
                    "id": 154,
                    "name": "Myanmar"
                    },
                    "user": {
                    "id": 1,
                    "name": "admin"
                    },
                    "status": {
                    "id": 3,
                    "name": "On"
                    }
               },
               {
                    "id": 25,
                    "name": "mandalay",
                    "slug": "mandalay",
                    "country_id": 112,
                    "status_id": 3,
                    "user_id": 1,
                    "created_at": "12 06 2024",
                    "updated_at": "12 06 2024",
                    "country": {
                    "id": 112,
                    "name": "Japan"
                    },
                    "user": {
                    "id": 1,
                    "name": "admin"
                    },
                    "status": {
                    "id": 3,
                    "name": "On"
                    }
               },
               {
                    "id": 26,
                    "name": "pyin oo lwin",
                    "slug": "pyin-oo-lwin",
                    "country_id": 112,
                    "status_id": 3,
                    "user_id": 1,
                    "created_at": "12 06 2024",
                    "updated_at": "12 06 2024",
                    "country": {
                    "id": 112,
                    "name": "Japan"
                    },
                    "user": {
                    "id": 1,
                    "name": "admin"
                    },
                    "status": {
                    "id": 3,
                    "name": "On"
                    }
               }
               ],
               "links": {
               "first": "http://127.0.0.1:8000/api/cities?page=1",
               "last": "http://127.0.0.1:8000/api/cities?page=2",
               "prev": null,
               "next": "http://127.0.0.1:8000/api/cities?page=2"
               },
               "meta": {
               "current_page": 1,
               "from": 1,
               "last_page": 2,
               "links": [
                    {
                    "url": null,
                    "label": "&laquo; Previous",
                    "active": false
                    },
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=1",
                    "label": "1",
                    "active": true
                    },
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=2",
                    "label": "2",
                    "active": false
                    },
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=2",
                    "label": "Next &raquo;",
                    "active": false
                    }
               ],
               "path": "http://127.0.0.1:8000/api/cities",
               "per_page": 3,
               "to": 3,
               "total": 5
               }
          }
          *"meta" key provided for pagination

          http://127.0.0.1:8000/api/cities?page=2
          *result (last 2 cities)
          {
               "data": [
               {
                    "id": 27,
                    "name": "bago",
                    "slug": "bago",
                    "country_id": 112,
                    "status_id": 3,
                    "user_id": 1,
                    "created_at": "12 06 2024",
                    "updated_at": "12 06 2024",
                    "country": {
                    "id": 112,
                    "name": "Japan"
                    },
                    "user": {
                    "id": 1,
                    "name": "admin"
                    },
                    "status": {
                    "id": 3,
                    "name": "On"
                    }
               },
               {
                    "id": 28,
                    "name": "pathein",
                    "slug": "pathein",
                    "country_id": 112,
                    "status_id": 3,
                    "user_id": 1,
                    "created_at": "12 06 2024",
                    "updated_at": "12 06 2024",
                    "country": {
                    "id": 112,
                    "name": "Japan"
                    },
                    "user": {
                    "id": 1,
                    "name": "admin"
                    },
                    "status": {
                    "id": 3,
                    "name": "On"
                    }
               }
               ],
               "links": {
               "first": "http://127.0.0.1:8000/api/cities?page=1",
               "last": "http://127.0.0.1:8000/api/cities?page=2",
               "prev": "http://127.0.0.1:8000/api/cities?page=1",
               "next": null
               },
               "meta": {
               "current_page": 2,
               "from": 4,
               "last_page": 2,
               "links": [
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=1",
                    "label": "&laquo; Previous",
                    "active": false
                    },
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=1",
                    "label": "1",
                    "active": false
                    },
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=2",
                    "label": "2",
                    "active": true
                    },
                    {
                    "url": null,
                    "label": "Next &raquo;",
                    "active": false
                    }
               ],
               "path": "http://127.0.0.1:8000/api/cities",
               "per_page": 3,
               "to": 5,
               "total": 5
               }
          }

          http://127.0.0.1:8000/api/cities?page=3
          *result (exceed pagination page number)
          {
               "data": [],
               "links": {
               "first": "http://127.0.0.1:8000/api/cities?page=1",
               "last": "http://127.0.0.1:8000/api/cities?page=2",
               "prev": "http://127.0.0.1:8000/api/cities?page=2",
               "next": null
               },
               "meta": {
               "current_page": 3,
               "from": null,
               "last_page": 2,
               "links": [
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=2",
                    "label": "&laquo; Previous",
                    "active": false
                    },
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=1",
                    "label": "1",
                    "active": false
                    },
                    {
                    "url": "http://127.0.0.1:8000/api/cities?page=2",
                    "label": "2",
                    "active": false
                    },
                    {
                    "url": null,
                    "label": "Next &raquo;",
                    "active": false
                    }
               ],
               "path": "http://127.0.0.1:8000/api/cities",
               "per_page": 3,
               "to": null,
               "total": 5
               }
          }

          =In api > CitiesController.php 
               public function index()
               {
                    $cities = City::paginate(30);
                    return  CitiesResource::collection($cities);
               }
               =insert more than 40 test cities 

          =In index.blade.php 
               </table>

               <div class="loader">
                    <div class="loader-item"></div>
                    <div class="loader-item"></div>
                    <div class="loader-item"></div>
               </div>
               ....
               // Start Fetch All Datas by paginate
               const gettbody = document.querySelector("#mytable tbody");
               const getloader = document.querySelector(".loader");
               let page = 1;

               async function fetchalldatasbypaginate(){
                    const url = `api/cities?page=${page}`;

                    let results;

                    await fetch(url).then(response=>{
                         // console.log(response);
                         return response.json();
                    }).then(data=>{
                         // console.log(data); // object
                         results = data.data;
                         // console.log(results);
                    }).catch(err=>{
                         console.log(err);
                    });

                    return results;
               }
               // fetchalldatasbypaginate();

               async function alldatastodom(){
                    const getresults = await fetchalldatasbypaginate()
                    // console.log(getresults);

                    getresults.forEach((data)=>{
                         const newtr = document.createElement("tr");
                         newtr.id = `delete_${data.id}`;

                         newtr.innerHTML = `
                              <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="${data.id}" /></td>
                              <td>${data.id}</td>
                              <td>${data.name}</td>
                              <td>${data.country["name"]}</td>
                              <td>
                                   <div class="form-checkbox form-switch">
                                        <input type="checkbox" class="form-check-input change-btn" ${data.status_id == 3 ? "checked" : "" }  data-id="${data.id}" />
                                   </div>
                              </td>
                              <td>${data.user.name}</td>
                              <td>${data.created_at}</td>
                              <td>${data.updated_at}</td>
                              <td>
                                   <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                   <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${data.id}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                              </td>
                         `
                         
                         // console.log(newtr);
                         gettbody.appendChild(newtr);
                    });
               }
               alldatastodom();

               document.addEventListener("scroll",()=>{
                    // console.log(document.documentElement.scrollTop);
                    // console.log(document.documentElement.scrollHeight);
                    // console.log(document.documentElement.clientHeight);

                    const {scrollTop,scrollHeight,clientHeight} = document.documentElement;

                    if(scrollTop + clientHeight >= scrollHeight - 5){
                         showloader();
                         
                    }
               });

               // Show loader & fetch more datas 
               function showloader(){
                    getloader.classList.add("show");

                    setTimeout(()=>{
                         getloader.classList.remove("show");
                         setTimeout(()=>{
                              page++;
                              alldatastodom();
                         },300)
                    },5000)
               }
               // Show loader & fetch more datas 


               // End Fetch All Datas by paginate

               =(firstly fetch 30 cities) by invoking function 
               =scroll reach the end will (fetch next 30 cities in page 2)
               =show loader bar when fetching
               =hide loader bar after fetching process
               
          =In public > assets > dist > css > loader.css 
               .loader-container{
                    position:relative;
               }
               .loader{
                    display: flex;

                    position: absolute;
                    left: 50%;
                    bottom: 10px;

                    transform: translate(-50%);


                    opacity: 0;

                    z-index: 1;
               }
               .loader.show{
                    opacity: 1;
               }
               .loader-item{
                    width: 7px;
                    height: 7px;
                    background-color: rgba( 0, 0, 0, 0.3);
                    border-radius: 50%;

                    margin: 5px;

                    animation:  myani 0.5s ease-in-out infinite;
               }
               .loader-item:nth-of-type(2){
                    animation-delay: 0.1s;
               }
               .loader-item:nth-of-type(3){
                    animation-delay: 0.2s;
               }

               @keyframes myani {
                    0%{
                         transform: translateY(0);
                    }
                    50%{
                         transform: translateY(-5px);
                    }
                    100%{
                         transform: translateY(0);
                    }
               }

          =>Fetch cities by scrolling table element 
               -document can have other elements 
               -for getting more cities specifically by sperateley handling table element 

               =In cities > index.blade.php 
                    @section("css")
                         <link href="{{ asset('assets/dist/css/loader.css') }}" rel="stylesheet" />     
                         <style type="text/css">
                              
                              .table-container{
                                   height:300px;
                                   /* background:lightblue; */
                                   overflow-y:scroll;

                                   position:relative;
                              }
                              .scrollinfo{
                                   margin: 10px 0;
                              }
                              
                         </style>
                    @endsection

                    <div class="table-container">
                         <table id="mytable"  class="table table-sm table-hover border">
               
                              <thead>
                                   <th>
                                        <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                                   </th>
                                   <th>Id</th>
                                   <th>Name</th>
                                   <th>Country</th>
                                   <th>Status</th>
                                   <th>By</th>
                                   <th>Created At</th>
                                   <th>Updated At</th>
                                   <th>Action</th>
                              </thead>

                              <tbody>
                         
                              </tbody>

                         </table>
                         {{-- $cities->links("pagination::bootstrap-4") --}}
                    </div>  
                    ....


                    const gettablecontainer = document.querySelector(".table-container");
                    gettablecontainer.addEventListener("scroll",()=>{

                         const {scrollTop,scrollHeight,clientHeight} = document.querySelector(".table-container");
                         // console.log(scrollTop);
                         // console.log(scrollHeight);
                         // console.log(clientHeight);

                         if(scrollTop + clientHeight >= scrollHeight){
                              showloader();
                         }
                    });

                    // Show loader & fetch more datas 
                    async function showloader(){
                         getloader.classList.add("show");
                         
                         page++;
                         const nextresults = await alldatastodom();

                         getloader.classList.remove("show");
                    }
                    // Show loader & fetch more datas 

     =>Dynamic Filter 
          Choose a country - should display cities in that country 
          
          =E-commerce idea
          Choose a product category - should display items tagged to that category

     =>Payment Type
          =Migration

               php artisan make:model Paymenttype -m
               =In create_paymenttypes_tables
                    up()
                    $table->string("name")->unique();
                    $table->string("slug");
                    $table->unsignedBigInteger("status_id");
                    $table->unsignedBigInteger("user_id");
               
               php artisan migrate 
          
          =In Paymenttype.php 
               protected $table = "paymenttypes";
               protected $primaryKey = "id";
               protected $fillable = [
                    "name",
                    "slug",
                    "status_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }

          php artisan make:controller PaymenttypesController

          =In web.php 
               Route::resource("paymenttypes",PaymenttypesController::class);
               Route::get("/paymenttypesstatus",[PaymenttypesController::class,"typestatus"]);

          =Async Create Ajax
               =In PaymenttypesController.php 
                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|max:50|unique:paymenttypes",
                              "status_id" => "required|in:3,4",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         try{
                              $paymenttype = new Paymenttype();
                              $paymenttype->name = $request["name"];
                              $paymenttype->slug = Str::slug($request["name"]);
                              $paymenttype->status_id = $request["status_id"];
                              $paymenttype->user_id = $user_id;
                              $paymenttype->save();

                              if($paymenttype){
                                   return response()->json(["status"=>"success","data"=>$paymenttype]);
                              }
                         }catch(Exception $e){
                              Log::error($e->getMessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    
                    }

               =In paymenttypes > index.blade.php 
                   <form id="createform" action="" method="">

                         <div class="row align-items-end">
                              <div class="col-md-4">
                                   <label for="name">Name <span class="text-danger">*</span></label>
                                   @error("name")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Type Name" value="{{ old('name') }}"/>
                              </div>

                              <div class="col-md-4">
                                   <label for="status_id">Status</label>
                                   @error("status_id")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                        @foreach($statuses as $status)
                                             <option value="{{$status['id']}}">{{$status['name']}}</option>
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-4">
                                   <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                   <button type="submit" id="create-btn" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                              </div>
                         </div>
                    </form> 
                    ....

                     // Start Create Form
                    async function createhandler(){
                         let result;
                         try{
                              result = await $.ajax({
                                   url:"{{route('paymenttypes.store')}}",
                                   type:"POST",
                                   dataType:"json",
                                   // data:$("#createform").serialize(),
                                   beforeSend: function(){
                                        $("#create-btn").text("Sending....")
                                   },
                                   data:$("#createform").serializeArray(),
                                   
                              });
                              return result;
                         }catch(error){
                              console.log("Error: ",error);
                         }
                    }

                    $("#create-btn").click(async function(e){
                         e.preventDefault();

                         await createhandler().then((response)=>{
                              console.log(response);
                              // console.log(response.status);
                              // console.log(this.data);

                              const data = response.data;
                              $("#mytable").prepend(
                                   `<tr id="${'delete_'+data.id}">
                                        <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="${data.id}" /></td>
                                        <td>${data.id}</td>
                                        <td>${data.name}</td>
                                        <td>
                                             <div class="form-checkbox form-switch">
                                                  <input type="checkbox" class="form-check-input change-btn" ${data.status_id === 3 ? "checked" : ""} data-id="${data.id}" />
                                             </div>
                                        </td>
                                        <td>${data.user_id}</td>
                                        <td>${data.created_at}</td>
                                        <td>${data.updated_at}</td>
                                        <td>
                                             <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="${data.id}" data-name="${data.name}" data-status="${data.status_id}"><i class="fas fa-pen"></i></a>
                                             <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                        </td>
                                   </tr>
                                   `
                              );
                              // clear form
                              // $("#createform")[0].reset();
                              $("#createform").trigger("reset");

                              $(this).text("Submit")

                         });
                         
                    
                    });
                    // End Create Form
                    
          =Async Status Change Ajax
               =In PaymenttypesController.php 
                    public function typestatus(Request $request){
                         $paymenttype = Paymenttype::findOrFail($request["id"]);
                         $paymenttype->status_id = $request["status_id"];
                         $paymenttype->save();

                         return response()->json(["success"=>"Status Change Successfully"]);
                    }
               =In paymenttypes > index.blade.php 
                    //Start change-btn
                    $(".change-btn").change(async function(){
                         var getid = $(this).data("id");
                         // console.log(getid); // 1 2

                         var setstatus = $(this).prop("checked") === true ? 3 : 4;
                         // console.log(setstatus); // 3 4

                         await $.ajax({
                              url:"paymenttypesstatus",
                              type:"GET",
                              dataType:"json",
                              data:{"id":getid,"status_id":setstatus},
                              success:function(response){
                                   console.log(response); // {success: 'Status Change Successfully'}
                                   // console.log(response.success); // Status Change Successfully

                                   Swal.fire({
                                        title: "Updated!",
                                        text: "Updated Successfully",
                                        icon: "success"
                                   });
                              }
                         });
                    });
                    // End change btn

          =Async Edit Ajax
               =In paymenttypes > index.blade.php 
                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         
                         $("#editname").val($(this).attr("data-name"));
                         $("#editstatus_id").val($(this).data("status"));
                         
                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("data-id",getid); // send id to formaction for request id from submit action
                         // console.log(getid);
                    });

                    $("#formaction").submit(async function(e){
                         e.preventDefault();

                         const getid = $(this).attr("data-id");
                         console.log(getid);

                         await $.ajax({
                              url:`paymenttypes/${getid}`,
                              type:"PUT",
                              dataType:"json",
                              data:$("#formaction").serialize(), // name=&status_id=4
                              beforeSend: function(){
                                   $("#update-btn").text("Sending....")
                              },
                              success:function(response){
                                   // console.log(this.data);  //name=kpay&status_id=3
                                   // console.log(response);   // paymenttypes:525 {status: 'success', data: {…}}
                                   console.log(response.status);
                                   $("#editmodal").modal("hide");
                                   $("#update-btn").text("Update")

                                   // window.location.reload(); // temp reload
                              }
                         });

                    });
                    // End Edit Form

          =Async Delete Ajax with toaster 
               =In paymenttypes > index.blade.php 
                    // Start Notify Box (toaster)
                    function notify(stage,title,msg=null){
                         switch(stage){
                              case "success": 
                                   toastr.success(msg, title,{
                                        timeOut:1000
                                   });
                                   break;
                              case "warning":
                                   toastr.warning(msg, title,{
                                        timeOut:1000
                                   });
                                   break;
                              case "error":
                                   toastr.error(msg, title,{
                                        timeOut:1000
                                   });
                                   break;
                         }
                    }
                    // End Notify Box (toaster)
                    
                    $(".delete-btns").click(async function(){
                         const getidx = $(this).attr("data-idx");
                         const getid = $(this).data("id");
                         // console.log(getid);
                         
                         if(confirm(`Are you sure !!! you want to Delete ${getidx} ?`)){
                              // ui remove
                         
                              // data remove 
                              await $.ajax({
                                   url:`paymenttypes/${getid}`,
                                   type:"DELETE",
                                   dataType:"json",
                                   // data:{_token:"{{csrf_token()}}"},
                                   success:function(response){
                                        if(response && response.status === "success"){
                                             const getdata = response.data;
                                             $(`#delete_${getdata.id}`).remove();
                                             // toastr.success('message', 'title',{
                                             //      options
                                             // });

                                             // reuseable toaster
                                             notify("warning","Delete Sucessfully","Can't Undo");
                                        }
                                   }
                              });
                              return true;
                         }else{
                              return false;
                         }
                    });

          "paymenttypes"
               Bank Transfer
               Mobile Banking
               Payment Gateway
               Wire Transfer
               Thirdparty


     =>Adding paymenttype_id to Paymentmethod 
          =Migration 
               php artisan make:migration add_paymenttype_id_to_paymentmethods_table --table=paymentmethods

          =In add_paymenttype_id_to_paymentmethods_table.php 
               up()
                    $table->unsignedBigInteger("paymenttype_id")->after("slug");
               down()
                    $table->dropColumn("paymenttype_id");

          php artisan migrate 

          =In Paymentmethod.php 
               protected $table = "paymentmethods";
               protected $primaryKey = "id";
               protected $fillable = [
                    "image",
                    "name",
                    "slug",
                    "paymenttype_id",
                    "status_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function paymenttype(){
                    return $this->belongsTo(Paymenttype::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }

          =>Common Add Column Error 
               =After adding column, those value become 0, NULLL depending on its column datatype.
               =It will cause an error on view page, when retrieving its value with foreign key relationship.
                    - because it retrieve unexisting value from base table.

               =In paymentmethods > index.blade.php 
                    <table id="mytable" class="table table-sm table-hover border">
                         <thead>
                              <th>
                                   <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                              </th>
                              <th>No</th>
                              <th>Name</th>
                              <th>Payment Type</th>
                    ....
                    <tr id="delete_{{$paymentmethod->id}}">
                         <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="{{$paymentmethod->id}}" /></td>
                         <td>{{++$idx}}</td>
                         <td>{{$paymentmethod["name"]}}</td>
                         <td>{{$paymentmethod->paymenttype['name']}}</td>
                    
               *Error (Trying to access array offset on value of type null)
               Solution 
                    we have to put the value that actually exists in its base table.

          =>Create Modification
               =In PaymentmethodsController.php 
                    public function index()
                    {
                         $paymentmethods = Paymentmethod::all();
                         $paymenttypes = Paymenttype::where("status_id",3)->get();
                         $statuses = Status::whereIn("id",[3,4])->get();
                         return view("paymentmethods.index",compact("paymentmethods","paymenttypes","statuses"));
                    }

                    public function store(Request $request)
                    {
                         $this->validate($request,[
                              "name" => "required|max:50|unique:paymentmethods",
                              "paymenttype_id" => "required",
                              "status_id" => "required|in:3,4",
                         ]);

                         $user = Auth::user();
                         $user_id = $user->id;

                         try{
                              $paymentmethod = new Paymentmethod();
                              $paymentmethod->name = $request["name"];
                              $paymentmethod->paymenttype_id = $request["paymenttype_id"];
                              $paymentmethod->slug = Str::slug($request["name"]);
                              $paymentmethod->status_id = $request["status_id"];
                              $paymentmethod->user_id = $user_id;
                              $paymentmethod->save();

                              if($paymentmethod){
                                   return response()->json(["status"=>"success","data"=>$paymentmethod]);
                              }
                         }catch(Exception $e){
                              Log::error($e->getMessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    }

               =In paymentmethods > index.blade.php 
                    <form id="createform" action="" method="">

                         <div class="row align-items-end">
                              <div class="col-md-3">
                                   <label for="name">Name <span class="text-danger">*</span></label>
                                   @error("name")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Type Name" value="{{ old('name') }}"/>
                              </div>

                              <div class="col-md-3">
                                   <label for="paymenttype_id">Payment Type</label>
                                   @error("status_id")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <select name="paymenttype_id" id="paymenttype_id" class="form-control form-control-sm rounded-0">
                                        @foreach($paymenttypes as $paymenttype)
                                             <option value="{{$paymenttype['id']}}">{{$paymenttype['name']}}</option>
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-3">
                                   <label for="status_id">Status</label>
                                   @error("status_id")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                                   <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                        @foreach($statuses as $status)
                                             <option value="{{$status['id']}}">{{$status['name']}}</option>
                                        @endforeach     
                                   </select>
                              </div>

                              <div class="col-md-3">
                                   <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                                   <button type="submit" id="create-btn" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                              </div>
                         </div>
                    </form>
                    ....

                    // Start Create Form
                    $("#create-btn").click(function(e){
                         e.preventDefault();
                         
                         $.ajax({
                              url:"{{route('paymentmethods.store')}}",
                              type:"POST",
                              dataType:"json",
                              // data:$("#createform").serialize(),
                              data:$("#createform").serializeArray(),
                              success:function(response){
                                   console.log(response);
                                   // console.log(response.status);
                                   // console.log(this.data);

                                   const data = response.data;
                                   $("#mytable").prepend(
                                        `<tr id="${'delete_'+data.id}">
                                             <th>
                                                  <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                                             </th>
                                             <td>${data.id}</td>
                                             <td>${data.name}</td>
                                             <td>${data.paymenttype_id}</td>
                                             <td>
                                                  <div class="form-checkbox form-switch">
                                                       <input type="checkbox" class="form-check-input change-btn" ${data.status_id === 3 ? "checked" : ""} data-id="${data.id}" />
                                                  </div>
                                             </td>
                                             <td>${data.user_id}</td>
                                             <td>${data.created_at}</td>
                                             <td>${data.updated_at}</td>
                                             <td>
                                                  <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="${data.id}" data-name="${data.name}" data-status="${data.status_id}"><i class="fas fa-pen"></i></a>
                                                  <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                             </td>
                                        </tr>
                                        `
                                   );
                              },
                              error:function(response){
                                   console.log("Error:",response);
                              }
                         })
                    });
                    // End Create Form

          =>Edit Modification
               =In PaymentmethodsController.php 
                    public function update(Request $request, string $id)
                    {
                         $this->validate($request,[
                              "name" => ["required","max:50","unique:paymentmethods,name,".$id],
                              "paymenttype_id" => "required",
                              "status_id" => ["required","in:3,4"],
                         ]);

                         $user = Auth::user();
                         $user_id = $user["id"];

                         try{
                              $paymentmethod = Paymentmethod::findOrFail($id);
                              $paymentmethod->name = $request["name"];
                              $paymentmethod->paymenttype_id = $request["paymenttype_id"];
                              $paymentmethod->slug = Str::slug($request["name"]);
                              $paymentmethod->status_id = $request["status_id"];
                              $paymentmethod->user_id = $user_id;
                              $paymentmethod->save();

                              if($paymentmethod){
                                   return response()->json(["status"=>"success","data"=>$paymentmethod]);
                              }
                              return response()->json(["status"=>"failed","data"=>"Failed to update Payment Method"]);
                         }catch(Exception $e){
                              Log:error($e->getMessage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                         
                    }
               =In paymentmethods > index.blade.php 
                    <td>
                         <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$paymentmethod->id}}" data-name="{{$paymentmethod->name}}" data-paymenttype="{{$paymentmethod->paymenttype_id}}" data-status="{{$paymentmethod->status_id}}"><i class="fas fa-pen"></i></a>
                         <!-- <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a> -->
                         <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}" data-id="{{$paymentmethod->id}}"><i class="fas fa-trash-alt"></i></a>
                    </td>     
                    ....


                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         
                         $("#editname").val($(this).attr("data-name"));
                         $("#editstatus_id").val($(this).data("status"));
                         $("#editpaymenttype_id").val($(this).data("paymenttype"));
                         
                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("data-id",getid); // send id to formaction for request id from submit action
                         // console.log(getid);
                    });

                    $("#formaction").submit(function(e){
                         e.preventDefault();

                         const getid = $(this).attr("data-id");
                         console.log(getid);

                         $.ajax({
                              url:`paymentmethods/${getid}`,
                              type:"PUT",
                              dataType:"json",
                              data:$("#formaction").serialize(), // name=&status_id=4
                              success:function(response){
                                   // console.log(this.data);  //name=kpay&status_id=3
                                   // console.log(response);   // paymentmethods:525 {status: 'success', data: {…}}
                                   console.log(response.status);
                                   $("#editmodal").modal("hide");

                                   Swal.fire({
                                        title: "Updated!",
                                        text: "Updated Successfully",
                                        icon: "success"
                                   });

                                   // window.location.reload(); // temp reload
                              }
                         });

                    });
                    // End Edit Form    

     =>Student Quick Search or Student Help Desk 
          =In adminnavbar.blade.php 
               <!-- search -->
               <form id="quicksearchform" class="me-auto" action="" method="">
                    <div class="input-group">
                    <input type="text" name="quicksearch" id="quicksearch" class="form-control border-0 shadow-none" placeholder="Search Something..."/>
                    <div class="input-group-append">
                         <button type="submit" id="quicksearch-btn" class="btn btn-primary "><i class="fas fa-search"></i></button>
                    </div>
                    </div>
               </form>
               <!-- search -->

          =In web.php 
               Route::post("students/quicksearch",[StudentsController::class,"quicksearch"])->name("students.quicksearch");

          =In StudentsController.php 
               public function quicksearch(Request $request){
                    $students = "";

                    if($request->keyword != ""){
                         $students = Student::where("regnumber","LIKE","%".$request->keyword."%")->get();
                    }
                    return response()->json(["datas"=>$students]);
               }
          =In adminfooter.blade.php 
               
               <!-- START MODAL AREA -->
               <!-- Start Quicksearch Modal -->
               <div class="#quicksearchmodal" class="modal fade">
                    <div class="modal-dialog modal-dialog-center">
                         <div class="modal-content rounded-0">
                         <div class="modal-header">
                              <h6 class="modal-title">Result</h6>
                              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                         </div>
                         <div class="modal-body">
                              <ul class="list-group">
                                   <!-- <li><a href=""></a></li> -->
                              </ul>
                         </div>
                         </div>
                    </div>
               </div>
               <!-- End Quicksearch Modal -->
               <!-- END MODAL AREA -->
               ....

              <!-- Extra js -->
               @yield('scripts')

               <script>

                    // Start Quick Search
                    $("#quicksearch-btn").on("click",function(e){
                         e.preventDefault();
                         quicksearch();
                    });

                    function quicksearch(){
                         // console.log("hay");

                         const getsearch = $("#quicksearch").val();
                         // console.log(getsearch);

                         $.post("{{ route('students.quicksearch') }}",
                         {
                              _token:$("meta[name='csrf-token']").attr("content"),
                              keyword: getsearch
                         }
                         ,function(response){
                              // console.log(response);
                              showresulttodom(response);
                         });
                    }
                    function showresulttodom(response){
                         console.log(response);
                         let newlis="";
                         $("#quicksearchmodal").modal("show"); // toggle

                         if(response.datas.length <= 0){
                              newlis += `<li class='list-group-item'>No Data</li>`;
                         }else{
                              for(let x=0; x<response.datas.length; x++){
                              newlis += `<li class='list-group-item'><a href="{{ URL::to('students/${response.datas[x].id}') }}">${response.datas[x].regnumber} / ${response.datas[x].firstname} ${response.datas[x].lastname}</a></li>`;
                              }
                         }
                         $("#quicksearchmodal .modal-body ul.list-group").html(newlis);

                         // clear form 
                         // $("#quicksearchform")[0].reset();
                         $("#quicksearchform").trigger("reset")
                    }
                    // End Quick Search
               </script>

               *URL Append Issue 
                    newlis += `<li class='list-group-item'><a href='students/${response.datas[x].id}'>${response.datas[x].regnumber} / ${response.datas[x].firstname} ${response.datas[x].lastname}</a></li>`;

                    =search students in the following url
                         http://127.0.0.1:8000/dashboard
                         http://127.0.0.1:8000/cities 

                         *result generated errorlessly

                    =search students in the redirected url (http://127.0.0.1:8000/students/1)
                    http://127.0.0.1:8000/students/students/3
                    *Error (404 Not Found)

          =Async Quick Search 
               =In adminfooter.blade.php 
                    async function quicksearch(){
                         // console.log("hay");

                         const getsearch = $("#quicksearch").val();
                         // console.log(getsearch);

                         await $.post("{{ route('students.quicksearch') }}",
                         {
                              _token:$("meta[name='csrf-token']").attr("content"),
                              keyword: getsearch
                         }
                         ,function(response){
                              // console.log(response);
                              showresulttodom(response);
                         });
                    }

               *By implementing async, await loading can be displayed.


     =>Ajax Search for Status
          -Search box for default reload laravel feature is not working.
          Cities is alerady fetched with ajax.

          php artisan make:controller Api/StatusesController --api 

          php artisan make:resource StatusesResource

          =In api.php 
               *use App\Http\Controllers\Api\StatusesController;
               Route::apiResource("statuses",StatusesController::class,["as"=>"api"]);

          =In StatusesResource.php 
               public function toArray(Request $request): array
               {
                    return [
                         "id"=>$this->id,
                         "name"=>$this->name,
                         "slug"=>$this->slug,
                         "user_id"=>$this->user_id,
                         "created_at"=>$this->created_at->format("d m Y"),
                         "updated_at"=>$this->updated_at->format("d m Y"),

                         "user"=>User::where("id",$this->user_id)->select(["id","name"])->first(),
                    ];
               }
          
          =In api > StatusesController.php 
               public function index()
               {
                    $statuses = Status::all();
                    return  StatusesResource::collection($statuses);
               }

               public function search(Request $request){
                    $query = $request->input("query");

                    if($query){
                         $statuses = Status::where("name","LIKE","%$query%")->get();
                    }else{
                         $statuses = Status::all();
                    }

                    return  StatusesResource::collection($statuses);
               }
               *can also write search() code in index()

          =In api.php 
               Route::get("/statusessearch",[StatusesController::class,"search"]);

          =In statuses > index.blade.php 
               <div class="col-md-12 mb-2">
                    <div>
                         <a href="javascript:void(0);" id="bulkdelete-btn" class="btn btn-danger btn-sm rounded-0">Bulk Delete</a>
                    </div>
                    <div>
                         <form action="" method="">
                              <div class="row justify-content-end">
                                   <div class="col-md-2 col-sm-6 mb-2">
                                        <div class="input-group">
                                             <input type="text" name="filtername" id="filtername" class="form-control form-control-sm rounded-0" placeholder="Search...." value="{{ request('filtername') }}"/>
                                             <button type="button" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                                        </div>
                                   </div>
                              </div>
                         </form>
                    </div>
               </div>
               ....
               <table id="mytable" class="table table-sm table-hover border">
          
                    <thead>
                         <th>
                              <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                         </th>
                         <th>No</th>
                         <th>Name</th>
                         <th>By</th>
                         <th>Created At</th>
                         <th>Updated At</th>
                         <th>Action</th>
                    </thead>
          
                    <tbody>
                        
                    </tbody>
          
               </table>
               ....


                // Start Passing Header Token
               $.ajaxSetup({
                    header:{
                         'X-CSRF-TOKEN': $("meta[name='csrf-token']").attr("content"),
                    }
               })
               // End Passing Header Token
                    
               // Start Fetch All Datas 
               function fetchalldatas(query=""){
                    $.ajax({
                         // url:"{{url('api/statusessearch')}}",
                         url:"{{'api/statusessearch'}}",
                         method:"GET",
                         data:{"query":query},
                         dataType:"json",
                         success:function(response){
                              console.log(response); // {status: 'scuccess', data: Array(2)}
                              const datas = response.data;
                              // console.log(datas);
                              
                              let html;
                              datas.forEach(function(data,idx){
                                   // console.log(data);
                                   html += `
                                   <tr id="delete_${data.id}">
                                        <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="${data.id}" /></td>
                                        <td>${++idx}</td>
                                        <td>${data.name}</td>
                                        <td>${data.user.name}</td>
                                        <td>${data.created_at}</td>
                                        <td>${data.updated_at}</td>
                                        <td>
                                             <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                             <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${idx}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                        </td>
                                   </tr>
                                   `;

                              });
                              // $("#mytable tbody").html(html);

                              $("#mytable tbody").empty();
                              $("#mytable tbody").prepend(html);

                         }
                    });
               }
               fetchalldatas();
               // End Fetch All Datas

               // Start Filter by search query

               // actively searching while typing
               // $("#filtername").on("keyup",function(e){
               //      e.preventDefault();
               //      const query = $(this).val();
               //      // console.log(query);

               //      fetchalldatas(query);
               // });

               $("#btn-search").on("click",function(e){
                    e.preventDefault();
                    const query = $("#filtername").val();
                    // console.log(query);

                    fetchalldatas(query);
               });
               // End Filter by search query

          **$("#mytable tbody").prepend(html); only will add filter results on the top.

          =>Ajax Search with Loading 
               =In statuses > index.blade.php 

                   </table>

                    <div class="loading">Loading....</div>
                    ....


                    // Start Fetch All Datas 
                    async function fetchalldatas(query=""){
                         await $.ajax({
                              // url:"{{url('api/statusessearch')}}",
                              url:"{{'api/statusessearch'}}",
                              method:"GET",
                              data:{"query":query},
                              dataType:"json",
                              success:function(response){
                                   console.log(response); // {status: 'scuccess', data: Array(2)}
                                   
                                   $(".loading").hide();
                                   $("#mytable tbody").empty();
                              
                                   const datas = response.data;
                                   // console.log(datas);
                                   
                                   let html;
                                   datas.forEach(function(data,idx){
                                        // console.log(data);
                                        html += `
                                        <tr id="delete_${data.id}">
                                             <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="${data.id}" /></td>
                                             <td>${++idx}</td>
                                             <td>${data.name}</td>
                                             <td>${data.user.name}</td>
                                             <td>${data.created_at}</td>
                                             <td>${data.updated_at}</td>
                                             <td>
                                                  <a href="javascript:void(0);" class="text-info edit-btns" data-id="${data.id}" ><i class="fas fa-pen"></i></a>
                                                  <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-idx="${idx}" data-id="${data.id}"><i class="fas fa-trash-alt"></i></a>
                                             </td>
                                        </tr>
                                        `;

                                   });
                                   // $("#mytable tbody").html(html);

                                   $("#mytable tbody").prepend(html);
                              }
                         });
                    }
                    fetchalldatas();
                    // End Fetch All Datas

                    // Start Filter by search query
                    $("#btn-search").on("click",function(e){
                         e.preventDefault();
                         const query = $("#filtername").val();
                         // console.log(query);

                         if(query.length > 0){
                              $(".loading").show();
                         }
                         fetchalldatas(query);
                    });
                    // End Filter by search query

                    -loading show before api search request 
                    -loading hide after api return response 
                    

     =>OTP System 
          -for additional security layer 
          SMS otp code 
          Email otp code 
          
          -use to verify user is entering fake or real phone or emai
               when User Registration 
          
          *Otp code has expire time, then it is expired it can't be use.
               It is only for one user who request the service.

          =Migration
               php artisan make:model Otp -m      

               =In create_otps_table.php 
                    $table->id();
                    $table->unsignedBigInteger("user_id");
                    $table->string("otp");
                    $table->timestamp("expires_at");
                    $table->timestamps();

                    $table->foreign("user_id")->references("id")->on("users")->onDelete("cascade");

               php artisan migrate

          =In Otp.php 
               protected $table = "otps";
               protected $primaryKey = "id";
               protected $fillable = [
                    "user_id",
                    "otp",
                    "expires_at"
               ];

          php artisan make:controller OtpsController
          =In OtpsController.php 
               public function generate(){

               }
               public function verify(Request $request){
                    
               }

          =In web.php 
               *use App\Http\Controllers\OtpsController;
               Route::post("/generateotps",[OtpsController::class,"generate"]);
               Route::post("/verifyotps",[OtpsController::class,"verify"]);


          =>External Reuseable Class Method
               OtpsController -> OtpService 
               (receive otp code from ex class) ->   (return otp code)

               *It is familiar in 
               Controller -> Model Class 

               =create foler app > Services
               =create file OtpService.php

               =In OtpService.php
                    <?php 

                    namespace App\Services;

                    use App\Models\Otp;
                    use Illuminate\Support\Carbon;

                    class OtpService{
                         public function generateotp($userid){
                              $randomotp = rand(100000,999999);
                              $expireset = Carbon::now()->addMinute(10);
                              Otp::create([
                                   "user_id"=>$userid,
                                   "otp"=>$randomotp,
                                   "expires_at"=> $expireset
                              ]);

                              // Send OTP via to email / sms

                              return $randomotp;
                         }
                         public function verifyotp($userid,$otp){
                              $checkotp = Otp::where("user_id",$userid)
                                             ->where("otp",$otp)
                                             ->where("expires_at",">",\Carbon\Carbon::now())->first();
                              
                              if($checkotp){
                                   // OTP valid

                                   $checkotp->delete(); // Delete OTP after vefirication.

                                   return true;
                              }else{
                                   // OTP invalid
                                   return false;
                              }
                         }
                         
                         // 8:00 PM 
                         //                8:06 PM (verify) true
                         // 8:10 PM
                         //                (verify) false
                         // 8:15 PM 
                    }

                    ?>
                    *namespace for organizming class
                    *\Carbon\Carbon::now() can be used if we don't utalize "use" keyword.

               =>Without reuseable code 
                    =create generate(), verify() methods in City Model.
                    =create generate(), verify() methods in User Model.

          =In OtpsController.php 
               <?php

               namespace App\Http\Controllers;


               use Illuminate\Http\Request;
               use Illuminate\Support\Facades\Auth;
               use App\Services\OtpService;

               class OtpsController extends Controller
               {
                    protected $otpservice;
                    public function __construct(OtpService $otpservice){
                         $this->otpservice = $otpservice;
                    }

                    public function generate(){
                         $userid = Auth::id();
                         $getotp = $this->otpservice->generateotp($userid);
                         
                         return response()->json(["message"=>"OTP generated successfully","otp"=>$getotp]);
                    }
                    ....
               }
               *"use" keyword include for precisely accessing class.

          =>OTP Route Method
               http://127.0.0.1:8000/generateotps
               The GET method is not supported for route generateotps. Supported methods: POST.
               
               =In web.php 
                    Route::get("/generateotps",[OtpsController::class,"generate"]);
                    Route::post("/verifyotps",[OtpsController::class,"verify"]);
                    
                    *It shouldn't be get method because it can access by typing the url in the browser address bar.
               
                    http://127.0.0.1:8000/generateotps
                    {
                         "message": "OTP generated successfully",
                         "otp": 140116
                    }
                    http://127.0.0.1:8000/generateotps
                    {
                         "message": "OTP generated successfully",
                         "otp": 892078
                    }

                    Test from admin acc & susu acc

               =In phpmyadmin
                    "otps"
                    id   user_id	otp	     expires_at	          created_at	     updated_at	
                    1    1         140116    2024-06-19 19:08:59      2024-06-19 18:58:59 2024-06-19 18:58:59
                    2    1         892078    2024-06-19 19:10:21      2024-06-19 19:00:21 2024-06-19 19:00:21
                    3    30        420935    2024-06-19 19:14:18      2024-06-19 19:04:18 2024-06-19 19:04:18
                    4    30        652405    2024-06-19 19:14:33      2024-06-19 19:04:33 2024-06-19 19:04:33 
          
          =>In OtpsController.php 
               public function verify(Request $request){
                    $userid = $request->input("otpuser_id");
                    $otp = $request->input("otpcode");
                    $isvalidotp = $this->otpservice->verifyotp($userid,$otp);
                    
                    if($isvalidotp){
                         return response()->json(["message"=>"OTP is valid"]);
                    }else{
                         return response()->json(["message"=>"OTP is Invalid"],400);
                    }
               }

          //php artisan make:notification OtpEmailNotify

          php artisan make:mail OtpMail
          php artisan make:job OtpMailJob

          =>OTP layer For Bulk Delete 
               - to prevent mistankly delete many items 
          
          =>OTP layer For Package Buying 
               -to prevent points-related complains from students 

          =In OtpMail.php
               class OtpMail extends Mailable
               {
                    use Queueable, SerializesModels;

                    /**
                         * Create a new message instance.
                         */
                    public $otp;
                    public function __construct($otp)
                    {
                         $this->otp = $otp;
                    }

                    /**
                         * Get the message envelope.
                         */
                    public function envelope(): Envelope
                    {
                         return new Envelope(
                              subject: 'OTP Verification Code',
                         );
                    }

                    /**
                         * Get the message content definition.
                         */
                    public function content(): Content
                    {
                         return new Content(
                              view: 'mailtemplate.otpmail',
                         );
                    }

                    
               }

          =In mailtemplate > otpmail.blade.php 
               <section>
                    <div class="card">
                         <div class="card-body">
                              <h4>Enter this verification code on your device.</h4>
                              <h2>{{ $otp }}</h2>
                              <span>Don't share it with anyone. We will never call or text you for this code.</span>
                              <hr/>
                         </div>
                    </div>
               </section>

          =In OtpMailJob.php 
               use App\Mail\OtpMail;
               use Illuminate\Support\Facades\Mail;
               class OtpMailJob implements ShouldQueue
               {
                    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

               
                    protected $to;
                    protected $otp;
                    public function __construct($to,$otp)
                    {
                         $this->to = $to;
                         $this->otp = $otp;
                    }

          
                    public function handle(): void
                    {
                         Mail::to($this->to)->send(new OtpMail($this->otp));
                    }
               }

          =In services > OtpService.php 
               public function generateotp($userid){
                    $randomotp = rand(100000,999999);
                    $expireset = Carbon::now()->addMinute(1);

                    $user = Auth::user();
                    $user_email = $user->email;

                    Otp::create([
                         "user_id"=>$userid,
                         "otp"=>$randomotp,
                         "expires_at"=> $expireset
                    ]);

                    // Send OTP via to email / sms
                    dispatch(new OtpMailJob($user_email,$randomotp));

                    return $randomotp;
               }

          =>Simple OTP modal without showing timer
               =In cities > index.blade.php 
                    <!-- start otp modal -->
                    <div id="otpmodal" class="modal fade">
                              <div class="modal-dialog modal-sm modal-dialog-centered">
                                   <div class="modal-content">

                                        <div class="modal-body">
                                             <form id="verifyform" action="" method="">
                                   
                                                  <div class="row">
                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="otpcode">OTP Code <span class="text-danger">*</span></label>
                                                            <input type="text" name="otpcode" id="otpcode" class="form-control form-control-sm rounded-0" placeholder="Enter your otp" />
                                                       </div>
                                                       
                                                       <input type="hidden" name="otpuser_id" id="otpuser_id" value="{{ $userdata['id'] }}"/>

                              
                                                       <div class="col-md-12 text-end mb-3">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                       </div>
                                                  </div>
                                                  <p id="otpmessage"></p>
                                                  <p id="">Expire in <span id="otptimer"></span> seconds</p>
                                             </form>
                                        </div>

                                   </div>
                              </div>
                         </div>
                    <!-- end otp modal -->
                    

                    // Start OTP
                    $("#generateotp-btn").on("click",function(){
                         // loading box
                         Swal.fire({
                              title: "Processing....",
                              // html: "I will close in <b></b> milliseconds.",
                              text: "Please wait while we send your OTP",
                              allowOutsideClick:false,
                              didOpen: () => {
                                   Swal.showLoading();
                              }
                         });

                         $.ajax({
                              url:"/generateotps",
                              type:"POST",
                              success:function(response){
                                   console.log(response);
                                   Swal.close();

                                   $("#otpmessage").text("Your OTP code is "+response.otp);
                                   $("#otpmodal").modal("show");

                                   startotptimer(300); // OTP will expires in 300 (5 minute);
                              },
                              error:function(response){
                                   console.error("Error: ",response);
                              }
                         })
                    });
               
          =Admin Acc 
               =Cities Bulk Delete
               =>Gmail View
                    *Error (Email Receiver User Not actually exist)
                    =from system sender email (thoonthoon469@gmail.com)
                         DLT Student Management Project 6:50 PM (4 minutes ago)

                         Mail Delivery Subsystem <mailer-daemon@googlemail.com> 6:50 PM (5 minutes ago)
                         Address not found
                         Your message wasn't delivered to admin@gmail.com because the address couldn't be found, or is unable to receive mail.
                                             
                         *Email are in the Inbox/Send box

          =>Sending OTP with Timer 
               =In cities > index.blade.php 

                    <div>
                         {{-- <a href="javascript:void(0);" id="bulkdelete-btn" class="btn btn-danger btn-sm rounded-0">Bulk Delete</a> --}}
                         <a href="javascript:void(0);" id="generateotp-btn" class="btn btn-danger btn-sm rounded-0">Bulk Delete</a>
                                        
                    </div>

                    // Start Bulk Delete 
                    $("#selectalls").click(function(){
                         $(".singlechecks").prop("checked",$(this).prop("checked"));
                    });
                    // End Bulk Delete 


                    // Start OTP
                    $("#generateotp-btn").on("click",function(){
                         // loading box
                         Swal.fire({
                              title: "Processing....",
                              // html: "I will close in <b></b> milliseconds.",
                              text: "Please wait while we send your OTP",
                              allowOutsideClick:false,
                              didOpen: () => {
                                   Swal.showLoading();
                              }
                         });

                         $.ajax({
                              url:"/generateotps",
                              type:"POST",
                              success:function(response){
                                   console.log(response);
                                   Swal.close();

                                   $("#otpmessage").text("Your OTP code is "+response.otp);
                                   $("#otpmodal").modal("show");

                                   startotptimer(60); // OTP will expires in 120s (2 minute);
                              },
                              error:function(response){
                                   console.error("Error: ",response);
                              }
                         })
                         
                         // Clear form data
                         $("#verifyform").trigger("reset");
                    });
                    
                    // Method 1 - show minutes and secods
                    // function startotptimer(duration){
                    //      // let minutes,seconds;
                    //      // let timer = duration;
                    //      // console.log(timer,minutes,seconds); // 120 undefined undefined

                    //      let timer = duration,minutes,seconds;
                    //      // console.log(timer,minutes,seconds); // 60 undefined undefined

                    
                    //      let setinv = setInterval(dectimer,1000);

                    //      function dectimer(){
                    //           minutes = parseInt(timer/60);
                    //           seconds = parseInt(timer%60);

                    //           minutes = minutes < 10 ? "0"+minutes : minutes;
                    //           seconds = seconds < 10 ? "0"+seconds : seconds;
                              
                    //           $("#otptimer").text(`${minutes}:${seconds}`);

                    //           if(timer-- < 0){
                    //                clearInterval(setinv);
                    //                $("#otpmodal").modal("hide");
                    //           }
                    //      }
                    // }

                    // Method 2 - show only secs as a counter
                    function startotptimer(duration){
                         timeleft = duration; // 60 seconds

                         let setinv = setInterval(dectimer,1000);

                         function dectimer(){
                              $("#otptimer").text(timeleft);

                              timeleft--;
                              if(timeleft <= 0){
                                   clearInterval(setinv);
                                   $("#otpmodal").modal("hide");
                              }
                         }
                    }

                    $("#verifyform").on("submit",function(e){
                         e.preventDefault();
                         $.ajax({
                              url:"/verifyotps",
                              type:"POST",
                              data:$(this).serialize(),
                              success:function(response){
                                   console.log(response);
                                   if(response.message){
                                        // console.log("Bulk Delete Sucessfully");
                                        
                                        // start bulk delete
                                        let getselectedids = [];
                         
                                        // console.log($("input:checkbox[name=singlechecks]:checked"));
                                        $("input:checkbox[name='singlechecks']:checked").each(function(){
                                             getselectedids.push($(this).val());
                                        });    

                                        $.ajax({
                                             url:"{{ route('cities.bulkdeletes') }}",
                                             type:"DELETE",
                                             dataType:"json",
                                             data:{
                                                  selectedids:getselectedids,
                                                  _token:"{{ csrf_token() }}"
                                             },
                                             success:function(response){
                                                  console.log(response);   // 1
                                                  
                                                  if(response){
                                                       // ui remove
                                                       $.each(getselectedids,function(key,val){
                                                            $(`#delete_${val}`).remove();
                                                       });
                                                  
                                                       Swal.fire({
                                                            title: "Deleted!",
                                                            text: "Your file has been deleted.",
                                                            icon: "success"
                                                       });
                                                  }
                                             },
                                             error:function(response){
                                                  console.log("Error: ",response)
                                             }
                                        });
                                        // end bulk delete

                                        $("#otpmodal").modal("hide");

                                   }else{
                                        console.log("Invalid OTP");
                                   }
                              },
                              error:function(response){
                                   console.log("Error OTP: ",response)
                              }
                         });
                    });
                    // End OTP



                    =>parseInt(numeric,base)
                         // console.log(parseInt("123 hello")); // 123
                         // console.log(parseInt("0123",10)); // 123 // parseInt("123", explicityly specify base-10)
                         // console.log(parseInt("    0123    ",10)); // 123 // remove white spaces and leading zeros
                         // console.log(parseInt("123.9",10)); // 123 // Do not taken into account for decimal points
                    


     =>Download Counter 
          =Migration
               php artisan make:migration add_counter_to_edulinks_table --table=edulinks

               =In add_counter_to_edulinks_table.php
                    up()
                         $table->unsignedBigInteger("counter")->after("url");

                    down()
                         $table->dropColumn("counter");

          =In Edulink.php 
               protected $fillable = [
                    "classdate",
                    "post_id",
                    "url",
                    "counter",
                    "user_id"
               ];

        
          =In web.php 
               Route::resource("edulinks",EdulinksController::class);
               Route::get("/edulinks/download/{id}",[EdulinksController::class,"download"])->name("edulinks.download");

          =In edulinks > index.blade.php
               <table id="mytable" class="table table-sm table-hover border">
          
                    <thead>
                         <th>
                              <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                         </th>
                         <th>ID</th>
                         <th>Class</th>
                         <th>URL</th>
                         <th>Counter</th>
                         <th>By</th>
                         <th>Class Date</th>
                         <th>Created At</th>
                         <th>Updated At</th>
                         <th>Action</th>
                    </thead>
                    <tbody>
                         @foreach($edulinks as $idx=>$edulink)
                         <tr>
                              <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="{{$edulink->id}}" /></td>
                              <td>{{$idx + $edulinks->firstItem()}}</td>
                              <td><a href="{{route('posts.show',$edulink->post_id)}}">{{$edulink->post['title']}}</a></td>
                              <td><a href="javascript:void(0);" class="link-btns" data-url="{{ $edulink->url}}" title="Copy Link">{{ Str::limit($edulink->url,30) }}</a></td>
                              <td>{{ $edulink->counter }}</td>
                              <td>{{ $edulink["user"]["name"] }}</td>
                              <td>{{ date("d M Y",strtotime($edulink->classdate)) }}</td>
                              <td>{{ $edulink->created_at->format('d M Y h:i A') }}</td>
                              <td>{{ $edulink->updated_at->format('d M Y') }}</td>
                              <td>
                                   <a href="{{route('edulinks.download',$edulink->id)}}" class="text-primary me-2" target="_blank"><i class="fas fa-download"></i></a>
                                   {{--<a href="{{$edulink->url}}" class="text-primary" target="_blank" download="abc"><i class="fas fa-download"></i></a> --}}
                                   <a href="javascript:void(0);" class="text-info ms-2 editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$edulink->id}}" data-classdate="{{$edulink->classdate}}" data-post="{{$edulink->post_id}}" data-url="{{$edulink->url}}"  ><i class="fas fa-pen"></i></a>
                                   <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx + $edulinks->firstItem()}}"><i class="fas fa-trash-alt"></i></a>
                              </td>
                              <form id="formdelete-{{ $idx + $edulinks->firstItem() }}" class="" action="{{route('edulinks.destroy',$edulink->id)}}" method="POST">
                                   @csrf
                                   @method("DELETE")
                              </form>
                         </tr>
                         @endforeach
                    </tbody>
               </table>

               *add counter column in table, and show counter value
               *download button to track number of download

               =Without Download Attribute
                    =In EdulinksController.php 
                         public function download($id){
                              $edulink = Edulink::findOrFail($id);
                              $edulink->increment("counter");
                              return $edulink->url;
                         }
                    
                    <a href="{{route('edulinks.download',$edulink->id)}}" class="text-primary me-2" target="_blank">Download</a>

                    *It will reach next empty page with this url.http://127.0.0.1:8000/edulinks/download/1
                         and return text https://www.mediafire.com/file/jwuz758tfcjf56w/19March2024PHPB4.mp4/file

               =With Download Attribute
                    <a href="{{route('edulinks.download',$edulink->id)}}" class="text-primary me-2" target="_blank" download>Download</a>
                    =It will download a file 1.htm instantly by browser download manager.

          =In EdulinksController.php 
               public function download($id){
                    $edulink = Edulink::findOrFail($id);
                    $edulink->increment("counter");
                    return redirect($edulink->url);
               }

          =download an edulink
          =counter added and redirected to mediafire link 
          =reload edulinks > index page (see counter value is added)

          =>Create Error 
               =create an edulink 
                    *Error     SQLSTATE[HY000]: General error: 1364 Field 'counter' doesn't have a default value

                    -Idea 1 
                    Specify counter value to 0 when an edulink is created in store() method.
                    -Idea 2
                    Specify default value in database.

                    =Migration 
                         php artisan migrate:rollback

                         =In add_counter_to_edulinks_table.php 
                              up()
                                   $table->unsignedBigInteger("counter")->default(0)->after("url");

                         php artisan migrate

               =create an edulink (edulink created without error)
                    =download an edulink
                    =reload edulinks > index page (see counter value is added)
                    =download an edulink
                    =reload edulinks > index page (see counter value is added)
               =download another edulink
               =reload edulinks > index page (see counter value is added it is not related to other edulinks)

     =>Automatic Student Registaion Number
          =Old system 
               -manually write down student reg number.

               =create a student
                    First Name - Hnin
                    Last Name - Phyu 
                    Register Number -
                    *Validation Error (The regnumber field is required.)    

               =create a student 
                    First Name - Hnin
                    Last Name - Phyu 
                    Register Number -
                    *Validation Error (The regnumber has already been taken.)


          =In StudentController.php 
               public function store(Request $request)
               {
                    $this->validate($request,[
                         "firstname"=>"required",
                         "lastname"=>"required",
                         "remark" => "max:1000"
                    ]);

                    $user = Auth::user();
                    $user_id = $user->id;

                    $student = new Student();
                    $student->firstname = $request["firstname"];
                    $student->lastname = $request["lastname"];
                    $student->slug = Str::slug($request["firstname"]);
                    $student->remark = $request["remark"];
                    $student->user_id = $user_id;

                    $student->save();
                    return redirect(route("students.index"));
               }
               *don't need to validate reg column and add reg collumn. It is automatically add by its model. 

          =In Student.php 
               protected static function boot(){
                    parent::boot();

                    static::creating(function($student){
                         $lateststudent = \DB::table("students")->orderBy("id","desc")->first();
                         $latestid= $lateststudent ?  $lateststudent->id : 0;
                                                  // str_pad(string,length,pad_string,pad_types);
                         $student->regnumber = "WDF".str_pad($latestid+1,5,"0",STR_PAD_LEFT);
                    });
               }

               The boot() method in the  model is a part of the Laravel framework's Eloquent ORM. 
               This method allows you to define model events, which are callbacks that are triggered during the lifecycle of an Eloquent model (e.g., creating, updating, deleting). 
               These events can be used to execute custom logic at various points in the model's lifecycle.

               *result()
               No	Reg Number	Name	          Remark	     Status	By	     Created At	Updated At	Action
               1	WDF1001	     Admin Boot	Lorem Ipsu...	Active	admin	14 Dec 2023	14 Dec 2023	 
               2	WDF1002	     Aung Aung	     Lorem Ipsu...	Active	aung aung	15 Dec 2023	17 Dec 2023	 
               3	WDF1003	     su su	     Lorem Ipsu...	Active	su su	15 Dec 2023	15 Dec 2023	 
               4	WDF1004	     yu yu	     hay	          Active	yu yu	16 Dec 2023	16 Dec 2023	 
               5	WDF1005	      Phyu		               Active	admin	20 Jun 2024	20 Jun 2024	 
               6	WDF00006	     Htay Maw		               Active	admin	20 Jun 2024	20 Jun 2024	 
               7	WDF00007	     Ya Min		               Active	admin	20 Jun 2024	20 Jun 2024

          =>Automatic Increment by checking unique reg number 
                =edit a student (WDF00006) to upcomming register number (WDF00008)
              
               =create a student 
               First Name - Thaw
               Last Name - Tar 
               Register Number -
               *Error SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry 'WDF00008' for key 'students_regnumber_unique'

               =edit the above student (WDF00008) to upcomming register number (WDF00010)

               =In students > create.blade.php 
                      <form action="/students" method="POST">
                         @csrf

                         <div class="row">
                              <div class="col-md-6 mb-3">
                                   <label for="firstname">First Name <span class="text-danger">*</span></label>
                                   <input type="text" name="firstname" id="firstname" class="form-control form-control-sm rounded-0" placeholder="Enter First name" value="{{ old('firstname') }}"/>
                                   @error("firstname")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                              </div>

                              <div class="col-md-6 mb-3">
                                   <label for="lastname">Last Name <span class="text-danger">*</span></label>
                                   <input type="text" name="lastname" id="lastname" class="form-control form-control-sm rounded-0" placeholder="Enter Last Name" value="{{ old('lastname')}}"/>
                                   @error("lastname")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                              </div>

                              {{-- <div class="col-md-4 mb-3">
                                   <label for="regnumber">Register Number <span class="text-danger">*</span></label>
                                   <input type="text" name="regnumber" id="regnumber" class="form-control form-control-sm rounded-0" placeholder="Enter Register Number" autocomplete="off" value="{{ old('regnumber')}}"/>
                                   @error("regnumber")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                              </div>

                              --}}

                              <div class="col-md-12 mb-3">
                                   <label for="remark">Remark</label>
                                   <textarea name="remark" id="remark" class="form-control rounded-0" rows="5" placeholder="Enter Remark">{{ old('remark')}}</textarea>
                                   @error("remark")
                                        <span class="text-danger">{{ $message }}<span>
                                   @enderror
                              </div>

                              <div class="col-md-12">
                                   <div class="d-flex justify-content-end">
                                        <a href="{{route('students.index')}}" class="btn btn-secondary btn-sm rounded-0 me-3">Cancel</a>
                                   <button type="submit" class="btn btn-secondary btn-sm rounded-0">Submit</button>
                                   </div>
                              </div>
                         </div>
                    </form>

               =In Student.php 
                    // Method 2 (solved duplicated regnumber)
                    protected static function boot(){
                         parent::boot();

                         static::creating(function($student){
                              $student->regnumber = self::generatestudentid();
                         });
                    }

                    protected static function generatestudentid(){
                         return \DB::transaction(function(){
                              $lateststudent = \DB::table("students")->orderBy("id","desc")->first();
                              $latestid= $lateststudent ?  $lateststudent->id : 0;
                              $newstudentid = "WDF".str_pad($latestid+1,5,"0",STR_PAD_LEFT);
                              
                              while(\DB::table("students")->where("regnumber",$newstudentid)->exists()){
                                   $latestid++;
                                   $newstudentid = "WDF".str_pad($latestid+1,5,"0",STR_PAD_LEFT);
                              }
                              return $newstudentid;
                         });
                    }

                    =when a student is created, creating() is invoked instantly which in turn invoke generatestudentid.
                         which return a unique reg number by increasing last student id to 1.
                    xxxx1
                    xxxx2
                    .
                    xxx10
                    ....
                    99999          
                    100000

               *result()
               No	Reg Number	Name	          Remark	     Status	By	     Created At	Updated At	Action
               8	WDF00008	     Zaw Moe		Active	               admin	20 Jun 2024	20 Jun 2024	 
               9	WDF00011	     Thu Ta		Active	               admin	20 Jun 2024	20 Jun 2024

               
               =In phpMyadmin
                    id	regnumber	     firstname	     lastname	     slug	remark	status_id	user_id	created_at	updated_at
                    9    WDF00008       Zaw            Moe            zaw  NULL      1         1
                    10   WDF00011       Thu            Ta             thu  NULL      1         1

               *However database error occur in ,it increase the id nubmer.


               A transaction in a database context means that a series of operations are executed as a single unit, 
               which ensures that either all operations are completed successfully, or none are. 
               This guarantees data integrity and consistency.

               #Database Transactions
                    You may use the transaction method provided by the DB facade to run a set of operations within a database transaction. If an exception is thrown within the transaction closure, the transaction will automatically be rolled back and the exception is re-thrown. If the closure executes successfully, the transaction will automatically be committed. You don't need to worry about manually rolling back or committing while using the transaction method:

                    use Illuminate\Support\Facades\DB;
                    
                    DB::transaction(function () {
                         DB::update('update users set votes = 1');
                         
                         DB::delete('delete from posts');
                    });

               =In phpMyadmin
                    id	regnumber	     firstname	     lastname	     slug	remark	status_id	user_id	created_at	updated_at
                    11   WDF00015       Thu            Rein           thu  NULL      1         1
                    12   WDF00012       Kyaw           Moe            kyaw NULL      1         1
                    13   WDF00013       Nan            Thuzar         nan  NULL      1         1
                    14   WDF00014       Chael          Chael          chaelNULL      1         1
                    15   WDF00016       Li             Li             li   NULL      1         1

     =>Page View 
          =Migration
               php artisan make:model Pageview -m

               =In create_pageviews_table.php 
                    $table->string("pageurl");
                     $table->unsignedBigInteger("counter")->default(0);

               php artisan migrate 

          =In Pageview.php 
               protected $table = "pageviews";
               protected $primaryKey = "id";
               protected $fillable = [
                    "pageurl",
                    "counter"
               ];

          =Pageview Table Storage Concept 
               http://127.0.0.1:8000/posts/15     5
               http://127.0.0.1:8000/posts/16     2

               create if not exist
               increment if exists 

          =Middleware folder
               app > Http > Middleware 

               app > Http > Kernel.php 
                    -to register all middlewares in Middlewar folder (like boostrap.php file in php classic)

               
               php artisan make:middleware PageViewMid
               
               app\Http\Middleware\PageView.php
               =Original PageView.php 
                    <?php

                    namespace App\Http\Middleware;

                    use Closure;
                    use Illuminate\Http\Request;
                    use Symfony\Component\HttpFoundation\Response;

                    class PageViewMid
                    {
                         /**
                              * Handle an incoming request.
                              *
                              * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
                              */
                         public function handle(Request $request, Closure $next): Response
                         {
                              return $next($request);
                         }
                    }

               =In PageView.php 
                    use App\Models\PageView;
                    class PageViewMid
                    {
                         /**
                              * Handle an incoming request.
                              *
                              * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
                              */
                         public function handle(Request $request, Closure $next): Response
                         {
                              $getpageurl = $request->url();
                              $pageview = Pageview::firstOrCreate(["pageurl"=>$getpageurl]);
                              $pageview->increment("counter");
                              return $next($request);
                         }
                    }

               =>Activating Middleware 
                    =In Kernel.php 
                         protected $middlewareGroups = [
                         'web' => [
                              \App\Http\Middleware\EncryptCookies::class,
                              \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
                              \Illuminate\Session\Middleware\StartSession::class,
                              \Illuminate\View\Middleware\ShareErrorsFromSession::class,
                              \App\Http\Middleware\VerifyCsrfToken::class,
                              \Illuminate\Routing\Middleware\SubstituteBindings::class,

                              \App\Http\Middleware\PageViewMid::class,

                         ],

                         'api' => [
                              // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
                              \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
                              \Illuminate\Routing\Middleware\SubstituteBindings::class,
                         ],
                    ];
                    *middleware activated for web. It is written at the last not to confuse with the laravel default middleware.


          =In phpmyadmin
               "pageviews"
               id	pageurl	                                             counter	created_at	updated_at	
               1	http://127.0.0.1:8000/posts/15	                    3	     2024-06-21 15:22:44	2024-06-21 17:25:47	
               2	http://127.0.0.1:8000/posts/assets/img/users/user1...	8	     2024-06-21 15:22:45	2024-06-21 17:26:32	
               3	http://127.0.0.1:8000	                              9	     2024-06-21 15:22:46	2024-06-21 17:26:20	
               4	http://127.0.0.1:8000/posts/16	                    2	     2024-06-21 17:23:45	2024-06-21 17:26:19	
               5	http://127.0.0.1:8000/posts	                         1	     2024-06-21 17:24:37	2024-06-21 17:24:37	
               6	http://127.0.0.1:8000/posts/1	                         2	     2024-06-21 17:24:53	2024-06-21 17:26:32	
               7	http://127.0.0.1:8000/posts/students	               1	     2024-06-21 17:27:56	2024-06-21 17:27:56	
               8	http://127.0.0.1:8000/students	                    1	     2024-06-21 17:28:01	2024-06-21 17:28:02	
               9	http://127.0.0.1:8000/students/2	                    1	     2024-06-21 17:28:21	2024-06-21 17:28:21	
               10	http://127.0.0.1:8000/students/assets/img/users/us...	1	     2024-06-21 17:28:22	2024-06-21 17:28:22	

          =Middleware 
               Middleware in Laravel acts as a filter for HTTP requests entering your application. 
               It sits between the request and the application's response, allowing you to perform actions before or after the request is processed by the application. 
               Middleware can be used for tasks such as authentication, logging, request modification, and more.
               
               handle method is defined, which will contain the logic for this middleware.
               It accepts two parameters:
               $request - An instance of the Request object containing the current request data.
               $next - The $next parameter is responsible for passing the request to the next middleware or to the application's core if there are no more middleware to process.

                    Here's how it works step by step:

                    Before the Request is Passed:
                         You can perform any actions or checks before passing the request further. For example, you might check if the user is authenticated, validate input data, or log request details.
                    Passing the Request:
                         The $next($request) call passes the request to the next middleware. If it's the last middleware, it will pass the request to the application (typically a controller or a route closure)


               Types of Middleware
               Global Middleware: These middleware are executed during every HTTP request to your application. They are registered in the app/Http/Kernel.php file within the $middleware array.

               Route Middleware: These middleware can be assigned to specific routes or groups of routes. They are registered in the app/Http/Kernel.php file within the $routeMiddleware array.

          =In students > show.blade.php
               <p class="text-small text-muted text-uppercase mb-2">Personal Info</p>
               <div class="row g-0 mb-2">
                    <div class="col-auto me-2">
                         <i class="fas fa-eye"></i>
                    </div>
                    <div class="col">
                         @php 
                              $getpageurl = url()->current();
                              $pageview = \App\Models\Pageview::where("pageurl",$getpageurl)->first()->counter;
                         @endphp 
                         Viewed {{$pageview}} times
                    </div>
               </div>


               *Error 
               (Object of class Illuminate\Routing\UrlGenerator could not be converted to string)
               $getpageurl = url();
                    Illuminate\Routing\UrlGenerator {#1624 ▼ // resources\views/students/show.blade.php
                         #routes: Illuminate\Routing\RouteCollection {#31 ▶}
                         #request: Illuminate\Http\Request {#37 ▶}
                         #assetRoot: null
                         #forcedRoot: null
                         #forceScheme: null
                         #cachedRoot: "http://127.0.0.1:8000"
                         #cachedScheme: "http://"
                         #rootNamespace: null
                         #sessionResolver: Closure() {#1626 ▶}
                         #keyResolver: Closure() {#1627 ▶}
                         #missingNamedRouteResolver: null
                         #formatHostUsing: null
                         #formatPathUsing: null
                         #routeGenerator: Illuminate\Routing\RouteUrlGenerator {#1631 ▶}
                    }

          =>Resure in posts 
               =In posts > show.blade.php 
                    <div class="row g-0 mb-2">
                         <div class="col-auto me-2">
                              <i class="fas fa-eye"></i>
                         </div>
                         <div class="col">
                              @php 
                                   $getpageurl = url()->current();
                                   $pageview = \App\Models\Pageview::where("pageurl",$getpageurl)->first()->counter;
                              @endphp 
                              Viewed {{$pageview}} times
                         </div>
                    </div>

          =>PageView is not live      
               http://127.0.0.1:8000/posts/15
               =Open this url with new tab  // 7 times
               =Open this url with new tab  // 8 times
               =Open this url with new tab  // 9 times (this ui get the latest update)

               =reload the first tab         // 10 times 

               *It is not actively changing for each tab. It it not constitent across all browsers page.
               *To lively change the database information in all ui, any kind of Web Socket must be used.

               =Creative Idea
                    Prevent Self-user reload 
                    Limit Session Time For Each Reload 
                    Limit View Per Day 
               
     =>Pusher 
          https://pusher.com/

          Products 
               Channels - for realtime feature 
               Beams - for push notification (Notification outsite of platform)

               =Realtime feature example 
                    E-commerce website 
                                                  Products Page      Stock 
                         A from Yangon            iPhone 4qty         4
                         B from Mandalay          iPhone 4qty         4

                         A bought iPhone          iPhone 3qty         3 
                         B bought iPhone          iPhone 4qty         3 
                         ------------------------------------------
                         But in this situation,
                         A from Yangon (9:10)     iPhone 1qty         1
                         B from Mandalay (9:10)   iPhone 1qty         1

                         A bought iPhone (9:15)   iPhone 0qty         0 
                         B bought iPhone (9:16)   iPhone 1qty         0 (out of stock issue) 

                    Delivery website 
                         Car Motion 
                         Bike Motion 

          =Register an account on pusher 
          =Go to Channels
               Welcome to Pusher Channels!
               Name your app
                    DLTSTUMan
               Select a cluster // It is chosing the closest server
                    ap1 (Asia Pacific (Singapore))

               Choose yourtech stack(optional)
               Front end 
                    jQuery 
               Back end 
                    Laravel 
               "Create app"

          =Pushesr Home 
               Channels 
               // all of your channel 
               Clilck "Manage" 
          
          Home > Channels > DLTSTUMan 
          >Getting Started 

          STEP 2 Publish events from the server
               Laravel \/
               composer require pusher/pusher-php-server

               =In env.php 
                    PUSHER_APP_ID=1822896
                    PUSHER_APP_KEY=e202c50a573fa42ec8ed
                    PUSHER_APP_SECRET=4fa091606bf7846caefb
                    PUSHER_HOST=
                    PUSHER_PORT=443
                    PUSHER_SCHEME=https
                    PUSHER_APP_CLUSTER=ap1

               =In config/broadcasting.php
                    'default' => env('BROADCAST_DRIVER', 'pusher'),

                    'connections' => [
                         'pusher' => [
                              'driver' => 'pusher',
                              'key' => env('PUSHER_APP_KEY'),
                              'secret' => env('PUSHER_APP_SECRET'),
                              'app_id' => env('PUSHER_APP_ID'),
                              'options' => [
                                   'cluster' => env('PUSHER_APP_CLUSTER'),
                                   'host' => env('PUSHER_HOST') ?: 'api-'.env('PUSHER_APP_CLUSTER', 'mt1').'.pusher.com',
                                   'port' => env('PUSHER_PORT', 443),
                                   'scheme' => env('PUSHER_SCHEME', 'https'),
                                   'encrypted' => true,
                                   'useTLS' => env('PUSHER_SCHEME', 'https') === 'https',
                              ],
                              'client_options' => [
                                   // Guzzle client options: https://docs.guzzlephp.org/en/stable/request-options.html
                              ],
                         ],

          =>Pusher Test 
               =In web.php 
                    });

                    Route::get("/pushers",function(){
                         return view("pusher");
                    });
               
               =view >pusher.blade.php 
                    <!DOCTYPE html>
                    <head>
                    <title>Pusher Test</title>
                    <script src="https://js.pusher.com/8.2.0/pusher.min.js"></script>
                    <script>

                    // Enable pusher logging - don't include this in production
                    Pusher.logToConsole = true;

                    var pusher = new Pusher('e202c50a573fa42ec8ed', {
                         cluster: 'ap1'
                    });

                    var channel = pusher.subscribe('my-channel');
                    channel.bind('my-event', function(data) {
                         alert(JSON.stringify(data));
                    });
                    </script>
                    </head>
                    <body>
                    <h1>Pusher Test</h1>
                    <p>
                    Try publishing an event to channel <code>my-channel</code>
                    with event name <code>my-event</code>.
                    </p>
                    </body>


                    *Pusher.logToConsole = true; //false generate no console.
                    =See Chrome's > Console 
                         Pusher :  : ["State changed","initialized -> connecting"]
                         logger.ts:19 Pusher :  : ["Connecting",{"transport":"ws","url":"wss://ws-ap1.pusher.com:443/app/e202c50a573fa42ec8ed?protocol=7&client=js&version=8.2.0&flash=false"}]
                         logger.ts:19 Pusher :  : ["State changed","connecting -> connected with new socket ID 31432.1765685"]
                         logger.ts:19 Pusher :  : ["Event sent",{"event":"pusher:subscribe","data":{"auth":"","channel":"my-channel"}}]
                         logger.ts:19 Pusher :  : ["Event recd",{"event":"pusher_internal:subscription_succeeded","channel":"my-channel","data":{}}]
                         logger.ts:19 Pusher :  : ["No callbacks on my-channel for pusher:subscription_succeeded"]

                    Pusher has Channel & Event 
                    *Ajax process perform in bind().

                    Wrong App code in conecting pusher 
                    =Composer Diconnect Error 
                    *Error 
                    Pusher :  : ["State changed","connecting -> disconnected"]
                    *Check App Id, Channel Name and Event Name
                    
               =Pusher > Channels > DLTSTUMan > 
                    Debug Console 
                    Event Creator 
                         Channel 
                              my-channel
                         Event
                              my-event 
                         Data 
                              hello world 
                         "Send Event"

               =http://127.0.0.1:8000/pushers
                    *hello word is printed with alert box.
                    *Because it is ordered to alert data while listening my-channel and my-event
                    *It is the working process of web socket.
               =>Test 2

                    =In view > pusher.blade.php 
                          var pusher = new Pusher('e202c50a573fa42ec8ed', {
                              cluster: 'ap1'
                         });

                         var channel = pusher.subscribe('channelv');
                         channel.bind('my-events', function(data) {
                              console.log(data);
                         });
                    
                    =Pusher > Channels > DLTSTUMan > 
                    Debug Console 
                    Event Creator 
                         Channel 
                              channelv
                         Event
                              my-events 
                         Data 
                              hello world 
                         "Send Event"

                    *Channel Name & And Event Name must be the same for 
                         Event creator and jQuery bind.
                    *Logic code in bind() method can be showtodom processes.

               =>Pusher > Overview > DLTSTUMan
                    Peak connections today 
                         2 
                    Total messages sent today 
                         15

               =Pusher > Channels > DLTSTUMan > 
                    Debug Console 
                    Event Creator 
                         Channel 
                              my-channel
                         Event
                              my-event 
                         Data 
                              hello myanmar 
                         "Send Event"
               =Pusher > Channels > DLTSTUMan > 
                    Debug Console 
                    Event Creator 
                         Channel 
                              my-channel
                         Event
                              my-event 
                         Data 
                              hello thailand 
                         "Send Event"


               =http://127.0.0.1:8000/pushers 
                    Pusher :  : ["Event recd",{"event":"my-events","channel":"channelv","data":"hello myanmar"}]
                    pushers:16 hello myanmar
                    logger.ts:19 Pusher :  : ["Event recd",{"event":"my-events","channel":"channelv","data":"hello thailand"}]
                    pushers:16 hello thailand

          =>Group Chat On UI (Pusher with laravel)
               php artisan make:controller ChatsController

               =>Creating Event 
                    php artisan make:event ChatEvent

                    app\Events\ChatEvent.php
                    =Original ChatEvent.php 
                         <?php

                         namespace App\Events;

                         use Illuminate\Broadcasting\Channel;
                         use Illuminate\Broadcasting\InteractsWithSockets;
                         use Illuminate\Broadcasting\PresenceChannel;
                         use Illuminate\Broadcasting\PrivateChannel;
                         use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
                         use Illuminate\Foundation\Events\Dispatchable;
                         use Illuminate\Queue\SerializesModels;

                         class ChatEvent
                         {
                         use Dispatchable, InteractsWithSockets, SerializesModels;

                         /**
                              * Create a new event instance.
                              */
                         public function __construct()
                         {
                              //
                         }

                         /**
                              * Get the channels the event should broadcast on.
                              *
                              * @return array<int, \Illuminate\Broadcasting\Channel>
                              */
                         public function broadcastOn(): array
                         {
                              return [
                                   new PrivateChannel('channel-name'),
                              ];
                         }
                         }
               
               =In web.php 
                    // pusher test by chat box
                    Route::get("/chatboxs",function(){
                         return view("chatbox");
                    });
                    Route::post("/chatmessages",[ChatsController::class,"sendmessage"]);
                    
                    *Register route for UI and Send Message.

               =In ChatsController.php 
                    *use App\Events\ChatEvent;

                    public function sendmessage(Request $request){
                         $message = $request->message;

                         // event(new ChatEvent($message));
                         broadcast(new ChatEvent($message));

                         return response()->json(["status"=>"Message Sent Successfully"]);
                    }

               =In create view > chatbox.blade.php 
                    <!DOCTYPE html>
                    <html>
                         <head>
                              <meta name="csrf-token" content="{{  csrf_token() }}" />
                         <title>Chat Test</title>
                         <script src="https://js.pusher.com/8.2.0/pusher.min.js"></script>
                         
                         </head>
                         <body>
                              <h1>Chat Test</h1>
                              <p>
                              Try publishing an event to channel <code>my-channel</code>
                              with event name <code>my-event</code>.
                              </p>

                              <div>
                                   <div id="display">
                                        <!-- message will shown in here  -->
                                   </div>

                                   <input type="text" id="message" placeholder="Write something...."/>
                                   <button type="button" id="send">Sent</button>
                              </div>

                              <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
                              <script>

                                   $(document).ready(function(){
                                        // Pusher.logToConsole = true;

                                        var pusher = new Pusher('e202c50a573fa42ec8ed', {
                                             cluster: 'ap1'
                                        });

                                        var channel = pusher.subscribe('chat-channel');
                                        channel.bind('message-event', function(data) {
                                             console.log(data);
                                             $("#display").append(`<p>${data.message}</p>`);
                                        });

                                        $("#send").click(function(){
                                             const message = $("#message").val();
                                             // console.log(message);

                                             $.ajax({
                                                  url: "/chatmessages",
                                                  type:"POST",
                                                  data:{sms:message},
                                                  headers:{"X-CSRF-TOKEN":$("meta[name='csrf-token']").attr("content")},
                                                  success: function(response){
                                                       console.log(response);
                                                  }
                                             });
                                        });
                                   });  

                              // Enable pusher logging - don't include this in production
                              
                              </script>
                         </body>
                    </html>
               
               =In ChatEvent.php 
                    class ChatEvent implements ShouldBroadcast
                    {
                         use Dispatchable, InteractsWithSockets, SerializesModels;

                         /**
                              * Create a new event instance.
                              */
                         public $message;
                         public function __construct($message)
                         {   
                              $this->message = $message;
                         }

                         /**
                              * Get the channels the event should broadcast on.
                              *
                              * @return array<int, \Illuminate\Broadcasting\Channel>
                              */
                         public function broadcastOn(): array
                         {
                              return ["chat-channel"];
                         }

                         public function broadcastAs()
                         {
                              return 'message-event';
                         }
                    }

                    =declare class property $message
                    =class ChatEvent implements ShouldBroadcast (like ShouldQueue)
                    =add public function broadcastAs()

               =>Log Message Hidden Issue
                    =In storage > laravel.log 
                         [2024-06-23 15:58:31] local.INFO: Broadcasting [message-event] on channels [chat-channel] with payload:
                         {
                         "message": "hay",
                         "socket": null
                         }  [2024-06-23 16:51:34] local.INFO: Broadcasting [message-event] on channels [chat-channel] with payload:
                         {
                         "message": "hello fris",
                         "socket": null
                         }  
                    *All message are hidden in log file 
                    *Because Event is not sended to pusher with broacast driver. So pusher can't bind channel and event.
                    
                    =In env.php 
                         BROADCAST_DRIVER=log
                    
                    =In config > broadcasting.php 
                         'default' => env('BROADCAST_DRIVER', 'pusher'),

                    *It work with the value from evn. not from broadcasting.

               =Solved() In env.php 
                    BROADCAST_DRIVER=pusher

               =>Pusher Bind Test
                    =From Admin Acc 
                    =From Su Su Acc 

                    =Pusher > Channels > DLTSTUMan > 
                    Debug Console 
                    Event Creator 
                         Channel 
                              chat-channel
                         Event
                              message-event 
                         Data 
                              hi
                         "Send Event"

                    =See Message From both admin and susu browser

                    =chatbox.blade.php 
                         success: function(response){
                                   console.log(response);
                              }
                    =Send message from admin acc 
                         [object Object]
                    
                    =pusher return response as 
                         {message: 'hay'}
                         *In blade get message by accessing property.

               
               =>Two person Test 
                    =Admin Acc 
                    =Su Su Acc 

                    =Send message from admin acc 
                         I am admin 
                    =Send message from su su 
                         I am su su 
                         =Send message from admin acc 
                         Thank su su 

                    *Both admin & su su see live messages in their browsers
                    *When reload previous messages are disappear, for permanent message it must store in database.
                         later message reading retrieve and show from database.

                    =In Chrome's Inspect > Console 
                         =From Admin
                              {message: 'hi all fris'}
                              {status: 'Message Sent Successfully', message: 'hi all fris'}
                              {message: 'hello my dears'}
                         
                         =From SuSu
                              {message: 'hi all fris'}
                              {message: 'hello my dears'}
                              {status: 'Message Sent Successfully', message: 'hello my dears'}

     =>Live Viewer Feature 
          -instantly display live viewers for each single page.
          -Each page shouldn't be compounded.

          post 15 page - 2 persons 
          post 16 page - 3 persons
          If pages are compouned - 5 persons for each pages

          php artisan make:event PostLiveViewerEvent

          =In PostLiveViewerEvent.php 
               class PostLiveViewerEvent implements ShouldBroadcast
               {
                    use Dispatchable, InteractsWithSockets, SerializesModels;

                    public $count;
                    public $postid;
                    public function __construct($count,$postid)
                    {
                         $this->count = $count;
                         $this->postid = $postid;
                    }

                    public function broadcastOn(): array
                    {
                         return ["postliveviewer-channel_".$this->postid];
                    }

                    public function broadcastAs()
                    {
                         return 'postliveviewer-event';
                    }
               }

               ------------------------------------
               Channel = TV channels (MRTV, MRTV-4, Channel-7, YTV, Fortune)
               Event = TV channel's program (The mask singer, Myanmar Idol) 

               *The above Chat-Channel and postliveviewer-channnel can't use as a single unit.
               *Channels shouldn't be  mixed up.

               =To seperate channels for each page, post_id will be used
                    postliveviewer-channel_15  - post 15 viewer will use this channel
                    postliveviewer-channel_16 - post 16 viewer will use this channel

               *It only include the number of viewer, not showing who view the post. It should include user_id to describe users.

          php artisan make:controller PostLiveViewersController 
          =In PostLiveViewersController.php 
               use Illuminate\Http\Request;
               use Illuminate\Support\Facades\Cache;
               use App\Models\Post;
               use App\Events\PostLiveViewerEvent;
               public function incrementviewer(Post $post){
                    // auto increment to each cache key
                    $count = Cache::increment("postliveviewer-count_".$post->id); // different key names for different posts
                    
                    broadcast(new PostLiveViewerEvent($count,$post->id));

                    return response()->json(["success"=>true]);
               }

               public function decrementviewer(Post $post){
                    // auto decrement to each existing cache keyname
                    $count = Cache::decrement("postliveviewer-count_".$post->id); // different key names for different posts
                    
                    if($count < 0){
                         $count = 0;
                         $count = Cache::put("postliveviewer-count_".$post->id,$count); // different key names for different posts
                    }

                    broadcast(new PostLiveViewerEvent($count,$post->id));
                    
                    return response()->json(["success"=>true]);
               }
               // =Normal decreasement
               // postliveviewer-count_15 = 2 (3 - 1)
               // postliveviewer-count_15 = 1 (2 - 1)

               // Error Decreament
               // 3 viewers 
               // php artisan cache:clear
               // 0 viewers on UI 
               // 3 viewers in realworld 
               // One user left 
               // 0 - 1 = -1
               // One user left 
               // -1 - 1 = -2
               ------------------------------------
               *It don't need database manipulations to store the viewer of page.
               *It will use project local cache file to temporarily store the viewer.
                    -Since it depends on project cache, 
                         if we clear cache, the current viewers data will be removed. 

               postliveviewer-count_15 = 3
               postliveviewer-count_16= 2
               It own key name for each page.

          =In web.php 
               *use App\Http\Controllers\PostLiveViewersController;
              
               Route::post("/postliveviewerinc/{post}",[PostLiveViewersController::class,"incrementviewer"]); // here must be {post}, ca't {id} cuz controller using (Post $post)
               Route::post("/postliveviewerdec/{post}",[PostLiveViewersController::class,"decrementviewer"]); 

          =In layouts > adminheader.blade.php 
               {{-- pusher js1  --}}
                    <script src="https://js.pusher.com/8.2.0/pusher.min.js"></script>

               </head>
               *jQuery must be included.It is already linked in adminfooter.
          =In posts > show.blade.php 
               {{-- Start Hidden Area --}}
               <input type="hidden" id="setpostid" data-id="{{$post->id}}" />
               {{-- End Hidden Area --}}


               <!-- START MODAL AREA -->

               // Start Pusher  Post Live Viewer  

                    // Enable pusher logging - don't include this in production
                    // Pusher.logToConsole = true;

                    var pusher = new Pusher('e202c50a573fa42ec8ed', {
                         cluster: 'ap1'
                    });

                    function mainchannel(postid){
                         var channel = pusher.subscribe('postliveviewer-channel_'+postid);
                         
                         // global event binding
                         channel.bind('postliveviewer-event', function(data) {
                         console.log(data);
                         document.getElementById("liveviewer").textContent = data.count;
                         });
                    }

                    function incrementviewer(postid){
                         $.ajax({
                              url:`/postliveviewerinc/${postid}`,
                              type:'POST',
                              data:{
                                   _token:$("meta[name='csrf-token']").attr("content")
                              },
                              success:function(response){
                                   console.log(response);
                                   console.log("Increment = ",response.success)
                              },
                              error:function(response){
                                   console.log(response);
                              }
                         });
                    }
                    function decrementviewer(postid){
                         $.ajax({
                              url:`/postliveviewerdec/${postid}`,
                              type:'POST',
                              data:{
                                   _token:$("meta[name='csrf-token']").attr("content")
                              },
                              success:function(response){
                                   console.log("Decrement Status = ",response.success)
                              }
                         });
                    }
                    window.addEventListener("DOMContentLoaded",function(){
                         // console.log("i am loaded");
                         const getpostid = document.getElementById("setpostid").getAttribute("data-id");
                         console.log(getpostid);

                         incrementviewer(getpostid);
                         mainchannel(getpostid);
                    });
                    window.addEventListener("beforeunload",function(){

                         const getpostid = document.getElementById("setpostid").getAttribute("data-id");;

                         // console.log("i am unloaded");
                         decrementviewer(getpostid)
                    });
     
               // End Pusher Post Live Viewer 

               =Pusher work test 
                    var channel = pusher.subscribe('postliveviewer-channel_15');
                    channel.bind('postliveviewer-event', function(data) {
                         alert(JSON.stringify(data));
                    });
                    =Pusher > Channels > DLTSTUMan > 
                         Debug Console 
                         Event Creator 
                              Channel 
                                   postliveviewer-channel_15
                              Event
                                   postliveviewer-channel_15
                              Data 
                                   hello,how are you 
                              "Send Event"
               
          =>Multi Viewer Test 
               =http://127.0.0.1:8000/posts/15
                    *result (1 watching)
               =http://127.0.0.1:8000/posts/15
                    *result (2 watching)
               =http://127.0.0.1:8000/posts/16
                    *result (1 watching)
               =http://127.0.0.1:8000/posts/16
                    *result (2 watching)
               =http://127.0.0.1:8000/posts/15
                    *result (3 watching)
               =Left Post 15 (Back or Close)
                    *result (2 watching)
               =Left Post 15 (Back or Close)
                    *result (1 watching)

          =To clear the Page Live Viewer Cache
               php artisan cache:clear 
               -It will restart with the live viewer count at 0.

          =Event Calling Method 2
               =In  posts > show.blade.php 
                    function mainchannel(postid){
                         var channel = pusher.subscribe('postliveviewer-channel_'+postid);
                         
                         // global event binding
                         //             postliveviewer-event
                         channel.bind('App\\Events\\PostLiveViewerEvent', function(data) {
                         console.log(data);
                         document.getElementById("liveviewer").textContent = data.count;
                         });
                    }     

               =In PostLiveViewerEvent.php 
                    // public function broadcastAs()
                    // {
                    //     return 'postliveviewer-event';
                    // }
                    *do not implement broadcastAs()

     =>Post Stay Time Feature 
          =To strict office staff 
               -how many hours they stay in page and serve clients 
               -how many clicks they have done 
               -how many routes they go through 
          
          =Migration 
               php artisan make:model PostViewDuration -m

               =In create_post_view_durations_table.php
                    up()
                    $table->foreignId("user_id")->constrained()->onDelete("cascade");
                    $table->foreignId("post_id")->constrained()->onDelete("cascade");
                    $table->integer("duration"); // store view time in minutes

               php artisan migrate

               *Addable colums 
                    Entry Time 
                    Exit Time 
                    
                    *Duration shouldn't be stored in database.
                    -It can be calculated from those times.The different between entry time and exit time is duration.
               *In this lession we only collect duration.

          =In PostViewDuration.php 
               protected $table = "post_view_durations";
               protected $primaryKey = "id";
               protected $fillable = [
                    "user_id",
                    "post_id",
                    "duration"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function post(){
                    return $this->belongsTo(Post::class);
               }

          php artisan make:controller PostViewDurationsController

          =In web.php 
               *use App\Http\Controllers\PostViewDurationsController;
               Route::post("/trackdurations",[PostViewDurationsController::class,"trackduration"]);

          php artisan make:middleware PostViewDurationMid
          =In Kernel.php 
                protected $middlewareGroups = [
                    'web' => [
                         \App\Http\Middleware\EncryptCookies::class,
                         \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
                         \Illuminate\Session\Middleware\StartSession::class,
                         \Illuminate\View\Middleware\ShareErrorsFromSession::class,
                         \App\Http\Middleware\VerifyCsrfToken::class,
                         \Illuminate\Routing\Middleware\SubstituteBindings::class,

                         \App\Http\Middleware\PageViewMid::class,
                         \App\Http\Middleware\PostViewDurationMid::class,

                    ],
          
          =In PostViewDurationMid.php 

               *use Illuminate\Support\Facades\Session;
               public function handle(Request $request, Closure $next): Response
               {
                    
                    $post = $request->route("post"); // to get post id 
                    // dd($post); // 15 

                    if($post){
                         Session::put("entrytime",now());
                         Session::put("post_id",$post);
                    }
                    return $next($request);
               }
               http://127.0.0.1:8000/posts/15
               *result (15)
               http://127.0.0.1:8000/posts
               *result (null)
               http://127.0.0.1:8000/students/2
               *result (null)
               http://127.0.0.1:8000/students
               *result (null)

               =>Working Process of request->route("post")
                    Matching the Route:
                    When a request is made, Laravel matches the request URL against the defined routes. If a route with a parameter is matched (e.g., /post/{post}), Laravel extracts the parameter value from the URL.

                    Retrieving the Parameter:
                    When $request->route("post") is called, Laravel looks up the "post" parameter in the current route and returns its value.

          =In posts > show.blade.php 
               // Start Post View Duration 
               $(window).on("beforeunload",function(){
                                                  // toString() // Wed Jun 26 2024 14:44:52 GMT+0630 (Myanmar Time)
                         const exittime = new Date().toISOString(); // 2024-06-26T08:17:31.516Z
                         // console.log(exittime);

                         $.ajax({
                              url:"/trackdurations",
                              type:"POST",
                              data:{
                                   exittime:exittime,
                                   _token:"{{csrf_token()}}"
                              },       
                              success:function(response){
                                   console.log(response);
                              },
                              error:function(response){
                                   console.log(response);
                              }
                         })
                    });
               // End Post View Duration

               // Start Pusher  Post Live Viewe

               *Adjust date, time format between front end and back end 
               *api response on (url:"/trackdurations",)
               {status: 'success', entrytime: '2024-06-26T08:47:53.197613Z', exittime: '2024-06-26T08:47:52.656Z', postid: {…}}
                    entrytime: "2024-06-26T08:47:53.197613Z"
                    exittime: "2024-06-26T08:47:52.656Z"
                    postid: {id: 16, image: null, title: 'CSS Inter Batch 10', slug: '', content: 'hello sir', …}
                    status: "success"
                    [[Prototype]]: Object
               *entrytime and exittime format ar matched

               {status: 'success', entrytime: '2024-06-26T09:13:01.742864Z', exittime: '2024-06-26T09:13:01.159000Z', postid: {…}, duration: 0}
                    duration: 0
                    entrytime: "2024-06-26T09:13:01.742864Z"
                    exittime: "2024-06-26T09:13:01.159000Z"
                    postid: {id: 16, image: null, title: 'CSS Inter Batch 10', slug: '', content: 'hello sir', …}
                    status: "success"
                    [[Prototype]]: Object
               *duration equal to zero because we test the exit time with ready() function.
               *$(window).on("beforeunload",function(){ is confused with pusher beforeunload by js.


               $(document).ready(function(){
                                             // toString() // Wed Jun 26 2024 14:44:52 GMT+0630 (Myanmar Time)
                    const exittime = new Date().toISOString(); // 2024-06-26T08:17:31.516Z
                    // console.log(exittime);

                    $.ajax({
                         url:"/trackdurations",
                         type:"POST",
                         data:{
                              exittime:exittime,
                              _token:"{{csrf_token()}}"
                         },       
                         success:function(response){
                              console.log(response);
                         }
                    })
               });

          =In PostViewDurationsController.php 
               use Carbon\Carbon;
               use Illuminate\Http\Request;
               use Illuminate\Support\Facades\Auth;
               use Illuminate\Support\Facades\Session;
               use App\Models\PostViewDuration;

               public function trackduration(Request $request){
                    // need to convert laravel timing format to get time diff
                    // $entrytime = Session::get("entrytime"); // entrytime: "2024-06-26T08:47:53.197613Z"
                    // $exittime = $request->input("exittime"); // exittime: "2024-06-26T08:47:52.656Z"
                    
                    $entrytime = Carbon::parse(Session::get("entrytime"));  // entrytime: "2024-06-26T09:09:00.695128Z"
                    $exittime = Carbon::parse($request->input("exittime")); // exittime: "2024-06-26T09:09:00.243000Z"
                    $postid = Session::get("post_id")->id;
                    $user_id = Auth::id(); 

                    if($entrytime && $exittime && $postid && $user_id){

                         // $durationinseconds = $entrytime->diffInSeconds($exittime);
                         $durationinminutes = $entrytime->diffInMinutes($exittime);

                         $postviewduration = new PostViewDuration();
                         $postviewduration->user_id = $user_id; 
                         $postviewduration->post_id = $postid; 
                         $postviewduration->duration = $durationinminutes; 
                         $postviewduration->save();

                         // Clear Session Variable 
                         Session::forget("entrytime");
                         Session::forget("post_id");
                    }

                    // return response()->json(["status"=>"success","entrytime"=>$entrytime,"exittime"=>$exittime,"postid"=>$postid,"duration"=>$durationinseconds]);
                    return response()->json(["status"=>"success"]);
                    
               }
               


               *get authenticated user_id
                    not the user who create post.
               *post_id from Session is an post model object. We need post id only not whole post object.
          
          =>Displaying Other users durations 
               -Displaying who viewed the post and for how long 
                    exclude the current user

               =>In PostsController.php 
                    public function show(string $id)
                    {
                         $post = Post::findOrFail($id);

                         // dd($post->checkenroll(1)); // true

                         // $comments = Comment::where("commentable_id",$post->id)->where("commentable_type","App\Models\Posts")->orderBy("created_at","desc")->get();
                         $comments = $post->comments()->orderBy("updated_at","desc")->get();
                         $dayables = $post->days()->get();
                         // dd($dayables);

                         $user_id = Auth::user()->id;;
                         $postviewdurations = $post->postviewdurations()->whereNot("user_id",$user_id)->orderBy("id","desc")->take("10")->get();

                         return view("posts.show",["post"=>$post,"comments"=>$comments,"dayables"=>$dayables,"postviewdurations"=>$postviewdurations]);
                    }
               
               =In Post.php 
                    public function postviewdurations(){
                         return $this->hasMany(PostViewDuration::class);
                    }
               
               =>In posts > show.blade.php
                    <h6>Additional Info</h6>
                         <div class="card border-0 rounded-0 shadow mb-4">
                              <ul class="nav">
                                   <li class="nav-item">
                                        <button type="button" id="autoclick" class="tablinks" onclick="gettab(event,'follower')">Follower</button>
                                   </li>
                                   <li class="nav-item">
                                        <button type="button" class="tablinks" onclick="gettab(event,'following')">Following</button>
                                   </li>
                                   <li class="nav-item">
                                        <button type="button" class="tablinks" onclick="gettab(event,'liked')">Liked</button>
                                   </li>
                                   <li class="nav-item">
                                        <button type="button" class="tablinks" onclick="gettab(event,'remark')">Remark</button>
                                   </li>
                                   <li class="nav-item">
                                        <button type="button" class="tablinks" onclick="gettab(event,'duration')">Duration</button>
                                   </li>
                              </ul>

                              <div class="tab-content">

                                   <div id="follower" class="tab-pane">
                                        <h3>This is Home Information</h3>
                                        <p>{{ $post->content }}</p>
                                   </div>

                                   <div id="following" class="tab-pane">
                                        <h3>This is Profile Information</h3>
                                        <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
                                   </div>

                                   <div id="liked" class="tab-pane">
                                        <h3>This is Contact Information</h3>
                                        <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
                                   </div>

                                   <div id="remark" class="tab-pane">
                                        <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
                                   </div>

                                   <div id="duration" class="tab-pane">
                                        <h6>This is frequently viewer's duration</h6>
                                        <table class="table table-sm table-hover border">
                                             <thead>
                                                  <tr>
                                                       <th>User</th>
                                                       <th>Duration</th>
                                                       <th>Date</th>
                                                  </tr>
                                             </thead>
                                             <tbody>
                                                  @foreach($postviewdurations as $postviewduration)
                                                       <tr>
                                                            <td>{{ $postviewduration->user->name }}</td>
                                                            <td>{{ $postviewduration->duration }} s</td>
                                                            <td>{{ $postviewduration->created_at->format("d M Y h:m A") }}</td>
                                                       </tr>
                                                  @endforeach
                                             </tbody>
                                        </table>
                                   </div>

                              </div>
                         </div> 

               =From admin side 
                    This is frequently viewer's duration
                    User	Duration	     Date
                    su su	186 s	28 Jun 2024 04:06 PM
                    su su	0 s	     27 Jun 2024 07:06 PM
                    su su	9 s	     27 Jun 2024 07:06 PM
                    su su	0 s	     27 Jun 2024 07:06 PM
                    su su	1 s	     27 Jun 2024 07:06 PM
                    su su	1 s	     27 Jun 2024 07:06 PM
                    su su	0 s	     27 Jun 2024 07:06 PM
                    su su	0 s	     27 Jun 2024 07:06 PM
                    su su	0 s	     27 Jun 2024 07:06 PM
                    su su	2 s	     27 Jun 2024 07:06 PM
               
               =From su su side    
                    User	     Duration	Date
                    admin	54 s	     28 Jun 2024 04:06 PM
                    admin	281 s	28 Jun 2024 04:06 PM
                    admin	27 s	     28 Jun 2024 04:06 PM
                    admin	0 s	     26 Jun 2024 06:06 PM
                    admin	5 s	     26 Jun 2024 04:06 PM
                    admin	4 s	     26 Jun 2024 04:06 PM
                    admin	1 s	     26 Jun 2024 04:06 PM

     =>Online/Offline User
          =Migration 
               php artisan make:migration add_is_online_and_last_active_to_users_table --table=users

               =In add_is_online_and_last_active_to_users_table.php 
                    up()
                         $table->boolean("is_online")->default(false)->after("password");
                         $table->timestamp("last_active")->nullable()->after("is_online");
                    down()
                         $table->dropColumn("is_online");
                         $table->dropColumn("last_active");
               
               php artisan migrate 

          php artisan make:middleware OnOffUserStatusMid
          =In OnOffUserStatusMid.php 
               *use Illuminate\Support\Facades\Auth;
               public function handle(Request $request, Closure $next): Response
               {
                    if(Auth::check()){
                         $user = Auth::user();
                         $user->is_online = true;
                         $user->last_active = now();
                         $user->save();
                    }
                    return $next($request);
               }
          
          =In Kernel.php 
               protected $middlewareGroups = [
               'web' => [
                    \App\Http\Middleware\EncryptCookies::class,
                    \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
                    \Illuminate\Session\Middleware\StartSession::class,
                    \Illuminate\View\Middleware\ShareErrorsFromSession::class,
                    \App\Http\Middleware\VerifyCsrfToken::class,
                    \Illuminate\Routing\Middleware\SubstituteBindings::class,

                    \App\Http\Middleware\PageViewMid::class,
                    \App\Http\Middleware\PostViewDurationMid::class,
                    \App\Http\Middleware\OnOffUserStatusMid::class,
               ],
          
          =reload current page on browser
          =In phpmyadmin 
               id	name	     email	          email_verified_at	password	                                             is_online	     last_active	     remember_token	created_at	updated_at	
               1	admin	admin@gmail.com	NULL	               $2y$12$xffXPm7kidQvS4CgU8LThuAgkEb5otckKTMpVJtuDmr...	1	          2024-06-27 15:13:22	iO5rroChpyNkNnpYKtJ9LUYn8QQYcb0iShc6Vez8L3xUL8Nz2Y...	2023-12-12 07:27:33	2024-06-27 15:13:22	
          
               *is_online and last_active column filled.

          =In User.php 
               public function scopeOnlineusers($query){
                    return $query->where("is_online",1)->get();
               }
               public function scopeOfflineusers($query){
                    return $query->where("is_online",0)->get();
               }
          
          =To get online users information on all page across platform, 
               transfer global data in AppServiceProvider. 
               (It save the much resources than transfering user data in all controllers)
               =transfer online users data from providers > AppServiceProvider.php

               =>Seperate Provider 
                    php artisan make:provider OnOffUserStatusServiceProvider

                    app > Providers > OnOffUserStatusServiceProvider.php 
                    =Original OnOffUserStatusServiceProvider.php 
                         <?php

                         namespace App\Providers;

                         use Illuminate\Support\ServiceProvider;

                         class OnOffUserStatusServiceProvider extends ServiceProvider
                         {
                              /**
                                   * Register services.
                                   */
                              public function register(): void
                              {
                                   //
                              }

                              /**
                                   * Bootstrap services.
                                   */
                              public function boot(): void
                              {
                                   //
                              }
                         }

                    =In providers > OnOffUserStatusServiceProvider.php 
                         use Illuminate\Support\ServiceProvider;
                         use Illuminate\Support\Facades\View;
                         use App\Models\User;
                         public function register(): void
                         {
                              // View::composer('*',function($view){
                              //     $onlineusers = User::Onlineusers();
                              //     $offlineusers = User::Offineusers();

                              //      $view->with("onlineusers",$onlineusers);
                              //     // $view->with([
                              //     //     "onlineusers"=>$onlineusers,
                              //     //     "offlineusers"=>$offlineusers
                              //     // ]);

                              // });

                              view()->composer('*',function($view){
                                   $onlineusers = User::Onlineusers();

                                   $view->with("onlineusers",$onlineusers);

                              });
                         }

                    =To register user-defined service provider 
                         =In config > app.php 
                              'providers' => ServiceProvider::defaultProviders()->merge([
                              /*
                              * Package Service Providers...
                              */

                              /*
                              * Application Service Providers...
                              */
                              App\Providers\AppServiceProvider::class,
                              App\Providers\AuthServiceProvider::class,
                              // App\Providers\BroadcastServiceProvider::class,
                              App\Providers\EventServiceProvider::class,
                              App\Providers\RouteServiceProvider::class,

                              App\Providers\OnOffUserStatusServiceProvider::class,

                         ])->toArray(),

                    #Service Providers
                         One of the most important kernel bootstrapping actions is loading the service providers for your application. 
                         Service providers are responsible for bootstrapping all of the framework's various components, such as the database, queue, validation, and routing components. 
                         All of the service providers for the application are configured in the config/app.php configuration file's providers array.

                         Essentially every major feature offered by Laravel is bootstrapped and configured by a service provider. 
                         Since they bootstrap and configure so many features offered by the framework, service providers are the most important aspect of the entire Laravel bootstrap process.
          
                         Laravel will iterate through this list of providers and instantiate each of them. After instantiating the providers, the register method will be called on all of the providers. 
                         Then, once all of the providers have been registered, the boot method will be called on each provider. 
          =To Detect Logout Activity 
               php artisan make:listener OnOffUserStatusListener
               = app > Listeners > OnOffUserStatusListener.php 
               =Original OnOffUserStatusListener.php 
                    <?php

                    namespace App\Listeners;

                    use Illuminate\Contracts\Queue\ShouldQueue;
                    use Illuminate\Queue\InteractsWithQueue;

                    class OnOffUserStatusListener
                    {
                         /**
                              * Create the event listener.
                              */
                         public function __construct()
                         {
                              //
                         }

                         /**
                              * Handle the event.
                              */
                         public function handle(object $event): void
                         {
                              //
                         }
                    }

               =In OnOffUserStatusListener.php 
                    public function handle(object $event): void
                    {
                         $user = $event->user; // it get the related user Model
                         $user->is_online = false;
                         $user->save();
                    }
               
               =To register listener 
                    =In providers > EventServiceProvider
                         use Illuminate\Auth\Events\Registered;
                         use Illuminate\Auth\Events\Logout;

                         protected $listen = [
                              Registered::class => [
                                   SendEmailVerificationNotification::class,
                              ],

                              Logout::class=>[
                                   "App\Listeners\OnOffUserStatusListener"
                              ]
                         ];
                    
                    *listening logout event
          
               =Logout Admin 
               =Log In as susu 
                    =In phpmyadmin 
                         id	name	e    mail	               is_online	last_active	remember_token	created_at	updated_at	
                         1	admin	admin@gmail.com     0	     2024-06-27 17:08:54	jwti6vB1jrCISPvwWtkEmPwp2YAdjMt5YVm6OpdMLLUeB2eTOX...	2023-12-12 07:27:33	2024-06-27 17:08:54	
                         30	su su	susu@gmail.com	     1	     2024-06-27 17:09:06	WG78CSh80EkCMz95SrANZbXjfXBmBG85wZ8b7YGQRXYhJ1cq9K...	2023-12-12 07:27:33	2024-06-27 17:09:06	

               *The code in your middleware class explains why the last_active column is automatically updated. 
                    In your middleware, you're setting the last_active attribute to the current timestamp (now()) whenever a request is made by an authenticated user.
               Effect on Logout
                    When a user logs out, the middleware still gets triggered on the logout request, 
                    and since the user is authenticated before the logout completes, the last_active column gets updated.


          =In layouts > adminfooter.blade.php 
               <ul id="onoffusers" class="list-group list-group-flush">
                @foreach($onlineusers as $onlineuser)
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <div class="small">{{ $onlineuser->name }}</div>
                            <div class="small">{{  \Carbon\Carbon::parse($onlineuser->last_active)->format("m-d-Y h:m:s a") }}</div>
                        </div>
                        <div class="text-success">
                            <i class="fas fa-circle fa-xs"></i>
                        </div>
                    </li>
                @endforeach
               </ul>
               *Error (Call to a member function format() on string)
               {{ $onlineuser->last_active->format("h:m:s") }}

          =>Managing Many Online User On UI
               =>Playing Scroll 
                    =Hidding Sidebar Scroll for pretty template
                    =In public > assets > dist > css > style.css
                         /* Start Navbar */
                         .sidebars{
                              min-height: 100vh;
                              background-color: #000;
                         }
                         .sidebars::-webkit-scrollbar{
                              width: 0;
                         }
                    
                    =Customizing User Scroll
                         =In public > assets > dist > css > style.css
                    
                              /* Start Right Navbar */
                              .right-panels{
                                   width: 200px;
                                   height: 80vh;
                                   background-color: #f4f4f4;
                                   
                                   position: absolute;
                                   top: 70px;
                                   right: 0;
                                   
                                   padding: 10px;
                                   box-shadow: -5px 3px 10px rgba(0, 0, 0, 0.5);
                                   
                                   z-index: 200;

                                   overflow:scroll;

                                   display: none;
                              }
                              .right-panels::-webkit-scrollbar{
                                   width:3px;
                              }

                              /* background */
                              .right-panels::-webkit-scrollbar-track{
                                   background-color: #f4f4f4;
                              }

                              /* bar */
                              .right-panels::-webkit-scrollbar-thumb{
                                   background-color: #888;
                              }

                              /* hover */
                              .right-panels::-webkit-scrollbar-thumb:hover{
                                   background-color: #555;
                              }

          =>Search User
               =In adminfooter.blade.php 
                    <!-- Start Right Navbar -->
                    <div class="right-panels">
                         <form action="" method="">
                              <input type="text" name="usersearch" id="usersearch" class="form-control form-control-sm rounded-0 mb-2" placeholder="Search...."/>
                         </form>
                         <ul id="onoffusers" class="list-group list-group-flush">
                              @foreach($onlineusers as $onlineuser)
                                   <li class="list-group-item d-flex justify-content-between align-items-center">
                                   <div>
                                        <div class="small">{{ $onlineuser->name }}</div>
                                        <div class="small">{{  \Carbon\Carbon::parse($onlineuser->last_active)->format("m-d-Y h:m:s a") }}</div>
                                   </div>
                                   <div class="text-success">
                                        <i class="fas fa-circle fa-xs"></i>
                                   </div>
                                   </li>
                              @endforeach
                         </ul>
                    </div>
                    <!-- End Right Navbar -->

                    // Start Onoffuser Search 
                    var getusersearch = document.getElementById('usersearch');
                    
                    var getonoffusers = document.getElementById('onoffusers');
                    var getonoffuserlis = getonoffusers.getElementsByTagName('li');
                    // console.log(getonoffusers);
                    // console.log(getonoffuserlis);//HTMLCollection

                    // Event Listener
                    getusersearch.addEventListener('keyup',filter);
               
                    function filter(){
                         // console.log(this.value);


                         var inputfilter = this.value.toLowerCase();
                         // console.log(inputfilter);

                         for(var x = 0 ; x < getonoffuserlis.length ; x++){
               
                              var getlink = getonoffuserlis[x].getElementsByTagName('div')[1];
                              // console.log(getlink);

                              var getdivtext = getlink.textContent || getlink.innerText;

                              if(getdivtext.toLowerCase().indexOf(inputfilter) > -1){
                              getonoffuserlis[x].classList.remove("d-none")
                              }else{
                              getonoffuserlis[x].classList.add("d-none")
                              }
                         }
                    }
                    // End Onoffuser Search

     =>Laravel with bootstrap 
          npm -v 
          node -v 
          
          =>Disconnecting bootstrap links 
               =In adminheade.blade.php 
                    <!-- bootstrap css1 js1 -->
                    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous"> -->

               =In adminfooter.blade.php 
                    <!-- bootstrap css1 js1 -->
                    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script> -->
                    * only one javascript cuz using bundle 
                    *buldle file already include showing pop up box and drop down box.

               Bootstrap links weaknesses 
               -long loading time
               -require internet 
               -heavy weight file

          =>Bootstrap Install 

               npm install bootstrap 
               npm install @popperjs/core         (or) npm install bootstrap @popperjs/core
               -------------------------------------------------------------------$_COOKIE
               =>Before install 
                    = node_modules 

                    =Original package.json 
                    {
                         "private": true,
                         "type": "module",
                         "scripts": {
                              "dev": "vite",
                              "build": "vite build"
                         },
                         "devDependencies": {
                              "@tailwindcss/forms": "^0.5.2",
                              "alpinejs": "^3.4.2",
                              "autoprefixer": "^10.4.2",
                              "axios": "^1.6.1",
                              "laravel-vite-plugin": "^0.8.0",
                              "postcss": "^8.4.6",
                              "tailwindcss": "^3.1.0",
                              "vite": "^4.0.0"
                         }
                    }

                    *laravel utilize tailwindcss by default

               =Installation 
                   Terminal: /exercisetwo
                    npm install bootstrap 

                    {{--
                    npm audit (looking for upgrade)
                    npm audit fix (fixing npm packages)
                    --}}

                    npm install @popperjs/core     
               =>After Install
                    = node_modules 
                         > bootstrap
                         > @popperjs\core

                         *> bootstrap
                              > dist 
                                   >css
                                        bootstrap.css 
                                        bootstrap.min.css  
                                   >js 
                                        bootstrap.js 
                                        bootstrap.min.js 

                    =In package.json 
                         "dependencies": {
                              "@popperjs/core": "^2.11.8",
                              "bootstrap": "^5.3.3"
                         }

               =>Configuration 
                    *Earlier version of laravel use webpack, 
                         later version use vite 

                    =Original vite.config.js 
                         import { defineConfig } from 'vite';
                         import laravel from 'laravel-vite-plugin';

                         export default defineConfig({
                         plugins: [
                              laravel({
                                   input: [
                                        'resources/css/app.css',
                                        'resources/js/app.js',
                                   ],
                                   refresh: true,
                              }),
                         ],
                         });
                    
                    =Custom css & js 
                         public > assets > dist > css > style.css 
                         public > assets > dist > js > app.js 

                    =In resources 
                         = > css > app.css 
                              @tailwind base;
                              @tailwind components;
                              @tailwind utilities;
                         *can also write custom css under app.js
                         *we can use tailwind since it mention tailwind

                         = > js > app.js 
                              import './bootstrap';

                              import Alpine from 'alpinejs';

                              window.Alpine = Alpine;

                              Alpine.start();
                    -----------------------------
                    =In app.js 
                         import "bootstrap/dist/css/bootstrap.min.css";
                         import "../css/app.css";
                    
                    =In resorces > app.css 
                         @import "bootstrap/dist/css/bootstrap.min.css";

                         /* if you use boostrap, tailwind must disabled */
                         /* @tailwind base;
                         @tailwind components;
                         @tailwind utilities; */


                    =Terminal: /exercisetwo
                    npm run build 

                    =Linking Bootstrap 
                         <!-- bootstrap css1 js1 -->
                         <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous"> -->
                         @vite(["resources/css/app.css","resources/js/app.js"])
                    
                    *Boostrap style work well but doesn't work dropdown and pop up.

                    =Chrom's View Page Source 
                         <!-- bootstrap css1 js1 -->
                         <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous"> -->
                         <link rel="preload" as="style" href="http://127.0.0.1:8000/build/assets/app-46b1ea1e.css" /><link rel="modulepreload" href="http://127.0.0.1:8000/build/assets/app-b1941ff8.js" /><link rel="stylesheet" href="http://127.0.0.1:8000/build/assets/app-46b1ea1e.css" /><script type="module" src="http://127.0.0.1:8000/build/assets/app-b1941ff8.js"></script>       

                    *After changing resources files, must run 
                         npm run build 

                    npm run dev    (hosting site using vite instead of artisan comand)
                    npm run build

                    =>Working Dropdown 
                         
                         =In layouts > adminindex.blade.php 
                              *all elements under "app" block like Reactjs, VIUjs style 
                              
                              @include("layouts.adminheader")

                              <div id="app">
                                   <!-- Start Site Setting -->
                                   <div id="sitesettings" class="sitesettings">
                                        <div class="sitesettings-item"><a href="javascript:void(0);" id="sitetoggle" class="sitetoggle"><i class="fas fa-cog ani-rotates"></i></a></div>
                                   </div>
                                   <!-- End Site Setting -->

                                   <!-- Start Left Side Bar -->
                                   @include("layouts.adminleftsidebar")
                                   <!-- End Left Side Bar -->

                                   <!-- Start Content Area -->
                                   <section>
                                        <div class="container-fluid">
                                             <div class="row">
                                                  <div class="col-lg-10 col-md-9 ms-auto pt-md-5 mt-mt-3">
                                                  <!-- Start Inner Content Area -->
                                                  <div class="row">
                                                       {{-- <h5>@yield("caption")</h5> --}}
                                                       {{--<h6>{{ucfirst(Request::path()) }}</h6> --}}

                                                       <nav>
                                                            <ol class="breadcrumb">
                                                                 <li class="breadcrumb-item"><a href="{{ \Request::root() }}"><i class="fas fa-home"></i></a></li>
                                                                 <li class="breadcrumb-item"><a href="{{ url()->previous() }}">{{ Str::title(preg_replace("/[[:punct:]]+[[:alnum:]]+/","",str_replace(Request::root()."/","",url()->previous()))) }}</a></li>
                                                                 <li class="breadcrumb-item active">{{ucfirst(Request::path()) }}</li>
                                                            </ol>
                                                       </nav>

                                                       @yield("content")
                                                  </div>
                                                  <!-- End Inner Content Area -->
                                                  </div>
                                             </div>
                                        </div>
                                   </section>
                                   <!-- End Content Area -->
                                   
                              </div>
                              
                              @include("layouts.adminfooter")

                         =In resources > app.js 
                              *removing default dot for bootstrap path.

                              import 'bootstrap';
                              import "bootstrap/dist/css/bootstrap.min.css";
                              import "../css/app.css";

                              import Alpine from 'alpinejs';

                              window.Alpine = Alpine;

                              Alpine.start();
                         
                         =Terminal: /exercisetwo
                              npm run build 

          =>Custom css with Vite 
               =>Disconnecting custom file links 
                    =In layouts > adminheader.blade.php 
                         <!-- custom css css1 -->
                         <!-- <link href="{{ asset('assets/dist/css/style.css') }}" rel="stylesheet" type="text/css"/> -->

               =>In vite.config.js 
                    import { defineConfig } from 'vite';
                    import laravel from 'laravel-vite-plugin';

                    export default defineConfig({
                    plugins: [
                         laravel({
                              input: [
                                   'resources/css/app.css',
                                   'resources/js/app.js',
                                   'public/assets/dist/css/style.css', // Add your custom css file
                                   'public/assets/dist/js/app.js', // Add your custom js file
                              ],
                              refresh: true,
                         }),
                    ],
                    });
                         
               =>In resources > app.js 
                    import 'bootstrap';                          // Bootstrap js
                    import "bootstrap/dist/css/bootstrap.min.css"; // Bootstrap css
                    import "../css/app.css";                     // main css
                    import "../../public/assets/dist/css/style.css"; // Custom CSS

                    import Alpine from 'alpinejs';

                    window.Alpine = Alpine;

                    Alpine.start();

               =In resources > app.css 
                    // nothing changes

               =Terminal: /exercisetwo
                    npm run build 

               =Liking Files 
                    // Nothing to specially connect

                    -because since we previously connect bootstrap file in app.js and app.css 
                         =In adminheader.blade.php 
                              <!-- bootstrap css1 js1 -->
                              <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous"> -->
                              @vite(["resources/css/app.css","resources/js/app.js"])

                    -app.js file already invoke custom style.css 
                         =In app.js 
                              import "../../public/assets/dist/css/style.css"; // Custom CSS
                              
               =>Custom css way 2
                    =In resources > app.js 
                         import 'bootstrap';                          // Bootstrap js
                         import "bootstrap/dist/css/bootstrap.min.css"; // Bootstrap css
                         import "../css/app.css";                     // main css
                         // import "../../public/assets/dist/css/style.css"; // Custom CSS

                    =Terminal: /exercisetwo
                         npm run build 

                    =In adminheader.blade.php 
                         <!-- bootstrap css1 js1 -->
                         <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous"> -->
                         @vite(["resources/css/app.css","resources/js/app.js","public/assets/dist/css/style.css"])
               -----------------------------------
               =>Custom Js way 1
                    =In adminfooter.blade.php
                         !-- custom js js1 -->
                         <!-- <script src="{{ asset('assets/dist/js/app.js') }}" type="text/javascript"></script> -->
                         @vite(["public/assets/dist/js/app.js"])
                    
                    *app.js is working with modules inside.
                    *Notification Center Box dispear when using this way. 
                         -Solution 
                              +define Event Listener for notification button.
               =>Custom js way 2 
                    =In resources > app.js 
                         import 'bootstrap';                          // Bootstrap js
                         import "bootstrap/dist/css/bootstrap.min.css"; // Bootstrap css
                         import "../css/app.css";                     // main css
                         import "../../public/assets/dist/css/style.css"; // Custom CSS
                         import "../../public/assets/dist/js/app.js"; // Custom JS

                         import Alpine from 'alpinejs';

                         window.Alpine = Alpine;

                         Alpine.start();

                    =Terminal: /exercisetwo
                         npm run build 

                    =Everying work well if only use regular js
                         but it can face with error when the custom js use jQuery.
                         -cuz jQuery file is linked in adminfooterfile.
                         It is using jQuery earlier the file links.
                         -don't recommend this way 
               
               =In Chrome's View Page Source 
                    <!-- custom js js1 -->
                    <!-- <script src="http://127.0.0.1:8000/assets/dist/js/app.js" type="text/javascript"></script> -->
                    <link rel="modulepreload" href="http://127.0.0.1:8000/build/assets/app-8703fb8a.js" /><script type="module" src="http://127.0.0.1:8000/build/assets/app-8703fb8a.js"></script> 

                    *It already removed white space and comments 
                         -cuz it is put in webpack
               
               -----------------------------------
               =Terminal: /exercisetwo
                    npm run dev 

                    VITE v4.5.3  ready in 3233 ms
                    ➜  Local:   http://localhost:5173/

               =Chrome's View Page Source 
                     <!-- bootstrap css1 js1 -->
                    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous"> -->
                    <script type="module" src="http://[::1]:5173/@vite/client"></script><link rel="stylesheet" href="http://[::1]:5173/resources/css/app.css" /><script type="module" src="http://[::1]:5173/resources/js/app.js"></script><link rel="stylesheet" href="http://[::1]:5173/public/assets/dist/css/style.css" />        

          =>Vite Notes 
               =vite.config.js 
                    input array specifies the entry points for Vite to start building the assets. 
                    These entry points are the files that Vite will process, bundle, and optimize for your Laravel application.

               npm run build
                    -Bundles and minifies your assets for optimized performance.
                    -Outputs the built files to the public directory (or another specified output directory).

               npm run dev
               -Starts a local development server.
               -Compiles and bundles assets as you make changes.

               The @vite directive in Blade files is used to include assets (such as CSS and JavaScript files) that are managed and built by Vite in your Laravel application.
               Behind the Scenes
                    When you run "npm run build", Vite processes and bundles the assets, generating optimized versions of the files. The @vite directive then includes the correct paths to these built assets in your HTML, ensuring that your application loads efficiently in production

                    When you run npm run dev, Vite serves the assets directly and enables hot module replacement. The @vite directive generates the necessary HTML tags to include these assets from the Vite server. This allows for a fast development experience where changes are reflected immediately without a full page reload.

          =>Difference between internal server link and cdn link
               =Some page losts design 
                    No desing in Login, Register, Forget Password Page
               =Table white background 

          =>Removing white background 
               =In public > assets > dist > css > style.css 
                    table#mytable th, table#mytable td{
                         background-color:transparent;
                    }

               *Compiling the changes
               =Terminal: /exercisetwo
                    npm run build 
     
     =>Package 
          package limits platform's features
          - free plan for 3 month 
          - silver plan for 6 month 
          - diamon plan for 9 month 

          after student's package reach expire date, he/she can't access features.

          =Migration 
               php artisan make:migration add_package_id_and_subscription_expires_at_to_users_table --table="users"

               =In add_package_id_and_subscription_expires_at_to_users_table.php 
                    up()
                         $table->foreignId("package_id")->nullable()->after("last_active")->constrained()->onDelete("set null");
                         $table->timestamp("subscription_expires_at")->nullable()->after("package_id");
                    
                    down()
                         $table->dropForeign(["package_id"]);
                         $table->dropColumn("package_id");
                         $table->dropColumn("subscription_expires_at");
                    
                    *after() must be placed in the front of constrained.
                    *dropForeign() also remove foreign key index.
               
               *Foreign Table Error 
               php artisan make:model Package -m
               =In create_packages_table.php 
                    up()
                    $table->string("name");
                    $table->decimal("price",8,2);
                    $table->integer("duration"); // by day count 
               
               =In Package.php 
                    protected $table = "packages";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "name",
                         "price",
                         "duration",
                    ];

          php artisan make:controller SubscriptionsController
          =In SubscriptionsController.php
               public function expired(){
                    return view("subscriptions.expired");
               }

          =In web.php 
               use App\Http\Controllers\SubscriptionsController;

               Route::get("/subscribesexpired",[SubscriptionsController::class,"expired"])->name("subscriptions.expired");

          =resources > view > subscriptions > expired.blade.php 
          

          php artisan make:controller PackagesController 
          =In web.php 
               use App\Http\Controllers\PackagesController;
               Route::resource("packages",PackagesController::class);

          =>Create Part 
               =In PackagesController.php
               public function index(){
                    $packages = Package::all();
                    return view("packages.index",compact("packages"));
               }

               public function store(Request $request){
                    $request->validate([
                         "name"=>"required|string|max:100",
                         "price"=>"required|numeric",
                         "duration"=>"required|integer"
                    ]);
                    Package::create($request->all());
                    return response()->json(["message"=>"New Package Created"],201);
               }

               =In packages > index.blade.php 
                    <div class="col-md-12">
                         <a href="javascript:void(0);" id="createmodal-btn" class="btn btn-primary btn-sm rounded-0 me-3">Create</a>
                         <a href="javascript:void(0);" id="setmodal-btn" class="btn btn-info btn-sm rounded-0">Set to user</a>
                    </div>

                    <!-- start create modal -->
                    <div id="createmodal" class="modal fade">
                         <div class="modal-dialog modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Modal Title</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <form id="createform" action="" method="">
                                             <div class="row">
                                                  <div class="col-md-12 form-group mb-3">
                                                       <label for="name">Name <span class="text-danger">*</span></label>
                                                       <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Package Name" value="{{ old('name') }}"/>
                                                  </div>

                                                  <div class="col-md-6 form-group mb-3">
                                                       <label for="price">Price <span class="text-danger">*</span></label>
                                                       <input type="number" name="price" id="price" class="form-control form-control-sm rounded-0" placeholder="Enter Price" value="{{ old('price') }}"/>
                                                  </div>

                                                  <div class="col-md-6 form-group mb-3">
                                                       <label for="duration">Duration <span class="text-danger">*</span></label>
                                                       <input type="number" name="duration" id="duration" class="form-control form-control-sm rounded-0" placeholder="Enter Total Dsys" value="{{ old('duration') }}"/>
                                                  </div>
                                                  
                                                  <input type="hidden" name="packageid" id="packageid"/>

                                                  <div class="col-md-12 text-end">
                                                       <button type="submit" id="create-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                  </div>
                                             </div>
                                        </form>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end create modal -->


                    // Start Create Package
                    $("#createmodal-btn").click(function(){
                    
                         // clear form data
                         // $("#createform")[0].reset();
                         $("#createform").trigger("reset");
                         
                         $("#createmodal .modal-title").text("Create Package");
                         $("#create-btn").html("Add New Package");
                         $("#create-btn").val("action-type");

                         $("#createmodal").modal("show"); // toggle() can also used.
                         
                    });

                    $("#create-btn").click(function(e){
                         e.preventDefault();

                         let actiontype = $("#create-btn").val();
                         console.log(actiontype);
                         $(this).html("Sending....");

                         if(actiontype === "action-type"){
                              // Do Create
                              $.ajax({
                                   url:"{{ route('packages.store') }}",
                                   type:"POST",
                                   dataType: "json",
                                   data:$("#createform").serialize(),
                                   success:function(response){
                                        console.log(response);
                                        // console.log(this.data); // name=&price=&duration=&packageid=

                                        // $("#createform")[0].reset();
                                        $("#createform").trigger("reset");

                                        $("#createmodal").modal("hide"); // toggle
                                        
                                        $("#create-btn").html("Save Change");
                                        
                                        Swal.fire({
                                             title: "Added!",
                                             text: "Added Successfully!",
                                             icon: "success"
                                        });
                                   },
                                   error:function(response){
                                        console.log("Error: ",response);
                                        $("#create-btn").html("Save Change");
                                   }
                              });
                         }else  if(actiontype === "edit-type"){
                              // Do Edit
                         }
                    });

                    // End Create Package

               =In phpmyadmin 
                    "packges"
                    id	name	price	duration	created_at	updated_at	
                    1	Free Plan	     0.00	30	2024-07-01 15:04:59	2024-07-01 15:04:59	
                    2	Silver Plan	5000.00	90	2024-07-01 15:07:03	2024-07-01 15:07:03	
                    3	Platinum Plan	10000.00	200	2024-07-01 15:07:29	2024-07-01 15:07:29	
                    4	Gold Plan	     15000.00	300	2024-07-01 15:08:04	2024-07-01 15:08:04	
                    5	Diamond Plan	20000.00	500	2024-07-01 15:08:38	2024-07-01 15:08:38	
                    6	test1	     0.00	1	2024-07-01 15:12:19	2024-07-01 15:12:19	
                    7	test2	     0.00	2	2024-07-01 15:12:34	2024-07-01 15:12:34	

          =>Fetching Data 
               =In PackagesController.php 
                    public function index(){

                         if(request()->ajax()){
                              $packages = Package::all();
                              return view("packages.list",compact("packages"))->render();
                         }

                         return view("packages.index");
                    }

                    *If request is made by ajax, it will return list page.
                         otherwise it return index page.
               
               =In packages > list.blade.php 
                    @foreach($packages as $idx=>$package)
                         <tr>
                              <td></td>
                              <td>{{ ++$idx }}</td>
                              <td>{{ $package->name }}</td>
                              <td>{{ $package->price }}</td>
                              <td>{{ $package->duration }}</td>
                              <td>{{ $package->created_at->format("d M Y") }}</td>
                              <td>{{ $package->updated_at->format("d M Y") }}</td>
                              <td>
                                   <a href="javascript:void(0);" class="text-info edit-btns" data-id="{{ $package->id }}"><i class="fas fa-pen"></i></a>
                                   <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-id="{{ $package->id }}"><i class="fas fa-trash-alt"></i></a>
                              </td>
                         </tr>
                    @endforeach

               =In packages > index.blade.php 
                    <table id="mytable" class="table table-sm table-hover border">
          
                         <thead>
                              <th></th>
                              <th>No</th>
                              <th>Name</th>
                              <th>Price</th>
                              <th>Duration/Day</th>
                              <th>Created At</th>
                              <th>Updated At</th>
                              <th>Action</th>
                         </thead>
               
                         <tbody id="tabledata">
                              
                         </tbody>
          
                    </table>

                    // Start Fetch All Datas 
                    function fetchalldatas(){
                         $.ajax({
                              url:"{{route('packages.index')}}",
                              meethod:"GET",
                              beforeSend:function(){
                                   console.log("before:");
                              },
                              success:function(response){
                              //    console.log(response);
                                   $("#tabledata").html(response);
                              },
                              complete:function(){
                                   console.log("complete:");
                              }
                         });
                    }
                    fetchalldatas();

                    *It will get the processed list html code. It can be directly integrated into table data.
          
               =>For instant created data showcase without reloading 
                    =In packages > index.blade.php 
                         $("#create-btn").click(function(e){
                              e.preventDefault();

                              let actiontype = $("#create-btn").val();
                              console.log(actiontype);
                              $(this).html("Sending....");

                              if(actiontype === "action-type"){
                                   // Do Create
                                   $.ajax({
                                        url:"{{ route('packages.store') }}",
                                        type:"POST",
                                        dataType: "json",
                                        data:$("#createform").serialize(),
                                        success:function(response){
                                             console.log(response);
                                             // console.log(this.data); // name=&price=&duration=&packageid=

                                             // $("#createform")[0].reset();
                                             $("#createform").trigger("reset");

                                             $("#createmodal").modal("hide"); // toggle
                                             
                                             $("#create-btn").html("Save Change");

                                             fetchalldatas();

                                             Swal.fire({
                                                  title: "Added!",
                                                  text: "Added Successfully!",
                                                  icon: "success"
                                             });
                                        },
                                        error:function(response){
                                             console.log("Error: ",response);
                                             $("#create-btn").html("Save Change");
                                        }
                                   });
                              }else  if(actiontype === "edit-type"){
                                   // Do Edit
                              }
                         });
                    
                         *Invoke fetchalldatas() after successfully created response.
                         *Whenever package is created, it will actively fetch and refresh table data.

               =For Searching Package (Only My idea)
                         =In PackagesController.php 
                              public function packagesearch(Request $request){
                                   $query = $request->input("query");

                                   if($query){
                                        $statuses = Package::where("name","LIKE","%$query%")->get();
                                   }else{
                                        $statuses = Package::all();
                                   }

                                   return view("packages.list",compact("packages"))->render();
                              }
                         =In packages > index.blade.php 
                              function searchpackagedatas(query=""){
                                   $.ajax({
                                        url:"{{'/packaegessearch'}}",
                                        method:"GET",
                                        data:{"query":query},
                                        dataType:"json",
                                        success:function(response){
                                            $("#tabledata").html(response);
                                        }
                                   });
                              }
                              

                              $("#btn-search").on("click",function(e){
                                   e.preventDefault();
                                   const query = $("#filtername").val();
                                   // console.log(query);

                                   if(query.length > 0){
                                        $(".loading").show();
                                   }
                                   searchpackagedatas(query);
                              });

                         *It reduce the task of looping ajax response data in index page.
     
               =>Fetch with loading 
                    =In index.blade.php 
                         <div class="col-md-12 loader-container">
               
                              <table id="mytable" class="table table-sm table-hover border">
                         
                                   <thead>
                                        <th></th>
                                        <th>No</th>
                                        <th>Name</th>
                                        <th>Price</th>
                                        <th>Duration/Day</th>
                                        <th>Created At</th>
                                        <th>Updated At</th>
                                        <th>Action</th>
                                   </thead>
                         
                                   <tbody id="tabledata">
                                        
                                   </tbody>
                         
                              </table>
                              <div class="loader">
                                   <div class="loader-item"></div>
                                   <div class="loader-item"></div>
                                   <div class="loader-item"></div>
                              </div>
                         </div>

                          // Start Fetch All Datas 
                         function fetchalldatas(){
                              $.ajax({
                                   url:"{{route('packages.index')}}",
                                   meethod:"GET",
                                   beforeSend:function(){
                                        $(".loader").addClass("show");
                                   },
                                   success:function(response){
                                   //    console.log(response);
                                        $("#tabledata").html(response);
                                   },
                                   complete:function(){
                                        console.log("complete:");
                                        $(".loader").removeClass("show");
                                   }
                              });
                         }
                         fetchalldatas();
                         // End Fetch All Datas

          =>Edit Part 
               =In packages > index.blade.php 
                    // Start Edit Form
                         $(document).on("click",".edit-btns",function(){
                              const getid = $(this).data("id");
                              // console.log(getid);

                              $.get(`packages/${getid}/`,function(response){
                                   console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}
                              
                                   $("#createmodal .modal-title").text("Edit Package");
                                   $("#create-btn").text("Update Package");
                                   $("#create-btn").val("edit-type");
                                   $("#createmodal").modal("show"); // toggle() can also used.
                                   
                                   $("#packageid").val(response.id);
                                   $("#name").val(response.name);
                                   $("#price").val(response.price);
                                   $("#duration").val(response.duration);
                              });
                         });
                    // End Edit Form

                    $("#create-btn").click(function(e){
                         e.preventDefault();

                         let actiontype = $("#create-btn").val();
                         console.log(actiontype);
                         $(this).html("Sending....");

                         if(actiontype === "action-type"){
                              // Do Create
                              
                         }else  if(actiontype === "edit-type"){
                              const getid = $("#packageid").val();
                              $.ajax({
                                   url:`/packages/${getid}`,
                                   type:"PUT",
                                   dataType: "json",
                                   data:$("#createform").serialize(),
                                   success:function(response){
                                        console.log(response);
                                        // console.log(this.data); // name=&price=&duration=&packageid=

                                        // $("#createform")[0].reset();
                                        $("#createform").trigger("reset");

                                        $("#createmodal").modal("hide"); // toggle
                                        
                                        $("#create-btn").html("Save Change");

                                        fetchalldatas();

                                        Swal.fire({
                                             title: "Updated",
                                             text: "Update Successfully!",
                                             icon: "success"
                                        });
                                   },
                                   error:function(response){
                                        console.log("Error: ",response);
                                        $("#create-btn").html("Save Change");
                                   }
                              });
                         }
                    });

          =>Package Create/Update my code   
               =>My Create Part      
                    =In packages > index.blade.php 
                         <div class="col-md-12">
                              <a href="javascript:void(0);" id="createmodal-btn" class="btn btn-primary btn-sm rounded-0 me-3">Create</a>
                              <a href="javascript:void(0);" id="setmodal-btn" class="btn btn-info btn-sm rounded-0">Set to user</a>

                         </div>

                         <!-- start create modal -->
                         <div id="cemodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Modal Title</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="cuform" action="" method="">
                                                  <div class="row">
                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="name">Name <span class="text-danger">*</span></label>
                                                            <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Package Name" value="{{ old('name') }}"/>
                                                       </div>

                                                       <div class="col-md-6 form-group mb-3">
                                                            <label for="price">Price <span class="text-danger">*</span></label>
                                                            <input type="number" name="price" id="price" class="form-control form-control-sm rounded-0" placeholder="Enter Price" value="{{ old('price') }}"/>
                                                       </div>

                                                       <div class="col-md-6 form-group mb-3">
                                                            <label for="duration">Duration <span class="text-danger">*</span></label>
                                                            <input type="number" name="duration" id="duration" class="form-control form-control-sm rounded-0" placeholder="Enter Total Dsys" value="{{ old('duration') }}"/>
                                                       </div>
                                                       
                                                       <input type="hidden" name="packageid" id="packageid"/>

                                                       <div class="col-md-12 text-end">
                                                            <button type="submit" id="su-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- end create modal -->
          
                         // Start Create Package
                         $("#createmodal-btn").click(function(){
                         
                              // clear form data
                              // $("#cuform")[0].reset();
                              $("#cuform").trigger("reset");
                              
                              // Preparing modal and form for create
                              $("#cemodal .modal-title").text("Create Package");
                              $("#su-btn").html("Add New Package");
                              $("#su-btn").val("action-create");

                              $("#cemodal").modal("show"); // toggle() can also used.
                              
                         });

                         $("#su-btn").click(function(e){
                              e.preventDefault();

                              let actiontype = $("#su-btn").val();
                              // console.log(actiontype);
                              $(this).html("Sending....");

                              if(actiontype === "action-create"){
                                   // Do Create
                                   $.ajax({
                                        url:"{{ route('packages.store') }}",
                                        type:"POST",
                                        dataType: "json",
                                        data:$("#cuform").serialize(),
                                        success:function(response){
                                             console.log(response);
                                             // console.log(this.data); // name=&price=&duration=&packageid=

                                             // $("#cuform")[0].reset();
                                             $("#cuform").trigger("reset");

                                             
                                             $("#su-btn").html("Save Change");

                                             $("#cemodal").modal("hide"); // toggle
                                             
                                             Swal.fire({
                                                  title: "Added!",
                                                  text: "Added Successfully!",
                                                  icon: "success"
                                             });
                                        },
                                        error:function(response){
                                             console.log("Error: ",response);
                                             $("#su-btn").html("Save Change");
                                        }
                                   });
                              }else  if(actiontype === "action-edit"){
                                   // Do Edit
                              }
                         });

                         // End Create Package

               =>My Edit Part 
                    =In packages > index.blade.php 
                         // Start Edit Form
                         $(document).on("click",".edit-btns",function(){
                              const getid = $(this).data("id");
                              // console.log(getid);

                              $.get(`packages/${getid}/`,function(response){
                                   console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}
                              
                                   // Preparing modal and form for edit
                                   $("#cemodal .modal-title").text("Edit Package");
                                   
                                   $("#packageid").val(response.id);
                                   $("#name").val(response.name);
                                   $("#price").val(response.price);
                                   $("#duration").val(response.duration);

                                   $("#su-btn").text("Update Package");
                                   $("#su-btn").val("edit-type");

                                   $("#cemodal").modal("show"); // toggle() can also used.

                              });
                         });
                         // End Edit Form
                         $("#su-btn").click(function(e){
                              e.preventDefault();

                              let actiontype = $("#su-btn").val();
                              console.log(actiontype);
                              $(this).html("Sending....");

                              if(actiontype === "action-create"){
                                   // Do Create
                              
                              }else  if(actiontype === "action-edit"){
                                   const getid = $("#packageid").val();
                                   $.ajax({
                                        url:`/packages/${getid}`,
                                        type:"PUT",
                                        dataType: "json",
                                        data:$("#createform").serialize(),
                                        success:function(response){
                                             console.log(response);
                                             // console.log(this.data); // name=&price=&duration=&packageid=

                                             // $("#cuform")[0].reset();
                                             $("#cuform").trigger("reset");

                                             $("#cemodal").modal("hide"); // toggle
                                             
                                             $("#su-btn").html("Save Change");

                                             fetchalldatas();

                                             Swal.fire({
                                                  title: "Updated",
                                                  text: "Update Successfully!",
                                                  icon: "success"
                                             });
                                        },
                                        error:function(response){
                                             console.log("Error: ",response);
                                             $("#su-btn").html("Save Change");
                                        }
                                   });
                              }
                         });

          =>Delete Package 
               =In packages > list.blade.php 
                    <td>
                         <a href="javascript:void(0);" class="text-danger ms-2 delete-btns" data-id="{{ $package->id }}"  data-idx="{{ ++$idx }}"><i class="fas fa-trash-alt"></i></a>
                    </td>

               =In index.blade.php 
                    // Start Single Delete
                    $(document).on("click",".delete-btns",function(){
                         
                         const getid = $(this).data("id");
                         const getidx = $(this).data("idx");
                    
                         // console.log(getid);
                         
                         Swal.fire({
                              title: "Are you sure?",
                              text: `You won't be able to revert this id ${getidx}`,
                              icon: "warning",
                              showCancelButton: true,
                              confirmButtonColor: "#3085d6",
                              cancelButtonColor: "#d33",
                              confirmButtonText: "Yes, delete it!"
                         }).then((result) => {
                              if (result.isConfirmed) {
                                   // data remove 
                                   $.ajax({
                                        url:`/packages/${getid}`,
                                        type:"DELETE",
                                        dataType:"json",
                                        // data:{_token:"{{csrf_token()}}"},
                                        success:function(response){
                                             console.log(response);   // 1
                                             
                                             if(response){
                                                  fetchalldatas();
                                                  
                                                  Swal.fire({
                                                       title: "Deleted!",
                                                       text: "Your file has been deleted.",
                                                       icon: "success"
                                                  });
                                             }
                                        },
                                        error:function(response){
                                             console.log("Error: ",response)
                                        }
                                   });
                                   
                              }
                         });   
                    });

                    // End Single Delete

          =>Package Search my code 
               =In packages > index.blade.php 
                     <div class="col-md-12 mb-2">
                         <div>
                              <a href="javascript:void(0);" id="bulkdelete-btn" class="btn btn-danger btn-sm rounded-0">Bulk Delete</a>
                         </div>
                         <div>
                              <form action="" method="">
                                   <div class="row justify-content-end">
                                        <div class="col-md-2 col-sm-6 mb-2">
                                             <div class="input-group">
                                                  <input type="text" name="filtername" id="filtername" class="form-control form-control-sm rounded-0" placeholder="Search...." value="{{ request('filtername') }}"/>
                                                  <button type="button" id="btn-search" class="btn btn-secondary btn-sm"><i class="fas fa-search"></i></button>
                                             </div>
                                        </div>
                                   </div>
                              </form>
                         </div>
                    </div>
                    // Start Package Search 
                    async function searchpackagedatas(query=""){
                         await $.ajax({
                              url:"{{url('/packagessearch')}}",
                              method:"GET",
                              data:{"query":query},

                              beforeSend:function(){
                                   $(".loader").addClass("show");
                              },
                              success:function(response){
                                   console.log(response); // {status: 'scuccess', data: Array(2)}
                                   
                                   $("#tabledata").empty();
                              
                                   $("#tabledata").html(response);
                              
                              },
                              // error:function(response){
                              //      console.log(response);
                              // },
                              complete:function(){
                                   console.log("complete:");
                                   $(".loader").removeClass("show");
                              }
                         });
                    }

                    $("#btn-search").on("click",function(e){
                         e.preventDefault();
                         const query = $("#filtername").val();
                         // console.log(query);

                         searchpackagedatas(query);
                    });
                    // End Package Search 

               *Check the Response Format:
                    Make sure that the server is returning the expected data format. If your AJAX request is expecting JSON, the server should return JSON.

               =In PackagesController.php 
                    
                    public function search(Request $request){

                         $packages = Package::all();
                         
                         $query = $request->input("query");
                         if($query){
                              $packages = Package::where("name","LIKE","%$query%")->get();
                         }

                         return view("packages.list",compact("packages"))->render();

                    }
               
               =In web.php 
                    Route::get("/packagessearch",[PackagesController::class,"search"])->name("packages.search");

          =>Package assign to user 
               php artisan make:middleware ValidateSubscriptionMid 

               =Redirection Loop Error 

                    =In ValidateSubscriptionMid.php 
                         use Illuminate\Support\Facades\Auth;
                         public function handle(Request $request, Closure $next): Response
                         {
                              if(Auth::user()->subscription_expires_at > now()){
                                   return $next($request);
                              }
                              return redirect()->route("subscriptions.expired");
                         }

                         *If user beyond expire date, redirect to expire page.

                    =In app > Http > Kernel.php 
                         protected $middlewareGroups = [
                              'web' => [
                                   \App\Http\Middleware\EncryptCookies::class,
                                   \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
                                   \Illuminate\Session\Middleware\StartSession::class,
                                   \Illuminate\View\Middleware\ShareErrorsFromSession::class,
                                   \App\Http\Middleware\VerifyCsrfToken::class,
                                   \Illuminate\Routing\Middleware\SubstituteBindings::class,

                                   \App\Http\Middleware\PageViewMid::class,
                                   \App\Http\Middleware\PostViewDurationMid::class,
                                   \App\Http\Middleware\OnOffUserStatusMid::class,
                                   \App\Http\Middleware\ValidateSubscriptionMid::class,
                              ],
                         *Checking every routes from $middlewareGroups arrays.
                         
                         If expire, redirect to expire page.
                         Perform the same middleware before expire page request.
                              cuz it check every requests.
               
               =>Middleware for specific routes

                    =In ValidateSubscriptionMid.php 
                         public function handle(Request $request, Closure $next): Response
                         {
                              if(Auth::check() && Auth::user()->subscription_expires_at > now()){
                                   return $next($request);
                              }
                              return redirect()->route("subscriptions.expired");
                         }
                         // auth()->check() or Auth::check()
                         // auth()->user() or Auth::user()

                    =In web.php 
                         Route::middleware('auth')->group(function () {
                              Route::get("/dashboards",[DashboardsController::class,'index'])->name("dashboard.index");
                              ....
                         });
                         *The routes under "auth" middleware are executed if authenticated.
                    
                    =In app > Http > Kernel.php 
                         **
                         * The application's middleware aliases.
                         *
                         * Aliases may be used instead of class names to conveniently assign middleware to routes and groups.
                         *
                         * @var array<string, class-string|string>
                         */
                         protected $middlewareAliases = [
                              'auth' => \App\Http\Middleware\Authenticate::class,
                              'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
                              'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
                              'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
                              'can' => \Illuminate\Auth\Middleware\Authorize::class,
                              'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
                              'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
                              'precognitive' => \Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests::class,
                              'signed' => \App\Http\Middleware\ValidateSignature::class,
                              'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
                              'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
                         
                              "validate.subscriptions" => \App\Http\Middleware\ValidateSubscriptionMid::class,
                         ];

                         *Define moddle alias for ValidateSubscriptionMid

                    =In web.php 
                         Route::middleware(["auth","validate.subscriptions"])->group(function(){
                              Route::resource("attendances",AttendancesController::class);
                         });
                         
                         *move attendance routes from only auth middleware.
                         *attendances routes are executed after passing both auth and validatesubscription middlewares.

                    =In subscriptions > expired.blade.php 
                         @extends("layouts.adminindex")

                         @section("content")
                              <div class="container-fluid">
                                   <div class="col-md-12">
                                        <h1>Subscription License Expired</h1>
                                        <p>Your License has expired. Please contact to admin for renew license to continue.</p>
                                   </div>
                              </div>               
                         @endsection

                         @section("css")
                         @endsection

                         @section("scripts")
                         
                         @endsection

               =>Set user by typing user id and package id (unfamiliar way)
                    =In PackagesController.php 
                         public function setpackage(Request $request){
                              $request->validate([
                                   "setuser_id"=>"required|exists:users,id",
                                   "package_id"=>"required|exists:packages,id"
                              ]);
                              $user = User::find($request->input("setuser_id"));
                              $package = Package::find($request->input("package_id"));

                              if($user && $package){
                                   $user->package_id = $package->id;
                                   $user->subscription_expires_at = now()->addDays($package->duration);
                                   $user->save();

                                   return response()->json(["message"=>"Updated"],201);
                              }
                              return response()->json(["message"=>"Failed"],405);

                         }
                         *Attach user with their desire package.
                         *After checking user and package existence, 
                              -settle user to the package 
                              -regulate expire date as described in package duration from now on.

                    =In web.php 
                         Route::resource("packages",PackagesController::class);
                         Route::post("/packages/setpackage",[PackagesController::class,"setpackage"])->name("packages.setpackage");

                    =In packages.index.blade.php 
                         <!-- start set modal -->
                         <div id="setmodal" class="modal fade">
                              <div class="modal-dialog modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Modal Title</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <form id="setform" action="" method="">
                                                  <div class="row">
                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="setuser_id">User Id <span class="text-danger">*</span></label>
                                                            <input type="text" name="setuser_id" id="setuser_id" class="form-control form-control-sm rounded-0" placeholder="Enter User Id" value="{{ old('setuser_id') }}"/>
                                                       </div>

                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="package_id">Package ID <span class="text-danger">*</span></label>
                                                            <input type="number" name="package_id" id="package_id" class="form-control form-control-sm rounded-0" placeholder="Enter Package Id" value="{{ old('package_id') }}"/>
                                                       </div>


                                                       <div class="col-md-12 text-end">
                                                            <button type="submit" id="set-btn" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- end set modal -->


                         // Start Set Package 
                         $("#setmodal-btn").click(function(){
                              
                              // clear form data
                              // $("#createform")[0].reset();
                              $("#setform").trigger("reset");
                              
                              $("#setmodal .modal-title").text("Set Package");
                              $("#set-btn").html("Set Package");

                              $("#setmodal").modal("show"); // toggle() can also used.
                              
                         })

                         $("#set-btn").click(function(e){
                              e.preventDefault();


                              // Do Set
                              $.ajax({
                                   url:"{{ route('packages.setpackage') }}",
                                   type:"POST",
                                   dataType: "json",
                                   data:$("#setform").serialize(),
                                   success:function(response){
                                        console.log(response);
                                        // console.log(this.data); // name=&price=&duration=&packageid=

                                        // $("#setform")[0].reset();
                                        $("#setform").trigger("reset");

                                        $("#setmodal").modal("hide"); // toggle
                                        
                                        $("#set-btn").html("Save Change");

                                        Swal.fire({
                                             title: "Access!",
                                             text: "Package Sets Successfully!",
                                             icon: "success"
                                        });
                                   },
                                   error:function(response){
                                        console.log("Error: ",response);
                                   }
                              });
                         });
                         // End Set Package

               =http://127.0.0.1:8000/packages
                    Set Package
                    User Id *
                    1
                    Package Id * 
                    5
               
               =In phpmyadmin 

                    id	name	email	               package_id	subscription_expires_at
                    1	admin	admin@gmail.com	5	          2025-11-14 15:13:34		

               =>Expire test
                    =In PackagesController.php 
                         if($user && $package){
                              $user->package_id = $package->id;
                              $user->subscription_expires_at = now()->addMinute();
                              $user->save();

                              return response()->json(["message"=>"Updated"],201);
                         }
                    =In phpmyadmin 
                         "users"

                         id	name	email	               package_id	subscription_expires_at
                         1	admin	admin@gmail.com	5	          2024-07-02 18:38:05	

                    Expire Checking Method 
                         -Check day() in middleware instead of now()

                         16 6 2024      10:00 PM
                         
                         15 6 2025      11:59 AM
                         16 6 2025      10:00 PM

     =>Buying Package 
          =student buy packages by theirself, with point pay

          =Point System Idea 
               Buy Package    = + points 
               Request Leave  = - points
               Att Fill       = + points 
               Download Rec   = - points 

          =>User Points
               =Migration 
                    php artisan make:model UserPoint -m 

                    =In create_user_points_table.php 
                         up() 
                              $table->foreignId("user_id")->constrained()->onDelete("cascade");
                              table->integer("points");

                    php artisan migrate 

               =In UserPoint.php 
                    protected $table = "user_points";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "user_id",
                         "points"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }

               php artisan make:controller UserPointsController 

               =In UserPointsController.php 
                    public function index(){

                         if(request()->ajax()){
                              $userpoints = UserPoint::all();
                              return view("userpoints.list",compact("userpoints"))->render();
                         }

                         return view("userpoints.index");
                    }

                    public function store(Request $request){
                         $request->validate([
                              "points"=>"required|numeric",
                         ]);
                         UserPoint::create($request->all());
                         return response()->json(["message"=>"New Point Created"],201);
                    }

                    public function show($id){
                         $userpoint = UserPoint::findOrFail($id);
                         return response()->json($userpoint);
                    }

                    public function update(Request $request,$id){
                         $userpoint = UserPoint::findOrFail($id);
                         $userpoint->update($request->all());  
                         return response()->json(["message"=>"Update Successfully"],201);
                    }

                    public function destroy($id){
                         UserPoint::destroy($id);
                         return response()->json(["message"=>"Delete Successfully"],201);
                    }

                    public function bulkdeletes(Request $request)
                    {
                         try{
                              $getselectedids = $request->selectedids;
                              UserPoint::whereIn("id",$getselectedids)->delete();
                              return response()->json(["success"=>"Selected data have been deleted successfully"]);
                         }catch(Exception $e){
                              Log::error($e->getMEssage());
                              return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                         }
                    }

               =In web.php 
                    use App\Http\Controllers\UserPointsController;
                    Route::resource("userpoints",UserPointsController::class);

               =In phpmyadmin 
                    "user_points"

                    id	user_id	points	created_at	updated_at	
                    1	1	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                    2	20	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                    3	30	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                    4	40	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	

               =>Fetch userpoints 
                    =In userpoints > index.blade.php 
                         <table id="mytable" class="table table-sm table-hover border">
                    
                              <thead>
                                   <th>
                                        <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                                   </th>
                                   <th>No</th>
                                   <th>Student Id</th>
                                   <th>Points</th>
                                   <th>Created At</th>
                                   <th>Updated At</th>
                                   <th>Action</th>
                              </thead>
                    
                              <tbody id="tabledata">
                                   
                              </tbody>
                    
                         </table>
                         <div class="loader">
                              <div class="loader-item"></div>
                              <div class="loader-item"></div>
                              <div class="loader-item"></div>
                         </div>

                         // Start Fetch All Datas 
                         function fetchalldatas(){
                              $.ajax({
                                   url:"{{route('userpoints.index')}}",
                                   meethod:"GET",
                                   beforeSend:function(){
                                        $(".loader").addClass("show");
                                   },
                                   success:function(response){
                                   //    console.log(response);
                                        $("#tabledata").html(response);
                                   },
                                   complete:function(){
                                        console.log("complete:");
                                        $(".loader").removeClass("show");
                                   }
                              });
                         }
                         fetchalldatas();
                         // End Fetch All Datas

               =In layouts > adminleftsidebar.blade.php 
                    <li class="nav-item"><a href="javascript:void(0);" class="nav-link text-white p-3 mb-2 sidebarlinks" data-bs-toggle="collapse" data-bs-target="#shipdd"><i class="fas fa-shopping-cart fa-md me-3"></i> Shopping <i class="fas fa-angle-left mores"></i></a>
                         <ul id="shipdd" class="collapse ps-2">
                              <li><a href="javascript:void(0);" class="nav-link text-white sidebarlinks"><i class="fas fa-long-arrow-alt-right me-4"></i> Plans </a></li>
                              <li><a href="javascript:void(0);" class="nav-link text-white sidebarlinks"><i class="fas fa-long-arrow-alt-right me-4"></i> Billing </a></li>
                              <li><a href="javascript:void(0);" class="nav-link text-white sidebarlinks"><i class="fas fa-long-arrow-alt-right me-4"></i> Payment </a></li>
                         </ul>
                    </li>

               =In layouts > adminnavbar.blade.php 
                    <!-- notify & userlogout-->
                    <ul class="navbar-nav me-5 pe-5">
                         <!-- notify -->

                         <li class="nav-item me-2">
                              <a href="javascript:void(0);" class="nav-link">
                                   <i class="fas fa-shopping-cart"></i>
                                   <sup class="badge bg-danger">1</sup>
                              </a>
                         </li>

               =>Filling User Points by verifying caller user
                    =In UserPointsController.php 
                         public function verifystudent(Request $request){
                              $student = Student::where("regnumber",$request->studentid)->select(["id","firstname","lastname","user_id"])->first(); // we must have to call user_id
                              $user =  $student->user()->select(["id"])->first();

                              if($user){
                                   return response()->json(["student"=>$student,"user"=>$user]);
                              }else{
                                   return response()->json(["message"=>"No corresponding user found",404]);
                              }
                         }
                    
                    =In web.php 
                         Route::resource("userpoints",UserPointsController::class);
                         Route::post("userpoints/verifystudent",[UserPointsController::class,"verifystudent"])->name("userpoints.verifystudent");

                    =In userpoints > index.blade.php 
                         <!-- start create modal -->
                         <div id="createmodal" class="modal fade">
                              <div class="modal-dialog modal-sm modal-dialog-centered">
                                   <div class="modal-content rounded-0">
                                        <div class="modal-header">
                                             <h6 class="modal-title">Modal Title</h6>
                                             <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>

                                        <div class="modal-body">
                                             <div id="step1">
                                                  <form id="verifyform" action="" method="">
                                                       <div class="row">
                                                            <div class="col-md-12 form-group mb-3">
                                                                 <label for="student_id">Student ID <span class="text-danger">*</span></label>
                                                                 <input type="text" name="student_id" id="student_id" class="form-control form-control-sm rounded-0" placeholder="Enter Student Id" value="{{ old('name') }}"/>
                                                            </div>

                                                            <div class="col-md-12 text-end">
                                                                 <button type="button" id="verify-btn" class="btn btn-primary btn-sm rounded-0" >Next</button>
                                                            </div>
                                                       </div>
                                                  </form>
                                             </div>
                                             <div id="step2" style="display:none;">
                                                  <form id="createform" action="" method="">
                                                       <div class="row">
                                                            <div class="col-md-12 form-group mb-3">
                                                            <ul class="list-group">
                                                            </ul>
                                                            </div>

                                                            <div class="col-md-12 form-group mb-3">
                                                                 <label for="points">Points <span class="text-danger">*</span></label>
                                                                 <input type="number" name="points" id="points" class="form-control form-control-sm rounded-0" placeholder="Enter Point" value="{{ old('points') }}"/>
                                                            </div>
                                                            
                                                            <input type="hidden" name="user_id" id="user_id"/>
                                                            <input type="hidden" name="userpoint" id="userpoint"/>

                                                            <div class="col-md-12 text-end">
                                                                 <button type="button" id="stepback-btn" class="btn btn-secondary btn-sm rounded-0 me-3">Back</button>
                                                                 <button type="submit" id="create-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                            </div>
                                                       </div>
                                                  </form>
                                             </div>
                                        </div>

                                        <div class="modal-footer">

                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- end create modal -->

                         $("#createmodal-btn").click(function(){
                    
                              $("#step1").show();
                              $("#step2").hide();
                              
                              // clear form data
                              // $("#createform")[0].reset();
                              $("#createform").trigger("reset");
                              $("#verifyform").trigger("reset");
                              
                              $("#createmodal .modal-title").text("Verify Student");
                              $("#create-btn").html("Add New Points");
                              $("#create-btn").val("action-type");

                              $("#createmodal").modal("show"); // toggle() can also used.
                              
                         });

                         // start vefiry student 
                         $("#verify-btn").click(function(){
                              const studentid = $("#student_id").val();
                              $.ajax({
                                   url:"{{ route('userpoints.verifystudent') }}",
                                   type:"POST",
                                   dataType: "json",
                                   data: {
                                        studentid:studentid
                                   },
                                   success:function(response){
                                        console.log(response);

                                        let htmlview="";

                                        $("#step1").hide();
                                        $("#step2").show();

                                        $("#createmodal .modal-title").text("Adding Points");
                                        $("#user_id").val(response.user.id);
                                   
                                        htmlview = `<li class="list-group-item"><a href="{{ URL::to('students/${response.student.id}') }}" target="_blank">${response.student.firstname} ${response.student.lastname}</a></li>`
                                        $("#createmodal .modal-body #createform ul.list-group").html(htmlview);
                                   },
                                   error:function(response){
                                        console.log("Error: ",response);
                                   }
                              });
                         });

                         $("#stepback-btn").click(function(){
                              $("#createmodal .modal-title").text("Verify Student");

                              $("#step1").show();
                              $("#step2").hide();

                              $("#verifyform").trigger("reset");
                         });

                         // start edit
                         $(document).on("click",".edit-btns",function(){
                              const getid = $(this).data("id");
                              // console.log(getid);

                              $.get(`userpoints/${getid}/`,function(response){
                                   console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}
                              
                                   $("#step1").hide();
                                   $("#step2").show();
                                   $("#step2 #stepback-btn").hide(); // hidding back button
                                   $("#step2 #createform .list-group").html(""); // hidding user info list


                                   $("#createmodal .modal-title").text("Edit Points");
                                   $("#create-btn").text("Update Package");
                                   $("#create-btn").val("edit-type");
                                   $("#createmodal").modal("show"); // toggle() can also used.
                                   
                                   $("#userpointid").val(response.id);
                                   $("#user_id").val(response.user_id);
                                   $("#points").val(response.points);
                              });
                         });
                         

                         $("#create-btn").click(function(e){
                              e.preventDefault();

                              let actiontype = $("#create-btn").val();
                              console.log(actiontype);
                              $(this).html("Sending....");

                              if(actiontype === "action-type"){
                                   // Do Create
                                   $.ajax({
                                        url:"{{ route('userpoints.store') }}",
                                        type:"POST",
                                        dataType: "json",
                                        data:$("#createform").serialize(),
                                        success:function(response){
                                             console.log(response);
                                             // console.log(this.data); // name=&price=&duration=&packageid=

                                             // $("#createform")[0].reset();
                                             $("#createform").trigger("reset");

                                             $("#createmodal").modal("hide"); // toggle
                                             
                                             $("#create-btn").html("Save Change");

                                             fetchalldatas();

                                             Swal.fire({
                                                  title: "Added!",
                                                  text: "Added Successfully!",
                                                  icon: "success"
                                             });
                                        },
                                        error:function(response){
                                             console.log("Error: ",response);
                                             $("#create-btn").html("Save Change");
                                        }
                                   });
                              }else  if(actiontype === "edit-type"){
                                   const getid = $("#userpointid").val();
                                   $.ajax({
                                        url:`/userpoints/${getid}`,
                                        type:"PUT",
                                        dataType: "json",
                                        data:$("#createform").serialize(),
                                        success:function(response){
                                             console.log(response);
                                             // console.log(this.data); // name=&price=&duration=&packageid=

                                             // $("#createform")[0].reset();
                                             $("#createform").trigger("reset");

                                             $("#createmodal").modal("hide"); // toggle
                                             
                                             $("#create-btn").html("Save Change");

                                             fetchalldatas();

                                             Swal.fire({
                                                  title: "Updated",
                                                  text: "Update Successfully!",
                                                  icon: "success"
                                             });
                                        },
                                        error:function(response){
                                             console.log("Error: ",response);
                                             $("#create-btn").html("Save Change");
                                        }
                                   });
                              }
                         });

                         =Testing Create then Update 
                         =Testing Update then Create
               
               =>User point fill up my code 
                    <div class="col-md-12">
                         <a href="javascript:void(0);" id="cvemodal-btn" class="btn btn-primary btn-sm rounded-0 me-3">Create</a>
                    </div>
                    ....
                    <!-- start create verify edit modal -->
                    <div id="cvemodal" class="modal fade">
                         <div class="modal-dialog modal-sm modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Modal Title</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <div id="step1">
                                             <form id="verifyform" action="" method="">
                                                  <div class="row">
                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="student_id">Student ID <span class="text-danger">*</span></label>
                                                            <input type="text" name="student_id" id="student_id" class="form-control form-control-sm rounded-0" placeholder="Enter Student Id" value="{{ old('name') }}"/>
                                                       </div>

                                                       <div class="col-md-12 text-end">
                                                            <button type="button" id="verify-btn" class="btn btn-primary btn-sm rounded-0" >Next</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>
                                        <div id="step2" style="display:none;">
                                             <form id="cuform" action="" method="">
                                                  <div class="row">
                                                       <div class="col-md-12 form-group mb-3">
                                                       <ul class="list-group">
                                                       </ul>
                                                       </div>

                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="points">Points <span class="text-danger">*</span></label>
                                                            <input type="number" name="points" id="points" class="form-control form-control-sm rounded-0" placeholder="Enter Point" value="{{ old('points') }}"/>
                                                       </div>
                                                       
                                                       <input type="hidden" name="user_id" id="user_id"/>
                                                       <input type="hidden" name="userpoint" id="userpoint"/>

                                                       <div class="col-md-12 text-end">
                                                            <button type="button" id="stepback-btn" class="btn btn-secondary btn-sm rounded-0 me-3">Back</button>
                                                            <button type="submit" id="su-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end create verify edit modal -->

                    // start create
                    $("#cvemodal-btn").click(function(){
               
                         // clear form data
                         // $("#cuform")[0].reset();
                         $("#cuform").trigger("reset");
                         $("#verifyform").trigger("reset");
                         
                         // Preparing modal and form for create
                         $("#cvemodal .modal-title").text("Verify Student");
                         $("#su-btn").html("Add New Points");
                         $("#su-btn").val("action-create");

                         // Arranging Form steps
                         $("#step1").show();
                         $("#step2").hide();

                         $("#cvemodal").modal("show"); // toggle() can also used.
                    });

                    // start vefiry student 
                    $("#verify-btn").click(function(){
                         const studentid = $("#student_id").val();
                         $.ajax({
                              url:"{{ route('userpoints.verifystudent') }}",
                              type:"POST",
                              dataType: "json",
                              data: {
                                   studentid:studentid
                              },
                              success:function(response){
                                   console.log(response);

                                   let htmlview="";

                                   // Arranging Form steps
                                   $("#step1").hide();
                                   $("#step2").show();

                                   // Preparing modal and form for create
                                   $("#cvemodal .modal-title").text("Adding Points");
                                   $("#user_id").val(response.user.id);
                              
                                   htmlview = `<li class="list-group-item"><a href="{{ URL::to('students/${response.student.id}') }}" target="_blank">${response.student.firstname} ${response.student.lastname}</a></li>`
                                   $("#cvemodal .modal-body #cuform ul.list-group").html(htmlview);
                              },
                              error:function(response){
                                   console.log("Error: ",response);
                              }
                         });
                    });

                    // start edit
                    $(document).on("click",".edit-btns",function(){
                         const getid = $(this).data("id");
                         // console.log(getid);

                         $.get(`userpoints/${getid}/`,function(response){
                              console.log(response); // {id: 9, name: 'myanmar', slug: 'myanmar', status_id: 3, user_id: 1, …}

                              // Preparing modal and form for edit
                              $("#cvemodal .modal-title").text("Edit Points");
                              $("#su-btn").text("Update Package");
                              $("#su-btn").val("action-edit");

                              $("#userpointid").val(response.id);
                              $("#user_id").val(response.user_id);
                              $("#points").val(response.points);

                              // Arranging Form steps
                              $("#step1").hide();
                              $("#step2").show();
                              $("#step2 #stepback-btn").hide(); // hidding back button
                              $("#step2 #cuform .list-group").html(""); // hidding user info list from verify
                              
                              $("#cvemodal").modal("show"); // toggle() can also used.
                         });
                    });

                    $("#su-btn").click(function(e){
                         e.preventDefault();

                         let actiontype = $("#su-btn").val();
                         console.log(actiontype);
                         $(this).html("Sending....");

                         if(actiontype === "action-create"){
                              // Do Create
                              $.ajax({
                                   url:"{{ route('userpoints.store') }}",
                                   type:"POST",
                                   dataType: "json",
                                   data:$("#createform").serialize(),
                                   success:function(response){
                                        console.log(response);
                                        // console.log(this.data); // name=&price=&duration=&packageid=

                                        // $("#createform")[0].reset();
                                        $("#cuform").trigger("reset");

                                        $("#cvemodal").modal("hide"); // toggle
                                        
                                        $("#su-btn").html("Save Change");

                                        fetchalldatas();

                                        Swal.fire({
                                             title: "Added!",
                                             text: "Added Successfully!",
                                             icon: "success"
                                        });
                                   },
                                   error:function(response){
                                        console.log("Error: ",response);
                                   }
                              });
                         }else  if(actiontype === "action-edit"){
                              const getid = $("#userpointid").val();
                              $.ajax({
                                   url:`/userpoints/${getid}`,
                                   type:"PUT",
                                   dataType: "json",
                                   data:$("#createform").serialize(),
                                   success:function(response){
                                        console.log(response);
                                        // console.log(this.data); // name=&price=&duration=&packageid=

                                        // $("#createform")[0].reset();
                                        $("#cuform").trigger("reset");

                                        $("#cvemodal").modal("hide"); // toggle
                                        
                                        $("#su-btn").html("Save Change");

                                        fetchalldatas();

                                        Swal.fire({
                                             title: "Updated",
                                             text: "Update Successfully!",
                                             icon: "success"
                                        });
                                   },
                                   error:function(response){
                                        console.log("Error: ",response);
                                        $("#create-btn").html("Save Change");
                                   }
                              });
                         }
                    });

          =>Add to Card System 
               DB 
               .Temporary Storage 
                    Browser - Session, Cookie 
                    Cache -
               .Permanent 
                    Firabase, Mysql , Mongo
                    Still available after logout
                    and another devices phones or tablets

               php artisan make:controller PlansController

               =In web.php 
                    *use App\Http\Controllers\PlansController;
                    Route::resource("plans",PlansController::class);

               =In subscriptions.expired

                    @section("content")
                         <div class="container-fluid">
                              <div class="col-md-12">
                                   <h6>Plan Management</h6>
                                   <p>Discover our popular services.</p>
                              </div>
                         </div>               
                    
                    @endsection
               
               =>Points System 
                    =Exchange Point - p2p person to person 

                         A sell - 5000pts x 2000ks 
                         B sell - 3000pts x 1800ks

               =Point Control 
                    Launch point balance 
                    Point Capital 
                         Point wallet within the system 
                         
                         -minus on Air Drop 
                         +plus on package selling 
                         +plus on student transaction pts 
                    
                    -to have better control over points and students's point possession 
                    -to prevent extreme flow of points to students
               
               =>Plans 

                    =In PlansController.php 
                         public function index(){

                              if(request()->ajax()){
                                   $packages = Package::all();
                                   return view("plans.packagelist",compact("packages"))->render();
                              }

                              return view("plans.index");
                         }

                    =In plans > index.blade.php 
                         @extends("layouts.adminindex")

                         @section("content")
                              <div class="container-fluid">
                                   <div class="col-md-12">
                                        <h6>Plan Management</h6>
                                        <p>Discover our popular services.</p>
                                   </div>

                                   <div class="loader-container">
                                        <div id="packagedata" class="row">
                                             
                                        </div>
                                        <div class="loader">
                                             <div class="loader-item"></div>
                                             <div class="loader-item"></div>
                                             <div class="loader-item"></div>
                                        </div>
                                   </div>
                              </div>               
                         
                         @endsection

                         @section("css")
                              <link href="{{ asset('assets/dist/css/loader.css') }}" rel="stylesheet" />     
                         @endsection

                         @section("scripts")
                         <script type="text/javascript">
                                   
                              $(document).ready(function(){

                                   // Start Passing Header Token
                                   $.ajaxSetup({
                                        headers:{
                                             "X-CSRF-TOKEN": $("meta[name='csrf-token']").attr("content")
                                        }
                                   });
                                   // End Passing Header Token

                                   // Start Fetch All Datas 
                                   function fetchallpackages(){
                                        $.ajax({
                                             url:"{{route('plans.index')}}",
                                             meethod:"GET",
                                             beforeSend:function(){
                                                  $(".loader").addClass("show");
                                             },
                                             success:function(response){
                                             //    console.log(response);
                                                  $("#packagedata").html(response);
                                             },
                                             error:function(response){
                                                  console.log(response);
                                             },
                                             complete:function(){
                                                  $(".loader").removeClass("show");
                                             }
                                        });
                                   }
                                   fetchallpackages();
                                   // End Fetch All Datas
                                        
                              });

                              </script>
                         @endsection

                    =In plans > packagelist.blade.php 
                         @foreach($packages as $package)
                              <div class="col-lg-2 col-md-3 mb-3">
                                   <div class="card rounded-0 border-0 {{ $userdata->package_id === $package->id ? 'shadow' : '' }} plans">
                                        <div class="card-body">
                                             <div class="text-center mb-3">
                                                  <h6>{{ $package->name }}</h6>
                                                  <h5>{{ $package->price }}</h5>
                                             </div>

                                             <ul class="list-group list-group-flush mb-3">
                                                  
                                                  @if($userdata->package_id === $package->id)
                                                       <li class="list-group-item">Status: Current Plan</li>
                                                       <li class="list-group-item">Expires: {{ \Carbon\Carbon::parse($userdata->subscription_expires_at)->format("d M Y")  }}</li>
                                                  @else
                                                       <li class="list-group-item">Count: {{ $package->duration }} days</li>
                                                       <li class="list-group-item">Expires: {{ now()->addDays($package->duration)->format("d M Y")  }}</li>
                                                  @endif
                                             </ul>

                                             <div class="text-center">
                                                  <button type="button" id="pay-with-point" class="btn btn-sm {{ $userdata->package_id === $package->id ? 'btn-secondary disabled' : 'btn-primary'}} rounded-0 add-to-cart" data-package-id="{{ $package->id }}" data-package-price="{{ $package->price }}">Add Cart</button>
                                             </div>
                                        </div>
                                   </div>
                              </div>
                         @endforeach

                         -Noticing the Package Expire Date for easy checking by user
                         -Highlighting the Current Package of the user
                         -Spotting the Current Package Info 
                         -Disabling the button for Current Package, and also changing button color system

                    =In public > assets > dist > css > style.css 
                         /* Plans Cart Box */
                         .plans{
                              transition: border-radius .2s;
                         }

                         .plans:hover{
                              border-radius: 0 80px 0 0 !important;
                              transform: translateY(-2px);
                         }

                    =Terminal: /exercisetwo
                         npm run build 

               php artisan make:controller CartsController

               =In web.php 
                    Route::get("/carts",[CartsController::class,"index"])->name("carts.index");

               =In carts > index.blade.php 
                    @extends("layouts.adminindex")

                    @section("content")
                                             
                         <!-- Start Page Content Area -->
                         <div class="container-fluid">
                              <div class="row px-3 mt-3">
                                   <div class="col-md-8 mb-3">
                                        <h6><a href="{{ route('plans.index') }}" class="nav-link">Continue Shopping</a></h6>
                                        <hr/>

                                        <div class="text-center">
                                             <span>You have 5 items in your cart</span>
                                        </div>
                                   </div>

                                   <div class="col-md-4">
                                        <h6>Payment details</h6>
                                        <hr/>

                                        <div class="d-flex justify-content-between">
                                             <span>Total</span>
                                             <span>0</span>
                                        </div>

                                        <div class="d-flex justify-content-between">
                                             <span>Payment Method</span>
                                             <span>Point Pay</span>
                                        </div>

                                        <div class="d-grid mt-3">
                                             <button type="button" id="paybypoints" class="btn btn-primary btn-sm rounded-0">Pay Now</button>
                                        </div>
                                   </div>
                              </div>
                         </div>
                         <!-- End Page Content Area -->

                    @endsection

                    @section("css")
                         <link href="{{ asset('assets/dist/css/loader.css') }}" rel="stylesheet" />     
                    @endsection

                    @section("scripts")
                         <script type="text/javascript">
                              

                         </script>
                    @endsection

               =Migration
                    php artisan make:model Cart -m

                    =In create_carts_table.php 
                         up()
                              $table->foreignId("user_id")->nullable()->constrained()->onDelete("cascade");
                              $table->foreignId("package_id")->nullable()->constrained()->onDelete("cascade");
                              $table->integer("quantity")->default(1);
                              $table->decimal("price",8,2);

                    php artisan migrate 

               =In Cart.php 
                    protected $table = "carts";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "user_id",
                         "package_id",
                         "quantity",
                         "price"
                    ];

                    public function user(){
                         return $this->belongsTo(User::class);
                    }

                    public function package(){
                         return $this->belongsTo(Package::class);
                    }

               =In web.php 
                    Route::get("/carts",[CartsController::class,"index"])->name("carts.index");
                    Route::post("/carts/add",[CartsController::class,"add"])->name("carts.add");
                    Route::post("/carts/remove",[CartsController::class,"remove"])->name("carts.remove");
                    Route::post("/carts/paybypoints",[CartsController::class,"paybypoints"])->name("carts.paybypoints");


               =>Checking Cart Items 
                    =In phpmyadmin 
                         "carts"
                         id	user_id	package_id	quantity	price	created_at	updated_at	
                         1	1	     4	          1	     150.00	2024-07-07 13:05:26	2024-07-07 13:05:26	
                         2	1	     3	          1	     100.00	2024-07-07 13:05:26	2024-07-07 13:05:26	

                    =>Dynamic Cart Icon
                         =In User.php 
                              public function carts(){
                                   return $this->hasMany(Cart::class);
                              }

                              *It return the users/carts relations rows from "carts" table.

                         =In adminnavbar.blade.php

                              <li class="nav-item me-2">
                                   <a href="{{ route('carts.index') }}" class="nav-link">
                                        <i class="fas fa-shopping-cart"></i>
                                        @if(Auth::user()->carts()->exists())
                                        <sup class="badge bg-danger">{{ Auth::user()->carts()->count() }}</sup>
                                        @endif
                                   </a>
                              </li>

                              *Function result can be used for two purpose exists() and count()
                                   - Reveal or Conceal item numbers badge 
                                   - Expose cart item numbers

                    =In CartsController.php 
                         public function index(){
                              $user = Auth::user();
                              $user_id = $user->id;
                              $carts = Cart::where("user_id",$user_id)->get();
                              $totalcost = $this->gettotalcost($carts);
                              return view("carts.index",compact("carts","totalcost"));
                         }

                         private function gettotalcost($carts){
                              $totalcost = 0;

                              foreach($carts as $cart){
                                   $totalcost += $cart->quantity * $cart->price;
                              }
                              return $totalcost;
                         }
                         *Using private method of controller 

                    =In carts > index.blade.php 
                         @extends("layouts.adminindex")

                         @section("content")
                                                  
                              <!-- Start Page Content Area -->
                              <div class="container-fluid">
                                   <div class="row px-3 mt-3">
                                        <div class="col-md-8 mb-3">
                                             <h6><a href="{{ route('plans.index') }}" class="nav-link">Continue Shopping</a></h6>
                                             <hr/>

                                             <div class="text-center">
                                                  <span>You have {{ Auth::user()->carts()->count() }} items in your cart</span>
                                             </div>

                                             @foreach($carts as $idx=>$cart)
                                                  <div class="d-flex justify-content-between align-items-center p-2 mt-3 package" data-packageid="{{ $cart->package['id'] }}">
                                                       <div class="">
                                                            <span>{{ ++$idx }}.</span>
                                                            <span>{{ $cart->package["name"] }}</span>
                                                            <span>{{ $cart->package["duration"] }} days</span>
                                                       </div>

                                                       <div class="">
                                                            <span class="quantity">{{ $cart->quantity }} qty</span>
                                                       </div>

                                                       <div class="">
                                                            <span class="me-5">{{ $cart->price }}</span>
                                                            <a href="javascript:void(0);" id="removefromcart">
                                                                 <i class="fas fa-trash-alt text-danger"></i>
                                                            </a>
                                                       </div>
                                                  </div>
                                             @endforeach
                                        </div>

                                        <div class="col-md-4">
                                             <h6>Payment details</h6>
                                             <hr/>

                                             <div class="d-flex justify-content-between">
                                                  <span>Total</span>
                                                  <span>{{ $totalcost }}</span>
                                             </div>

                                             <div class="d-flex justify-content-between">
                                                  <span>Payment Method</span>
                                                  <span>Point Pay</span>
                                             </div>

                                             <div class="d-grid mt-3">
                                                  <button type="button" id="paybypoints" class="btn btn-primary btn-sm rounded-0">Pay Now</button>
                                             </div>
                                        </div>
                                   </div>
                              </div>
                              <!-- End Page Content Area -->

                         @endsection

                         @section("css")
                              <link href="{{ asset('assets/dist/css/loader.css') }}" rel="stylesheet" />     
                         @endsection

                         @section("scripts")
                              <script type="text/javascript">
                                   

                              </script>
                         @endsection

               =>Removing Cart Items 
                    =In CartsController.php 
                         public function remove(Request $request){
                              $user = Auth::user();
                              $user_id = $user->id;
                              $packageid = $request->packageid;

                              $cart = Cart::where("user_id",$user_id)->where("package_id",$packageid)->first();
                              $cart->delete();

                              return response()->json(["message"=>"Removed from cart successfully"]);
                         }


                    =In carts > index.blade.php 
                         @foreach($carts as $idx=>$cart)
                              <div id="package_{{ $cart->package['id'] }}" class="d-flex justify-content-between align-items-center p-2 mt-3" >
                                   <div class="">
                                        <span>{{ ++$idx }}.</span>
                                        <span>{{ $cart->package["name"] }}</span>
                                        <span>{{ $cart->package["duration"] }} days</span>
                                   </div>

                                   <div class="">
                                        <span class="quantity">{{ $cart->quantity }} qty</span>
                                   </div>

                                   <div class="">
                                        <span class="me-5">{{ $cart->price }}</span>
                                        <a href="javascript:void(0);" id="removefromcart" data-packageid="{{ $cart->package['id'] }}">
                                             <i class="fas fa-trash-alt text-danger"></i>
                                        </a>
                                   </div>
                              </div>
                         @endforeach
                         
                         // Remove from cart 
                         $(document).on("click","#removefromcart",function(){
                              
                              const packageid = $(this).data("packageid");
                              // console.log(packageid);

                              $.ajax({
                                   url:"{{ route('carts.remove') }}",
                                   type:"POST",
                                   data:{
                                        _token:"{{ csrf_token() }}",
                                        packageid:packageid
                                   },
                                   success:function(response){
                                        console.log(response.message);
                                        
                                        // UI remove
                                        // console.log("#package_"+packageid);
                                        // $("#package_"+packageid).remove();
                                   
                                        $('div[id="package_'+packageid+'"]').remove();
                                   },
                                   error:function(response){
                                        console.log(response);
                                   }
                              });
                         });

               =>Add Packages to Cart 
                    =In plans > index.blade.php 
                         // Start Add Cart Package
                         $(document).on("click",".add-to-cart",function(){
                              const packageid = $(this).data("package-id");
                              const packageprice =  $(this).data("package-price");
                              // console.log(packageid,packageprice);

                              $.ajax({
                                   url:"{{ route('carts.add') }}",
                                   type:"POST",
                                   data:{
                                        package_id:packageid,
                                        quantity:1,
                                        price:packageprice
                                   },
                                   success:function(response){
                                        console.log(response.message);
                                   }
                              });
                         });
                         // End Add Cart Package
                    =>Only One Qty for Multi Clicks
                         =In CartsController.php 
                              public function add(Request $request){
                                   $user_id = auth()->id();

                                   Cart::updateOrCreate([
                                        "user_id"=>$user_id,
                                        "package_id"=>$request->package_id,
                                        "quantity"=>$request->input("quantity"),
                                        "price"=>$request->input("price")
                                   ]);
                                   return response()->json(["message"=>"Product added to cart successfully"]);
                              }

                    =>Counting Qty for Multi Clicks
                         =In CartsController.php 
                              Cart::updateOrCreate([
                                   "user_id"=>$user_id,
                                   "package_id"=>$request->package_id,
                                   "quantity"=>$request->input("quantity"),
                                   // "quantity"=>\DB::raw('quantity +'.$request->input("quantity")),
                                   "price"=>$request->input("price")
                              ]);

                    =>User Cart Test 
                         =admin Acc 
                              Plans Page
                                   Silver    "Add Cart"
                                   Platinum  "Add Cart"
                                   Gold      "Add Cart"
                                   Diamond   "Add Cart"
                              Cart Page 
                                   1. Silver      25 days   1 qty     50.00 
                                   2. Platinum    60 days   1 qty     100.00 
                                   3. Gold        100 days  1 qty     150.00 
                                   4. Diamond     130 days  1 qty     200.00
                         =aung aung Acc 
                              =susu Acc 
                                   Plans Page
                                        Diamond   "Add Cart"
                                   Cart Page 
                                   1. Diamond     130 days  1 qty     200.00 

                         *Two users carts are not related. These carts exists isolatedly.

               =>User Pay By Point 
                    =In CartsController.php 
                         public function paybypoints(Request $request){
                              $user = Auth::user();
                              $user_id = $user->id;
                              $carts = Cart::where("user_id",$user_id)->get();
                              $isextend = false;

                              $totalcost = $carts->sum(function($cart){
                                   return $cart->price * $cart->quantity;
                              });

                              $packageid = $request->packageid;
                              $package = Package::findOrFail($packageid);
                              $userpoints = UserPoint::where("user_id",$user_id)->first();

                              if($userpoints && $userpoints->points >= $totalcost){
                                   // Acceptable Package Buying

                                   // Deduct Points
                                   $userpoints->points -= $totalcost;
                                   $userpoints->save();

                                   if($user->subscription_expires_at >= Carbon::now()){
                                        // Extend Package
                                        $isextend = true;

                                        $user->package_id = $packageid;
                                        $user->subscription_expires_at = Carbon::parse($user->subscription_expires_at)->addDay($package->duration);
                                        $user->save();
                                   }else{
                                        // Renew Package
                                        $isextend = false;

                                        $user->package_id = $packageid;
                                        $user->subscription_expires_at = Carbon::now()->addDay($package->duration);
                                        $user->save();
                                   }
                                   // create invoice

                                   // remove cart
                                   Cart::where("user_id",$user_id)->delete();
                                   // $cart->each->delete(); // each is default method
                                   

                                   return response()->json(["message"=> $isextend ?  "Package Extended Successfully": "New Package Added"]);
                              }
        
    
                              // Unacceptable Package Buying
                              return response()->json(["message"=>"Insufficient Points"],400);
                         }

                         public function paywithcash(Request $request){

                         }


                         public function paywithwallet(Request $request){

                         }

                         public function paywithvisa(Request $request){

                         }
                         *other payment methods can be written here.

                         =Calculating cart's total cost.
                         =Subtracting Point Bill from user's point 
                         
                         =Buying Conditions 
                              -User has points 
                              -User points is enough.
                         =Allow To Buy 
                              -Didn't permit to buy another package if user has package lifetime

                              -Only Renew Package from purchase time, ignoring whether user has has package lifetime or not

                              -Extend package if user has package lifetime.
                              -Renew package if package exceed lifetime.

                         =>Two Response for Extend and Renew 
                              if($userpoints && $userpoints->points >= $totalcost){
                                   // Acceptable Package Buying

                                   if($user->subscription_expires_at >= Carbon::now()){
                                        // Extend Package
                                        $user->package_id = $packageid;
                                        $user->subscription_expires_at = Carbon::parse($user->subscription_expires_at)->addDay($package->duration);
                                        $user->save();

                                        return response()->json(["message"=>"Package Extend Successfully"],400);

                                   }else{
                                        // Renew Package
                                        $user->package_id = $packageid;
                                        $user->subscription_expires_at = Carbon::now()->addDay($package->duration);
                                        $user->save();

                                        return response()->json(["message"=>"Package Renew Successfully"],400);

                              }
                         =Sayar use Single Response for Extend and Renew Package 

                    =In carts > index.blade.php 
                         @foreach($carts as $idx=>$cart)
                         <div id="package_{{ $cart->package['id'] }}" class="d-flex justify-content-between align-items-center package p-2 mt-3" data-packageid="{{ $cart->package['id'] }}">
                             ....
                         </div>
                         @endforeach

                         // Start Pay with Points
                         $("#paybypoints").click(function(){
                              
                              let packageid; 

                              $(".package").each(function(){
                                   packageid = $(this).data("packageid");
                                   // console.log(packageid); // 2, 3


                                   $.ajax({
                                        url:"{{ route('carts.paybypoints') }}",
                                        type:"POST",
                                        data:{
                                             _token:$("meta[name='csrf-token']").attr("content"),
                                             packageid:packageid
                                        },
                                        success:function(response){
                                             window.alert(response.message);
                                        },
                                        error:function(response){
                                             window.alert(response.responseJSON.message);
                                        }
                                   });
                              });
                         });
                         // End Pay with Points

                    packageid must be iterated or looped for multi package.


                    =>Renew Test 
                         =package is already is already expired at 2024-07-01 17:29:44 and today is 2024-07-08
                              -add 10 day to today date. 
                         =In phpmyadmin 
                              "users"
                              id	name	email	               package_id	subscription_expires_at
                              1	admin	admin@gmail.com	2	          2024-07-18 17:29:44      

                              "user_points"
                              id	user_id	points	created_at	updated_at	
                              2	20	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                              3	30	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                              1	1	     499950	2024-07-03 16:04:39	2024-07-03 16:04:49	

                         =Attendance form page http://127.0.0.1:8000/attendances is now open 
                         =Plan page http://127.0.0.1:8000/plans
                              Silver plan is choosed.
                              Expires: 18 Jul 2024
                    
                    =>Extend Test 
                         =package has lefttime before 2024-07-18 17:29:44
                              -package extended by adding expire date to buying package date
                         =In phpmyadmin 
                              "users"
                                   id	name	email	               package_id	subscription_expires_at
                                   1	admin	admin@gmail.com	3	          2024-08-07 17:54:19  

                              "user_points"
                              id	user_id	points	created_at	updated_at	
                              2	20	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                              3	30	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                              1	1	     499850	2024-07-03 16:04:39	2024-07-03 16:04:49	

                         =Plan page http://127.0.0.1:8000/plans
                              Platinum plan is choosed.
                              Expires: 07 Aug 2024

                    =Error Response 
                         POST http://127.0.0.1:8000/carts/paybypoints 400 (Bad Request)
                         {readyState: 4, getResponseHeader: ƒ, getAllResponseHeaders: ƒ, setRequestHeader: ƒ, overrideMimeType: ƒ, …}
                              responseText: "{\"message\":\"New Package Added\"}"
                         *Althought all processes work well 

                         POST http://127.0.0.1:8000/carts/paybypoints 400 (Bad Request)
                         {readyState: 4, getResponseHeader: ƒ, getAllResponseHeaders: ƒ, setRequestHeader: ƒ, overrideMimeType: ƒ, …}
                              responseText: "{\"message\":\"Package Extended Successfully\"}"

                         =In CartsController.php 
                              if($userpoints && $userpoints->points >= $totalcost){
                              // Acceptable Package Buying
                              ....
            
            

                                   return response()->json(["message"=> $isextend ?  "Package Extended Successfully": "New Package Added"],400);
                              }
                         -cuz it return error code.
        
                    =>Insufficient Point Test 
                         =In phpmyadmin 
                              "users"
                                   id	name	email	               package_id	subscription_expires_at
                                   1	admin	admin@gmail.com	3	          2024-08-07 17:54:19  

                              "user_points"
                              id	user_id	points	created_at	updated_at	
                              1	1	     50	2024-07-03 16:04:39	2024-07-03 16:04:49	

                         =Not enough point error response 
                              POST http://127.0.0.1:8000/carts/paybypoints 400 (Bad Request)
                              {readyState: 4, getResponseHeader: ƒ, getAllResponseHeaders: ƒ, setRequestHeader: ƒ, overrideMimeType: ƒ, …}
                              responseJSON: {message: 'Insufficient Points'}
                              responseText: "{\"message\":\"Insufficient Points\"}"

                    =>Renew & Extend Test 
                         =package is already is already expired at 2024-06-30 17:54:19 and today is 2024-07-08
                              -add 10 day to today date. (buying package 2)
                              -extend 20 day of expire date (buying package 3)
                         =In phpmyadmin 
                              "users"
                              id	name	email	               package_id	subscription_expires_at
                              1	admin	admin@gmail.com	3	          2024-08-07 19:26:51      

                              "user_points"
                              id	user_id	points	created_at	updated_at	
                              2	20	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                              3	30	     500000	2024-07-03 16:04:39	2024-07-03 16:04:49	
                              1	1	     499850	2024-07-03 16:04:39	2024-07-03 16:04:49	
                         
                         =Attendance form page http://127.0.0.1:8000/attendances is now open 
                         =Plan page http://127.0.0.1:8000/plans
                              Platinum plan is choosed.
                              Expires: 07 Aug 2024

                         =Two Responses - cuz packages are looped
                              New Package Added
                              Package Extended Successfully

                    =>My New Idea for package buying 
                         View pass card's packages as an input array 
                         Controller loop these packages.

                    =>Hidding Free Package
                         =In PlansController.php 
                              public function index(){

                                   if(request()->ajax()){
                                        $packages = Package::whereIn([...]);
                                        return view("plans.packagelist",compact("packages"))->render();
                                   }

                                   return view("plans.index");
                              }
                         
                    =>Shopping Center Add To Card 
                         Shopping centers have many items and products.So it is not ok to Add each item at a time and check at cart page.
                         Product and Cart page are displayed at the same time side by side.

                         *So customers easily know their iteme are in the cart or not.

          =>Pay by point with OTP 
               =In carts > index.blade.php 
                    <!-- START MODAL AREA -->

                         <!-- start otp modal -->
                         <div id="otpmodal" class="modal fade">
                              <div class="modal-dialog modal-sm modal-dialog-centered">
                                   <div class="modal-content">

                                        <div class="modal-body">
                                             <form id="verifyform" action="" method="">
                                        
                                                  <div class="row">
                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="otpcode">OTP Code <span class="text-danger">*</span></label>
                                                            <input type="text" name="otpcode" id="otpcode" class="form-control form-control-sm rounded-0" placeholder="Enter your otp" />
                                                       </div>
                                                       
                                                       <input type="hidden" name="otpuser_id" id="otpuser_id" value="{{ $userdata['id'] }}"/>

                              
                                                       <div class="col-md-12 text-end mb-3">
                                                            <button type="submit" class="btn btn-primary btn-sm rounded-0">Submit</button>
                                                       </div>
                                                  </div>
                                                  <p id="otpmessage"></p>
                                                  <p id="">Expire in <span id="otptimer"></span> seconds</p>
                                             </form>
                                        </div>

                                   </div>
                              </div>
                         </div>
                         <!-- end otp modal -->
                    <!-- END MODAL AREA -->


                    // Start Pay with Points
                    // $("#paybypoints").click(function(){
                         
                    //      let packageid; 

                    //      $(".package").each(function(){
                    //           packageid = $(this).data("packageid");
                    //           // console.log(packageid); // 2, 3


                    //           $.ajax({
                    //                url:"{{ route('carts.paybypoints') }}",
                    //                type:"POST",
                    //                data:{
                    //                     _token:$("meta[name='csrf-token']").attr("content"),
                    //                     packageid:packageid
                    //                },
                    //                success:function(response){
                    //                     window.alert(response.message);
                    //                },
                    //                error:function(response){
                    //                     window.alert(response.responseJSON.message);
                    //                }
                    //           });
                    //      });
                    // });
                    // End Pay with Points

                    // Start Pay with Points
                    $("#paybypoints").click(function(){
                         // loading box
                         Swal.fire({
                              title: "Processing....",
                              // html: "I will close in <b></b> milliseconds.",
                              text: "Please wait while we send your OTP",
                              allowOutsideClick:false,
                              didOpen: () => {
                                   Swal.showLoading();
                              }
                         });

                         $.ajax({
                              url:"/generateotps",
                              type:"POST",
                              success:function(response){
                                   console.log(response);
                                   Swal.close();

                                   $("#otpmessage").text("Your OTP code is "+response.otp);
                                   $("#otpmodal").modal("show");

                                   startotptimer(60); // OTP will expires in 120s (2 minute);
                              },
                              error:function(response){
                                   console.error("Error: ",response);
                              }
                         })
                         
                         // Clear form data
                         $("#verifyform").trigger("reset");
                    });
                    // End Pay with Points

                    // Method 1
                    // function startotptimer(duration){
                    //      // let minutes,seconds;
                    //      // let timer = duration;
                    //      // console.log(timer,minutes,seconds); // 120 undefined undefined

                    //      let timer = duration,minutes,seconds;
                    //      // console.log(timer,minutes,seconds); // 60 undefined undefined

                    
                    //      let setinv = setInterval(dectimer,1000);

                    //      function dectimer(){
                    //           minutes = parseInt(timer/60);
                    //           seconds = parseInt(timer%60);

                    //           minutes = minutes < 10 ? "0"+minutes : minutes;
                    //           seconds = seconds < 10 ? "0"+seconds : seconds;
                              
                    //           $("#otptimer").text(`${minutes}:${seconds}`);

                    //           if(timer-- < 0){
                    //                clearInterval(setinv);
                    //                $("#otpmodal").modal("hide");
                    //           }
                    //      }
                    // }

                    // Method 2
                    function startotptimer(duration){
                         timeleft = duration; // 60 seconds

                         let setinv = setInterval(dectimer,1000);

                         function dectimer(){
                              $("#otptimer").text(timeleft);

                              timeleft--;
                              if(timeleft <= 0){
                                   clearInterval(setinv);
                                   $("#otpmodal").modal("hide");
                              }
                         }
                    }

                    $("#verifyform").on("submit",function(e){
                         e.preventDefault();
                         $.ajax({
                              url:"/verifyotps",
                              type:"POST",
                              data:$(this).serialize(),
                              success:function(response){
                                   console.log(response);
                                   if(response.message){
                                        
                                        let packageid; 

                                        $(".package").each(function(){
                                             packageid = $(this).data("packageid");
                                             // console.log(packageid); // 2, 3


                                             $.ajax({
                                                  url:"{{ route('carts.paybypoints') }}",
                                                  type:"POST",
                                                  data:{
                                                       _token:$("meta[name='csrf-token']").attr("content"),
                                                       packageid:packageid
                                                  },
                                                  success:function(response){
                                                       window.alert(response.message);
                                                  },
                                                  error:function(response){
                                                       window.alert(response.responseJSON.message);
                                                  }
                                             });
                                        });

                                        $("#otpmodal").modal("hide");

                                   }else{
                                        console.log("Invalid OTP");
                                   }
                              },
                              error:function(response){
                                   console.log("Error OTP: ",response);
                                   Swal.fire({
                                        title: "Invalid OTP",
                                        text: "Can't Perform Pay By Point",
                                        icon: "error"
                                   });
                              }
                         });
                    });
                    // End OTP


     =>Exchange Points 
          =In User.php 
               public function userpoints(){
                    return $this->hasOne(UserPoint::class);// no need loop
               }

          =In UserPoint.php 
               // public function user(){
               //     return $this->belongsTo(User::class);
               // }

               public function users(){
                    return $this->belongsTo(User::class,"user_id","id");
               }

               // public function student(){
               //     $student = Student::join("users","students.user_id","=","users.id")->where("students.user_id",$this->user_id)->select(["regnumber"])->first();
               //     // dd($student->regnumber);
               //     return $student->regnumber;
               // }

               public function students(){
                    return $this->belongsTo(Student::class,"user_id","user_id");
               }

          
          php artisan make:controller PointTransfersController

          =In web.php 
               Route::resource("pointtransfers",PointTransfersController::class);
               Route::post("/pointtransfers/transfer",[PointTransfersController::class,"transfers"])->name("pointtransfers.transfers");


          =In PointTransfersController.php 
               public function transfers(Request $request){

                    $request->validate([
                         "receiver_id"=>"required|exists:users,id",
                         "points"=>"required|integer|min:1"
                    ]);

                    $sender = Auth::user();
                    $receiver = User::find($request->input("receiver_id"));
                    $points = $request->input("points");

                    if($sender->userpoints->points < $points){
                         return response()->json(["message"=>"Insufficient points."],400);
                    }
                    
                    // Begin a database transaction
                    \DB::beginTransaction();
                    try{
                         // Deduct points from sender
                         $sender->userpoints->points -= $points;
                         $sender->userpoints->save();

                         // Add points to receiver
                         $receiver->userpoints->points += $points;
                         $receiver->userpoints->save();
                         
                         // Commit the transaction
                         \DB::commit();   

                         return response()->json(["message"=>"Points transferred successfully"]);

                    }catch(\Exception $err){
                         // Rollback transaction in case of error occur
                         \DB::rollback();

                         return response()->json(["message"=>"Error occurred while transferring points","error"=>$err->getmessage()],500);
                    }
               }
               *All students exchange points commession logic can be writen here.

               =Point Lost Issue 
                    User A - transfer - User B 
                         Internect Connection Error 
                    Minus from user A - No Points Added User B 
                         Points lost in middle between two users
               -------------------------------------------------------------
               In Laravel, transactions ensure that a series of database operations either complete entirely or have no effect at all. This helps maintain data integrity. Laravel provides a convenient interface for managing database transactions using the DB facade. Here's how you can use these methods:

               \DB::beginTransaction();

               This method starts a new database transaction. Once this method is called, any subsequent database operations will be part of this transaction until it is either committed or rolled back.

               \DB::commit();

               This method commits the current transaction. This means all the database operations that were part of the transaction will be permanently applied to the database.

               \DB::rollback();

               This method rolls back the current transaction. This means any database operations that were part of the transaction will be undone, and the database will be left in the state it was in before the transaction began.

          =In pointtransfers > index.blade.php 
               <div class="col-md-12">
                    <a href="javascript:void(0);" id="createmodal-btn" class="btn btn-primary btn-sm rounded-0 me-3">Transfer</a>

               </div>

               <!-- START MODAL AREA -->
               <!-- start create modal -->
               <div id="createmodal" class="modal fade">
                    <div class="modal-dialog modal-sm modal-dialog-centered">
                         <div class="modal-content rounded-0">
                              <div class="modal-header">
                                   <h6 class="modal-title">Modal Title</h6>
                                   <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                              </div>

                              <div class="modal-body">
                                   <div id="step1">
                                        <form id="verifyform" action="" method="">
                                             <div class="row">
                                                  <div class="col-md-12 form-group mb-3">
                                                       <label for="student_id">Student ID <span class="text-danger">*</span></label>
                                                       <input type="text" name="student_id" id="student_id" class="form-control form-control-sm rounded-0" placeholder="Enter Student Id" value="{{ old('name') }}"/>
                                                  </div>

                                                  <div class="col-md-12 text-end">
                                                       <button type="button" id="verify-btn" class="btn btn-primary btn-sm rounded-0" >Next</button>
                                                  </div>
                                             </div>
                                        </form>
                                   </div>
                                   <div id="step2" style="display:none;">
                                        <form id="createform" action="" method="">
                                             <div class="row">
                                                  <div class="col-md-12 form-group mb-3">
                                                  <ul class="list-group">
                                                  </ul>
                                                  </div>

                                                  <div class="col-md-12 form-group mb-3">
                                                       <label for="points">Points <span class="text-danger">*</span></label>
                                                       <input type="number" name="points" id="points" class="form-control form-control-sm rounded-0" placeholder="Enter Point" value="{{ old('points') }}"/>
                                                  </div>
                                                  
                                                  <input type="hidden" name="receiver_id" id="receiver_id"/>

                                                  <div class="col-md-12 text-end">
                                                       <button type="button" id="stepback-btn" class="btn btn-secondary btn-sm rounded-0 me-3">Back</button>
                                                       <button type="submit" id="create-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                  </div>
                                             </div>
                                        </form>
                                   </div>
                              </div>

                              <div class="modal-footer">

                              </div>
                         </div>
                    </div>
               </div>
               <!-- end create modal -->
               <!-- END MODAL AREA -->

               // Start Verify & Transfer Points
               // start create
               $("#createmodal-btn").click(function(){
               
                    $("#step1").show();
                    $("#step2").hide();

                    // clear form data
                    // $("#createform")[0].reset();
                    $("#createform").trigger("reset");
                    $("#verifyform").trigger("reset");
                    
                    $("#createmodal .modal-title").text("Verify Student");
                    $("#create-btn").html("Transfer");
                    $("#create-btn").val("action-type");

                    $("#createmodal").modal("show"); // toggle() can also used.
                    
               });

               // start verify student 
               $("#verify-btn").click(function(){
                    const studentid = $("#student_id").val();
                    $.ajax({
                         url:"{{ route('userpoints.verifystudent') }}",
                         type:"POST",
                         dataType: "json",
                         data: {
                              studentid:studentid
                         },
                         success:function(response){
                              console.log(response);

                              let htmlview="";

                              $("#step1").hide();
                              $("#step2").show();

                              $("#createmodal .modal-title").text("Transfer Points");
                              $("#receiver_id").val(response.user.id);
                         
                              htmlview = `<li class="list-group-item"><a href="{{ URL::to('students/${response.student.id}') }}" target="_blank">${response.student.firstname} ${response.student.lastname}</a></li>`
                              $("#createmodal .modal-body #createform ul.list-group").html(htmlview);
                         },
                         error:function(response){
                              console.log("Error: ",response);
                         }
                    });
               });

               $("#stepback-btn").click(function(){
                    $("#createmodal .modal-title").text("Verify Student");

                    $("#step1").show();
                    $("#step2").hide();

                    $("#verifyform").trigger("reset");
               });
               

               $("#create-btn").click(function(e){
                    e.preventDefault();

                    let actiontype = $("#create-btn").val();
                    console.log(actiontype);
                    $(this).html("Sending....");

                    if(actiontype === "action-type"){
                         // Do Create
                         $.ajax({
                              url:"{{ route('pointtransfers.transfers') }}",
                              type:"POST",
                              dataType: "json",
                              data:$("#createform").serialize(),
                              success:function(response){
                                   console.log(response);
                                   // console.log(this.data); // name=&price=&duration=&packageid=

                                   // $("#createform")[0].reset();
                                   $("#createform").trigger("reset");

                                   $("#createmodal").modal("hide"); // toggle
                                   
                                   $("#create-btn").html("Save Change");

                                   fetchalldatas();

                                   Swal.fire({
                                        title: "Transfer",
                                        text: "Transfer Successfully!",
                                        icon: "success"
                                   });
                              },
                              error:function(response){
                                   console.log("Error: ",response);
                                   $("#create-btn").html("Save Change");
                              }
                         });
                    }
               });
               // End Verify & Transfer Package

         

          =Transfer Testing 
               Main Points Balance - 200000
               To - WDF1002 : Points - 50000
               To - WDF1003 : Points - 100000
               To - WDF1003 : Points - 49000

               Current Points Balance - 1000

               To - WDF1003 : Points - 20000 ---- Error 
               To - WDF1003 : Points -       ---- Error 
               To - WDF1003 : Points - 0 ---- Error


               *Error 
               Error:  {readyState: 4, getResponseHeader: ƒ, getAllResponseHeaders: ƒ, setRequestHeader: ƒ, overrideMimeType: ƒ, …}
                    ....
                    getAllResponseHeaders: ƒ ()
                    getResponseHeader: ƒ (e)
                    ....
                    promise: ƒ (e)
                    readyState: 4
                    responseJSON: 
                         errors: 
                              points: ['The points field is required.']
                              [[Prototype]]: Object
                              message: "The points field is required."
                         [[Prototype]]: Object
                    responseText: "{\"message\":\"The points field is required.\",\"errors\":{\"points\":[\"The points field is required.\"]}}"


               =UserPoints View 
               	1	WDF1002	250000	03 Jul 2024	26 Jul 2024	 
                    2	WDF1003	350000	03 Jul 2024	26 Jul 2024	 
                    3	WDF1001	0	03 Jul 2024	26 Jul 2024
                    *Only 3 users have points 


               To - WDF1004 : Points - 2000
               Solution - 1
               // Initialize points for the user in Register
               // $user->userpoints()->create(["points"=>0]);

               Solution - 2
               =In PointTransfersController.php 
                    if(!$sender->userpoints->points){

                    }
               -immediate create points when user has no points

          =>Point Transfer My Code 
               =In pointtransfers > index.blade.php 
                    <div class="col-md-12">
                         <a href="javascript:void(0);" id="vcmodal-btn" class="btn btn-primary btn-sm rounded-0 me-3">Transfer</a>
                    </div>
                    <!-- START MODAL AREA -->
                    <!-- start create modal -->
                    <div id="vtmodal" class="modal fade">
                         <div class="modal-dialog modal-sm modal-dialog-centered">
                              <div class="modal-content rounded-0">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Modal Title</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <div id="step1">
                                             <form id="verifyform" action="" method="">
                                                  <div class="row">
                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="student_id">Student ID <span class="text-danger">*</span></label>
                                                            <input type="text" name="student_id" id="student_id" class="form-control form-control-sm rounded-0" placeholder="Enter Student Id" value="{{ old('name') }}"/>
                                                       </div>

                                                       <div class="col-md-12 text-end">
                                                            <button type="button" id="verify-btn" class="btn btn-primary btn-sm rounded-0" >Next</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>
                                        <div id="step2" style="display:none;">
                                             <form id="transferform" action="" method="">
                                                  <div class="row">
                                                       <div class="col-md-12 form-group mb-3">
                                                       <ul class="list-group">
                                                       </ul>
                                                       </div>

                                                       <div class="col-md-12 form-group mb-3">
                                                            <label for="points">Points <span class="text-danger">*</span></label>
                                                            <input type="number" name="points" id="points" class="form-control form-control-sm rounded-0" placeholder="Enter Point" value="{{ old('points') }}"/>
                                                       </div>
                                                       
                                                       <input type="hidden" name="receiver_id" id="receiver_id"/>

                                                       <div class="col-md-12 text-end">
                                                            <button type="button" id="stepback-btn" class="btn btn-secondary btn-sm rounded-0 me-3">Back</button>
                                                            <button type="submit" id="transfer-btn" class="btn btn-primary btn-sm rounded-0" value="action-type">Submit</button>
                                                       </div>
                                                  </div>
                                             </form>
                                        </div>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
                    <!-- end create modal -->
                    <!-- END MODAL AREA -->



                    $("#vtmodal-btn").click(function(){
               
                         $("#step1").show();
                         $("#step2").hide();

                         // clear form data
                         // $("#transferform")[0].reset();
                         $("#transferform").trigger("reset");
                         $("#verifyform").trigger("reset");
                         
                         $("#vtmodal .modal-title").text("Verify Student");
                         $("#transfer-btn").html("Transfer");
                         $("#transfer-btn").val("action-type");

                         $("#vtmodal").modal("show"); // toggle() can also used.
                         
                    });

                    $("#verify-btn").click(function(){
                         const studentid = $("#student_id").val();
                         $.ajax({
                              url:"{{ route('userpoints.verifystudent') }}",
                              type:"POST",
                              dataType: "json",
                              data: {
                                   studentid:studentid
                              },
                              success:function(response){
                                   console.log(response);

                                   let htmlview="";

                                   $("#step1").hide();
                                   $("#step2").show();

                                   $("#vtmodal .modal-title").text("Transfer Points");
                                   $("#receiver_id").val(response.user.id);
                              
                                   htmlview = `<li class="list-group-item"><a href="{{ URL::to('students/${response.student.id}') }}" target="_blank">${response.student.firstname} ${response.student.lastname}</a></li>`
                                   $("#vtmodal .modal-body #transferform ul.list-group").html(htmlview);
                              },
                              error:function(response){
                                   console.log("Error: ",response);
                              }
                         });
                    });

                    $("#stepback-btn").click(function(){
                         $("#vtmodal .modal-title").text("Verify Student");

                         $("#step1").show();
                         $("#step2").hide();

                         $("#verifyform").trigger("reset");
                    });

                    $("#transfer-btn").click(function(e){
                         e.preventDefault();

                         $(this).html("Sending....");

                         // Do transfer
                         $.ajax({
                              url:"{{ route('pointtransfers.transfers') }}",
                              type:"POST",
                              dataType: "json",
                              data:$("#transferform").serialize(),
                              success:function(response){
                                   console.log(response);
                                   // console.log(this.data); // name=&price=&duration=&packageid=

                                   // $("#transferform")[0].reset();
                                   $("#transferform").trigger("reset");

                                   $("#vtmodal").modal("hide"); // toggle
                                   
                                   $("#transfer-btn").html("Save Change");

                                   fetchalldatas();

                                   Swal.fire({
                                        title: "Transfer",
                                        text: "Transfer Successfully!",
                                        icon: "success"
                                   });
                              },
                              error:function(response){
                                   console.log("Error: ",response);
                                   $("#transfer-btn").html("Save Change");
                              }
                         });
                    });

          =>Point Transfer With OTP 
              // Start Verify & Transfer Points
               // start create
               $("#createmodal-btn").click(function(){
               
                    $("#step1").show();
                    $("#step2").hide();

                    // clear form data
                    // $("#createform")[0].reset();
                    $("#createform").trigger("reset");
                    $("#verifyform").trigger("reset");
                    
                    $("#createmodal .modal-title").text("Verify Student");
                    $("#create-btn").html("Transfer");
                    $("#create-btn").val("action-type");

                    $("#createmodal").modal("show"); // toggle() can also used.
                    
               });

               // start vefiry student 
               $("#verify-btn").click(function(){
                    const studentid = $("#student_id").val();
                    $.ajax({
                         url:"{{ route('userpoints.verifystudent') }}",
                         type:"POST",
                         dataType: "json",
                         data: {
                              studentid:studentid
                         },
                         success:function(response){
                              console.log(response);

                              let htmlview="";

                              $("#step1").hide();
                              $("#step2").show();

                              $("#createmodal .modal-title").text("Transfer Points");
                              $("#receiver_id").val(response.user.id);
                         
                              htmlview = `<li class="list-group-item"><a href="{{ URL::to('students/${response.student.id}') }}" target="_blank">${response.student.firstname} ${response.student.lastname}</a></li>`
                              $("#createmodal .modal-body #createform ul.list-group").html(htmlview);
                         },
                         error:function(response){
                              console.log("Error: ",response);
                         }
                    });
               });

               $("#stepback-btn").click(function(){
                    $("#createmodal .modal-title").text("Verify Student");

                    $("#step1").show();
                    $("#step2").hide();

                    $("#verifyform").trigger("reset");
               });
               

               // $("#create-btn").click(function(e){
               //      e.preventDefault();

               //      let actiontype = $("#create-btn").val();
               //      console.log(actiontype);
               //      $(this).html("Sending....");

               //      if(actiontype === "action-type"){
               //           // Do Create
               //           $.ajax({
               //                url:"{{ route('pointtransfers.transfers') }}",
               //                type:"POST",
               //                dataType: "json",
               //                data:$("#createform").serialize(),
               //                success:function(response){
               //                     console.log(response);
               //                     // console.log(this.data); // name=&price=&duration=&packageid=

               //                     // $("#createform")[0].reset();
               //                     $("#createform").trigger("reset");

               //                     $("#createmodal").modal("hide"); // toggle
                                   
               //                     $("#create-btn").html("Save Change");

               //                     fetchalldatas();

               //                     Swal.fire({
               //                          title: "Transfer",
               //                          text: "Transfer Successfully!",
               //                          icon: "success"
               //                     });
               //                },
               //                error:function(response){
               //                     console.log("Error: ",response);
               //                     $("#create-btn").html("Save Change");
               //                }
               //           });
               //      }
               // });

               $("#create-btn").click(function(e){
                    e.preventDefault();
                     // loading box
                     Swal.fire({
                         title: "Processing....",
                         // html: "I will close in <b></b> milliseconds.",
                         text: "Please wait while we send your OTP",
                         allowOutsideClick:false,
                         didOpen: () => {
                              Swal.showLoading();
                         }
                    });

                    $.ajax({
                         url:"/generateotps",
                         type:"POST",
                         success:function(response){
                              console.log(response);
                              Swal.close();

                              $("#otpmessage").text("Your OTP code is "+response.otp);
                              $("#otpmodal").modal("show");

                              startotptimer(60); // OTP will expires in 120s (2 minute);
                         },
                         error:function(response){
                              console.error("Error: ",response);
                         }
                    })
                    
                    // Clear form data
                    $("#verifyform").trigger("reset");
                    
               });
               // Method 1
               // function startotptimer(duration){
               //      // let minutes,seconds;
               //      // let timer = duration;
               //      // console.log(timer,minutes,seconds); // 120 undefined undefined

               //      let timer = duration,minutes,seconds;
               //      // console.log(timer,minutes,seconds); // 60 undefined undefined

               
               //      let setinv = setInterval(dectimer,1000);

               //      function dectimer(){
               //           minutes = parseInt(timer/60);
               //           seconds = parseInt(timer%60);

               //           minutes = minutes < 10 ? "0"+minutes : minutes;
               //           seconds = seconds < 10 ? "0"+seconds : seconds;
                         
               //           $("#otptimer").text(`${minutes}:${seconds}`);

               //           if(timer-- < 0){
               //                clearInterval(setinv);
               //                $("#otpmodal").modal("hide");
               //           }
               //      }
               // }

               // Method 2
               function startotptimer(duration){
                    timeleft = duration; // 60 seconds

                    let setinv = setInterval(dectimer,1000);

                    function dectimer(){
                         $("#otptimer").text(timeleft);

                         timeleft--;
                         if(timeleft <= 0){
                              clearInterval(setinv);
                              $("#otpmodal").modal("hide");
                         }
                    }
               }

               $("#otpverifyform").on("submit",function(e){
                    e.preventDefault();
                    $.ajax({
                         url:"/verifyotps",
                         type:"POST",
                         data:$(this).serialize(),
                         success:function(response){
                              console.log(response);
                              if(response.message){
                                   // Do Create
                                   $.ajax({
                                        url:"{{ route('pointtransfers.transfers') }}",
                                        type:"POST",
                                        dataType: "json",
                                        data:$("#createform").serialize(),
                                        success:function(response){
                                             console.log(response);
                                             // console.log(this.data); // name=&price=&duration=&packageid=

                                             // $("#createform")[0].reset();
                                             $("#createform").trigger("reset");

                                             $("#createmodal").modal("hide"); // toggle
                                             
                                             $("#create-btn").html("Save Change");

                                             fetchalldatas();

                                             Swal.fire({
                                                  title: "Transfer",
                                                  text: "Transfer Successfully!",
                                                  icon: "success"
                                             });
                                        },
                                        error:function(response){
                                             console.log("Error: ",response);
                                             $("#create-btn").html("Save Change");
                                        }
                                   });
                                  

                                   $("#otpmodal").modal("hide");

                              }else{
                                   console.log("Invalid OTP");
                              }
                         },
                         error:function(response){
                              console.log("Error OTP: ",response);
                              Swal.fire({
                                   title: "Invalid OTP",
                                   text: "Can't Perform Transfer Process",
                                   icon: "error"
                              });
                         }
                    });
               });

               // End Verify & Transfer Package

          =>Point Transaction Record 
               
               =Migration 
                    php artisan make:migration create_points_transfers_table --table=points_transfers    

                    =In create_poiont_transfers_table.php 
                         up()
                              Schema::create('points_transfers', function (Blueprint $table) {
                                   $table->id();
                                   $table->unsignedBigInteger("sender_id");
                                   $table->unsignedBigInteger("receiver_id");
                                   $table->integer("points");

                                   $table->foreign("sender_id")->references("id")->on("users")->onDelete("cascade");
                                   $table->foreign("receiver_id")->references("id")->on("users")->onDelete("cascade");
                              
                              });

                         down()
                              Schema::table('points_transfers', function (Blueprint $table) {
                              Schema::dropIfExists("points_transfers");
                         });

                    php artisan migrate 

                    php artisan make:model PointsTransfer 
               
               =In PointsTransfer.php 
                    protected $table = "points_transfers";
                    protected $primaryKey = "id";
                    protected $fillable = [
                         "sender_id",
                         "receiver_id",
                         "points",
                    ];

                    public function sender(){
                         return $this->belongsTo(User::class,"sender_id");
                    }

                    public function receiver(){
                         return $this->belongsTo(User::class,"receiver_id");
                    }

               *Error 
                    responseJSON: 
                         error: "SQLSTATE[42S22]: Column not found: 1054 Unknown column 'updated_at' in 'field list' (Connection: mysql, SQL: insert into `points_transfers` (`sender_id`, `receiver_id`, `points`, `updated_at`, `created_at`) values (1, 30, 10000, 2024-07-30 21:24:24, 2024-07-30 21:24:24))"
                         message: "Error occurred while transferring points"


               =In create_points_transfers_table.php 
                    up()
                         $table->id();
                         $table->unsignedBigInteger("sender_id");
                         $table->unsignedBigInteger("receiver_id");
                         $table->integer("points");

                         $table->foreign("sender_id")->references("id")->on("users")->onDelete("cascade");
                         $table->foreign("receiver_id")->references("id")->on("users")->onDelete("cascade");
                         $table->timestamps();

               =In phpmyadmin 
                    "points_transfers"

                         id	sender_id	receiver_id	points	created_at	updated_at	
                         1	1	20	50000	2024-07-31 22:28:20	2024-07-31 22:28:20	
                         2	1	30	20000	2024-07-31 22:30:49	2024-07-31 22:30:49	
                         3	1	1	1000	2024-07-31 22:31:16	2024-07-31 22:31:16	

          => Point Transfer with Trigger 

               =>Way One 
                    =In PointTransfersController.php 
                         // POint Transaction Record
                         PointsTransfer::create([
                              "sender_id"=>$sender->id,
                              "receiver_id"=>$receiver->id,
                              "points"=>$points
                         ]);

                         // Here is model create for PointTransferHistory

                    *One history record for one transaction. Both sender and receiver in single line.
                    
               =>Way Two with trigger 
                    *Backend code reduce and trigger auto detect the transaction.
                    *Two history records for one trancation .
                         First line for sender 
                         Second line for receiver

                    php artisan make:model PointTransferHistory -m

                    =In create_point_transfer_histories_table.php 
                         public function up(): void
                         {
                              Schema::create('point_transfer_histories', function (Blueprint $table) {
                                   $table->id();
                                   $table->foreignId("points_transfers_id")->constrained("points_transfers");
                                   $table->foreignId("user_id")->constrained("users")->onDelete("cascade");
                                   $table->enum("accounttype",["debit","credit"]);
                                   $table->integer("points");
                                   $table->timestamps();
                              });
                         }
                    =In PointTransferHistory.php 
                         protected $table = "point_transfer_histories";
                         protected $primaryKey = "id";
                         protected $fillable = [
                              "points_transfers_id",
                              "user_id",
                              "accounttype",
                              "points"
                         ];


                    php artisan make:migration create_pointtransfers_trigger
                    =In create_pointtransfers_trigger.php 
                         public function up(): void
                         {
                              DB::unprepared("
                                   CREATE TRIGGER pointtransfers_afc
                                   AFTER INSERT ON points_transfers FOR EACH ROW 
                                   BEGIN 
                                        INSERT INTO point_transfer_histories(points_transfers_id,user_id,accounttype,points,created_at,updated_at)
                                        VALUE(NEW.id,NEW.sender_id,'credit',NEW.points,NOW(),NOW());

                                        INSERT INTO point_transfer_histories(points_transfers_id,user_id,accounttype,points,created_at,updated_at)
                                        VALUE(NEW.id,NEW.receiver_id,'debit',NEW.points,NOW(),NOW());
                                   END
                              ");
                         }
                         public function down(): void
                         {
                              DB::unprepared("DROP TRIGGER IF EXISTS pointtransfers_afc");
                         }

                    =In phpmyadmin 
                         `points_transfers`
                              id	sender_id	receiver_id	points	created_at	updated_at	
                              4	1	     20	          3000	     2024-08-04 14:16:40	2024-08-04 14:16:40	
                              5	1	     30	          8000	     2024-08-04 14:17:22	2024-08-04 14:17:22	
                         
                         `point_transfer_histories`
                              id	points_transfers_id	user_id	accounttype	points	created_at	updated_at	
                              1	4	               1	     credit	     3000	     2024-08-04 14:16:40	2024-08-04 14:16:40	
                              2	4	               20	     debit	     3000	     2024-08-04 14:16:40	2024-08-04 14:16:40	
                              3	5	               1	     credit	     8000	     2024-08-04 14:17:22	2024-08-04 14:17:22	
                              4	5	               30	     debit	     8000	     2024-08-04 14:17:22	2024-08-04 14:17:22	

                    =Self Transfer 
                         =In phpmyadmin 
                         `points_transfers`
                                   id	sender_id	receiver_id	points	created_at	updated_at	
                                   6	1	     1	          2000	     2024-08-04 16:06:22	2024-08-04 16:06:22	
                              
                              `point_transfer_histories`
                                   id	points_transfers_id	user_id	accounttype	points	created_at	updated_at	
                                   5	6	1	credit	2000	2024-08-04 16:06:22	2024-08-04 16:06:22	
                                   6	6	1	debit	2000	2024-08-04 16:06:22	2024-08-04 16:06:22	



                    =>Preventing Self Transfer 
                         =In PointTransfersController.php 
                              public function transfers(Request $request){

                                   $request->validate([
                                        "receiver_id"=>"required|exists:users,id",
                                        "points"=>"required|integer|min:1"
                                   ]);

                                   $sender = Auth::user();
                                   $receiver = User::find($request->input("receiver_id"));
                                   $points = $request->input("points");

                                   // Ensure that sender to sender are not the same
                                   if($sender->id === $receiver->id){
                                        return response()->json(["message"=>"You cannot transfer points to yourself."],400);
                                   }
                                   ...
                              }


          =>Showing Point Transfer Histories 
               =In PointTransfersController.php 
                    public function index(){

                         if(request()->ajax()){
                              $pointtransferhistories = PointTransferHistory::all();
                              return view("pointtransfers.list",compact("pointtransferhistories"))->render();
                         }
                         return view("pointtransfers.index");
                    }

               =In pointtransfers > index.blade.php 
                    <table id="mytable" class="table table-sm table-hover border">
          
                         <thead>
                              <th>
                                   <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                              </th>
                              <th>No</th>
                              <th>Student Id</th>
                              <th>Points</th>
                              <th>Account Type</th>
                              <th>Created At</th>
                              <th>Updated At</th>
                         </thead>
               
                         <tbody id="tabledata">
                              
                         </tbody>
               
                    </table>


                    // Start Fetch All Datas 
                    function fetchalldatas(){
                         $.ajax({
                              url:"{{route('pointtransfers.index')}}",
                              meethod:"GET",
                              beforeSend:function(){
                                   $(".loader").addClass("show");
                              },
                              success:function(response){
                              //    console.log(response);
                                   $("#tabledata").html(response);
                              },
                              complete:function(){
                                   console.log("complete:");
                                   $(".loader").removeClass("show");
                              }
                         });
                    }
                    fetchalldatas();
                    // End Fetch All Datas

               =In pointtransfers > list.blade.php 
                    @foreach($pointtransferhistories as $idx=>$pointtransferhistory)
                         <tr>
                              <td><input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="{{$pointtransferhistory->id}}" /></td>
                              <td>{{ ++$idx }}</td>
                              <td>{{ $pointtransferhistory->students["regnumber"] }}</td>
                              <td>{{ $pointtransferhistory->points }}</td>
                              <td><span class="badge {{ ($pointtransferhistory->accounttype == 'debit') ? 'text-bg-success' : 'text-bg-danger'}}">{{ $pointtransferhistory->accounttype }}</span></td>
                              <td>{{ $pointtransferhistory->created_at->format("d M Y h:m:s") }}</td>
                              <td>{{ $pointtransferhistory->updated_at->format("d M Y h:m:s") }}</td>
                         </tr>
                    endforeach


     =>Multi File Upload 
          php artisan make:model LeaveFile -m

          =In create_leave_files_table.php 
               up()
               $table->foreignId("leave_id")->constrained("leaves")->onDelete("cascade");
               $table->string("image");
          
          =In LeaveFile.php 
               protected $table = "leave_files";
               protected $primaryKey = "id";
               protected $fillable = [
                    "leave_id",
                    "image",
               ];

               public function leave(){
                    return $this->belongsTo(Leave::class);
               }
          
          =In Leave.php 
               public function leavefiles(){
                    return $this->hasMany(LeaveFile::class);
               }

          =In leaves > create.blade.php 
               <form action="/leaves" method="POST" enctype="multipart/form-data">
                    @csrf
                         <div class="row">
                              <div class="col-md-12 mb-3">
                                   <label for="image" class="gallery"><span>Choose Images</span></label>
                                   <input type="file" name="images[]" id="images" class="form-control form-control-sm rounded-0" value="{{ old('image')}}" multiple hidden/>
                              </div>

               

          =In leaves > edit.blade.php 
               <form action="/leaves/{{$leave->id}}" method="POST" enctype="multipart/form-data">
                    @csrf
                    @method("PUT")
                         <div class="row">
                              <div class="col-md-6 text-sm-center">
                                   <img src="{{asset($leave->image)}}" width="200" alt="{{$leave->title}}"/>
                              </div>
                              <div class="col-md-6">
                                   <label for="image" class="gallery"><span>Choose Images</span></label>
                                   <input type="file" name="images[]" id="images" class="form-control form-control-sm rounded-0" value="{{ old('image',$leave->image) }}" multiple hidden/>
                              </div>


          =In leaves > create.blade.php / edit.blade.php 
               var previewimages = function(input,output){

                    // console.log(input.files);

                    if(input.files){
                         var totalfiles = input.files.length;
                         // console.log(totalfiles);
                         if(totalfiles > 0){
                              $('.gallery').addClass('removetxt');
                         }else{
                              $('.gallery').removeClass('removetxt');
                         }
                         console.log(input.files);

                         for(var i = 0 ; i < totalfiles ; i++){
                              var filereader = new FileReader();


                              filereader.onload = function(e){
                                   // $(output).html(""); 
                                   $($.parseHTML('<img>')).attr('src',e.target.result).appendTo(output);
                              }

                              filereader.readAsDataURL(input.files[i]);

                         }
                    }
               
               };

               $('#images').change(function(){
                    previewimages(this,'.gallery');
               });


          =In LeavesController.php 
               public function store(LeaveRequest $request)
               {
                    ....
                    $leave->save();

                    // Multi Images Upload 
                    if($request->hasFile('images')){
                         foreach($request->file("images") as $image){
                              $leavefile = new LeaveFile();
                              $leavefile->leave_id = $leave->id;

                              $file = $image;
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$leave['id'].$fname;
                              $file->move(public_path('assets/img/leaves/'),$imagenewname);


                              $filepath = 'assets/img/leaves/'.$imagenewname; 
                              $leavefile->image = $filepath;

                              $leavefile->save();
                         }
                    }
                    ....
               }

               public function update(LeaveRequest $request, string $id)
               {    
                    ....
                    $leave->save();

                    // Remove Old Image
                    $leavefiles = LeaveFile::where('leave_id',$leave->id)->get();
                    if($request->hasFile('images')){
                         foreach($leavefiles as $leavefile){
                              $path = $leavefile->image;

                              if(File::exists($path)){
                                   File::delete($path);
                              }
                         }
                    }

                    // Multi Images Upload 
                    if($request->hasFile('images')){
                         foreach($request->file("images") as $image){
                              $leavefile = new LeaveFile();
                              $leavefile->leave_id = $leave->id;

                              $file = $image;
                              $fname = $file->getClientOriginalName();
                              $imagenewname = uniqid($user_id).$leave['id'].$fname;
                              $file->move(public_path('assets/img/leaves/'),$imagenewname);


                              $filepath = 'assets/img/leaves/'.$imagenewname; 
                              $leavefile->image = $filepath;

                              $leavefile->save();
                         }
                    }                    
                    ....
               }

               public function destroy(string $id)
               {
                    $leave = Leave::findOrFail($id);
                    
                    // Remove Old Image
                    $leavefiles = LeaveFile::where('leave_id',$id)->get();
                    foreach($leavefiles as $leavefile){
                         $path = $leavefile->image;
                         if(File::exists($path)){
                              File::delete($path);
                         }
                    }
                    $leave->delete();
                    return redirect()->back();
               }

     =>Dynamic Select Option 
          Country > City > Region > Township 

          -useful in Ecommerce website 

          php artisan make:model Region -m 
          php artisan make:model Township -m 

          =In create_region_table.php 
               up()

               $table->string('name');
               $table->string('slug');
               $table->unsignedBigInteger('country_id');
               $table->unsignedBigInteger('city_id');
               $table->unsignedBigInteger('status_id')->default(1);
               $table->unsignedBigInteger('user_id');

          =In create_townships_table.php 
               up()

               $table->string('name');
               $table->string('slug');
               $table->unsignedBigInteger('country_id');
               $table->unsignedBigInteger('city_id');
               $table->unsignedBigInteger('region_id');
               $table->unsignedBigInteger('status_id')->default(1);
               $table->unsignedBigInteger('user_id');

          =In Region.php 
               protected $table = "regions";
               protected $primaryKey = "id";
               protected $fillable = [
                    "name",
                    "slug",
                    "country_id",
                    "city_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }

               public function country(){
                    return $this->belongsTo(Country::class);
               }

               public function city(){
                    return $this->belongsTo(City::class);
               }

          =In Township.php 
               protected $table = "townships";
               protected $primaryKey = "id";
               protected $fillable = [
                    "name",
                    "slug",
                    "country_id",
                    "city_id",
                    "region_id",
                    "user_id"
               ];

               public function user(){
                    return $this->belongsTo(User::class);
               }

               public function status(){
                    return $this->belongsTo(Status::class);
               }

               public function country(){
                    return $this->belongsTo(Country::class);
               }

               public function city(){
                    return $this->belongsTo(City::class);
               }

               public function region(){
                    return $this->belongsTo(Region::class);
               }

          php artisan make:controller RegionsController
          php artisan make:controller TownshipsController

          =In web.php 
               Route::resource("regions",RegionsController::class);
               Route::get("/regionsstatus",[RegionsController::class,"typestatus"]);
               Route::delete("/regionsbulkdeletes",[RegionsController::class,"bulkdeletes"])->name("regions.bulkdeletes");
               
               Route::resource("townships",TownshipsController::class);
               Route::get("/townshipsstatus",[TownshipsController::class,"typestatus"]);
               Route::delete("/townshipsbulkdeletes",[TownshipsController::class,"bulkdeletes"])->name("townships.bulkdeletes");

          =In RegionsController.php
               public function index()
               {
                    // http://127.0.0.1:8000/regions?filtername=mm
                    // dd(request("filtername")); // mm

                    $regions = Region::where(function($query){
                         if($getname = request("filtername")){
                              $query->where("name","LIKE","%".$getname."%");
                         }
                    })->get();
                    // dd($regions);

                    $countries = Country::orderBy("name")->where("status_id",3)->get();
                    $cities = City::orderBy("name")->where("status_id",3)->get();
                    $statuses = Status::whereIn("id",[3,4])->get();

                    return view("regions.index",compact("regions","countries","cities","statuses"));
               }
               // request() - get the request form value

               public function store(Request $request)
               {
                    $this->validate($request,[
                         "country_id"=>"required",
                         "city_id"=>"required",
                         "name" => "required|unique:regions,name",
                    ]);

                    $user = Auth::user();
                    $user_id = $user->id;

                    $region = new Region();
                    $region->name = $request["name"];
                    $region->slug = Str::slug($request["name"]);
                    $region->country_id = $request["country_id"];
                    $region->city_id = $request["city_id"];
                    $region->status_id = $request["status_id"];
                    $region->user_id = $user_id;

                    $region->save();
                    return redirect(route("regions.index"));
               }

               public function update(Request $request, string $id)
               {
                    $this->validate($request,[
                         "editcountry_id"=>"required",
                         "editcity_id"=>"required",
                         "editname" => "required|unique:regions,name,".$id,
                    ]);

                    $user = Auth::user();
                    $user_id = $user['id'];

                    $region = Region::findOrFail($id);
                    $region->name = $request["editname"];
                    $region->slug = Str::slug($request["editname"]);
                    $region->country_id = $request["editcountry_id"];
                    $region->city_id = $request["editcity_id"];
                    $region->status_id = $request["editstatus_id"];
                    $region->user_id = $user_id;

                    $region->save();
                    return redirect(route("regions.index"));
               }


               public function destroy(string $id)
               {
                    $region = Region::findOrFail($id);
                    $region->delete();
                    return redirect()->back();
               }

               public function typestatus(Request $request){
                    $region = Region::findOrFail($request["id"]);
                    $region->status_id = $request["status_id"];
                    $region->save();
               
                    return response()->json(["success"=>"Status Change Successfully"]);
               }

               public function bulkdeletes(Request $request)
               {
                    try{
                         $getselectedids = $request->selectedids;
                         Region::whereIn("id",$getselectedids)->delete();
                         return response()->json(["success"=>"Selected data have been deleted successfully"]);
                    }catch(Exception $e){
                         Log::error($e->getMEssage());
                         return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                    }
               }

    
          =In regions index page 
               Country        City           Region Name    Status 
               ---------------------------------------------------------
               Myanmar        Yangon         Tamwe          On 
               Myanmar        Mandalay       Amarapura      On 
               Thailand       Bangkok        Nana           On 
               Thailand       Bangkok        Asoke          On 

          =In regions > index.blade.php 
               <form action="{{route('regions.store')}}" method="POST">
                    {{ csrf_field() }}
                    <div class="row align-items-end">
                         <div class="col-md-2 form-group mb-3">
                              <label for="country_id">Country</label>
                              <select name="country_id" id="country_id" class="form-control form-control-sm rounded-0">
                                   <option value="" selected disabled>Choose a country</option>
                                   @foreach($countries as $country)
                                        <option value="{{$country['id']}}">{{$country['name']}}</option>
                                   @endforeach     
                              </select>
                         </div>
                         <div class="col-md-2 form-group mb-3">
                              <label for="city_id">City</label>
                              <select name="city_id" id="city_id" class="form-control form-control-sm rounded-0">
                                   <option value="" selected disabled>Choose a country</option>
                                   @foreach($cities as $city)
                                        <option value="{{$city['id']}}">{{$city['name']}}</option>
                                   @endforeach     
                              </select>
                         </div>
                         <div class="col-md-2 form-group mb-3">
                              <label for="name">Region Name <span class="text-danger">*</span></label>
                              @error("name")
                                   <span class="text-danger">{{ $message }}<span>
                              @enderror
                              <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Country Name" value="{{ old('name') }}"/>
                         </div>

                         <div class="col-md-2 form-group mb-3">
                              <label for="status_id">Status</label>
                              <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                   @foreach($statuses as $status)
                                        <option value="{{$status['id']}}">{{$status['name']}}</option>
                                   @endforeach     
                              </select>
                         </div>

                         <div class="col-md-2 mb-3 text-sm-end text-md-start">
                              <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                              <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                         </div>
                    </div>
               </form>


               <table id="mytable" class="table table-sm table-hover border">
          
                    <thead>
                         <th>
                              <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                         </th>
                         <th>No</th>
                         <th>Name</th>
                         <th>City</th>
                         <th>Country</th>
                         <th>Status</th>
                         <th>By</th>
                         <th>Created At</th>
                         <th>Updated At</th>
                         <th>Action</th>
                    </thead>
          
                    <tbody>
                         @foreach($regions as $idx=>$region)
                         <tr id="tablerole_{{$region->id}}">
                              <td>
                                   <input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="{{$region->id}}"/>
                              </td>
                              <td>{{++$idx}}</td>
                              <td>{{ $region->name }}</td>
                              <td>{{ $region->city["name"] }}</td>
                              <td>{{ $region->country["name"] }}</td>
                              
                              <td>
                                   <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input change-btn" {{ $region->status_id === 3 ? "checked" : "" }} data-id="{{ $region->id }}"/>
                                   </div>
                              </td>
                              <td>{{ $region->user["name"] }}</td>
                              <td>{{ $region->created_at->format('d M Y') }}</td>
                              <td>{{ $region->updated_at->format('d M Y') }}</td>
                              <td>
                                   <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$region->id}}" data-name="{{$region->name}}" data-country="{{ $region->country_id }}" data-city="{{ $region->city_id }}" data-status="{{ $region->status_id }}"><i class="fas fa-pen"></i></a>
                                   <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                              
                              </td>
                              <form id="formdelete-{{ $idx }}" class="" action="{{route('regions.destroy',$region->id)}}" method="POST">
                                   @csrf
                                   @method("DELETE")
                              </form>
                         </tr>
                         @endforeach
                    </tbody>
               </table>
               

               <!-- start edit modal -->
                    <div id="editmodal" class="modal fade">
                         <div class="modal-dialog modal-dialog-centered">
                              <div class="modal-content">
                                   <div class="modal-header">
                                        <h6 class="modal-title">Edit Form</h6>
                                        <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                                   </div>

                                   <div class="modal-body">
                                        <form id="formaction" action="" method="POST">
                                             {{ csrf_field() }}
                                             {{ method_field('PUT') }}
                                             <div class="row align-items-end">
                                                  <div class="col-md-6 form-group mb-3">
                                                       <label for="editcountry_id">Country</label>
                                                       <select name="editcountry_id" id="editcountry_id" class="form-control form-control-sm rounded-0">
                                                            @foreach($countries as $country)
                                                                 <option value="{{$country['id']}}">{{$country['name']}}</option>
                                                            @endforeach     
                                                       </select>
                                                  </div>

                                                  <div class="col-md-6 form-group mb-3">
                                                       <label for="editcity_id">City</label>
                                                       <select name="editcity_id" id="editcity_id" class="form-control form-control-sm rounded-0">
                                                            @foreach($cities as $city)
                                                                 <option value="{{$city['id']}}">{{$city['name']}}</option>
                                                            @endforeach     
                                                       </select>
                                                  </div>

                                                  <div class="col-md-6 form-group mb-3">
                                                       <label for="editname">Name <span class="text-danger">*</span></label>
                                                       <input type="text" name="editname" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter region Name" value="{{ old('name') }}"/>
                                                  </div>

                                                  <div class="col-md-6 form-group mb-3">
                                                       <label for="editstatus_id">Status</label>
                                                       <select name="editstatus_id" id="editstatus_id" class="form-control form-control-sm rounded-0">
                                                            @foreach($statuses as $status)
                                                                 <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                            @endforeach     
                                                       </select>
                                                  </div>
                         
                                                  <div class="col-md-12 text-sm-end text-start mb-3">
                                                       <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                                  </div>
                                             </div>
                                        </form>
                                   </div>

                                   <div class="modal-footer">

                                   </div>
                              </div>
                         </div>
                    </div>
               <!-- end edit modal -->

               // Start Edit Form
               $(document).on("click",".editform",function(e){
                    // console.log($(this).attr("data-id"),$(this).attr("data-name"));
                    
                    $("#editname").val($(this).attr("data-name"));
                    $("#editcountry_id").val($(this).attr("data-country"));
                    $("#editcity_id").val($(this).attr("data-city"));
                    $("#editstatus_id").val($(this).attr("data-status"));

                    const getid = $(this).attr("data-id");
                    $("#formaction").attr("action",`/regions/${getid}`);

                    e.preventDefault();
               });
               // End Edit Form

          =In TownshipsController.php 
               public function index()
               {
                    // http://127.0.0.1:8000/townships?filtername=mm
                    // dd(request("filtername")); // mm

                    $townships = Township::where(function($query){
                         if($getname = request("filtername")){
                              $query->where("name","LIKE","%".$getname."%");
                         }
                    })->get();
                    // dd($townships);

                    $countries = Country::orderBy("name")->where("status_id",3)->get();
                    $cities = City::orderBy("name")->where("status_id",3)->get();
                    $regions = Region::orderBy("name")->where("status_id",3)->get();
                    $statuses = Status::whereIn("id",[3,4])->get();

                    return view("townships.index",compact("townships","countries","cities","regions","statuses"));
               }
               // request() - get the request form value

               public function store(Request $request)
               {
                    $this->validate($request,[
                         "country_id"=>"required",
                         "city_id"=>"required",
                         "region_id"=>"required",
                         "name" => "required|unique:townships,name",
                    ]);

                    $user = Auth::user();
                    $user_id = $user->id;

                    $township = new Township();
                    $township->name = $request["name"];
                    $township->slug = Str::slug($request["name"]);
                    $township->country_id = $request["country_id"];
                    $township->city_id = $request["city_id"];
                    $township->region_id = $request["region_id"];
                    $township->status_id = $request["status_id"];
                    $township->user_id = $user_id;

                    $township->save();
                    return redirect(route("townships.index"));
               }


               public function update(Request $request, string $id)
               {
                    $this->validate($request,[
                         "editcountry_id"=>"required",
                         "editcity_id"=>"required",
                         "editregion_id"=>"required",
                         "editname" => "required|unique:townships,name,".$id,
                    ]);

                    $user = Auth::user();
                    $user_id = $user['id'];

                    $township = Township::findOrFail($id);
                    $township->name = $request["editname"];
                    $township->slug = Str::slug($request["editname"]);
                    $township->country_id = $request["editcountry_id"];
                    $township->city_id = $request["editcity_id"];
                    $township->region_id = $request["editregion_id"];
                    $township->status_id = $request["editstatus_id"];
                    $township->user_id = $user_id;

                    $township->save();
                    return redirect(route("townships.index"));
               }


               public function destroy(string $id)
               {
                    $township = Township::findOrFail($id);
                    $township->delete();
                    return redirect()->back();
               }

               public function typestatus(Request $request){
                    $township = Township::findOrFail($request["id"]);
                    $township->status_id = $request["status_id"];
                    $township->save();
               
                    return response()->json(["success"=>"Status Change Successfully"]);
               }

               public function bulkdeletes(Request $request)
               {
                    try{
                         $getselectedids = $request->selectedids;
                         Township::whereIn("id",$getselectedids)->delete();
                         return response()->json(["success"=>"Selected data have been deleted successfully"]);
                    }catch(Exception $e){
                         Log::error($e->getMEssage());
                         return response()->json(["status"=>"failed","message"=>$e->getMessage()]);
                    }
               }

          =In townships > index.blade.php 
               <form action="{{route('townships.store')}}" method="POST">
                    {{ csrf_field() }}
                    <div class="row align-items-end">
                         <div class="col-md-2 form-group mb-3">
                              <label for="country_id">Country</label>
                              <select name="country_id" id="country_id" class="form-control form-control-sm rounded-0">
                                   <option value="" selected disabled>Choose a country</option>
                                   @foreach($countries as $country)
                                        <option value="{{$country['id']}}">{{$country['name']}}</option>
                                   @endforeach     
                              </select>
                         </div>
                         <div class="col-md-2 form-group mb-3">
                              <label for="city_id">City</label>
                              <select name="city_id" id="city_id" class="form-control form-control-sm rounded-0">
                                   <option value="" selected disabled>Choose a city</option>
                                   @foreach($cities as $city)
                                        <option value="{{$city['id']}}">{{$city['name']}}</option>
                                   @endforeach     
                              </select>
                         </div>
                         <div class="col-md-2 form-group mb-3">
                              <label for="region_id">Region</label>
                              <select name="region_id" id="region_id" class="form-control form-control-sm rounded-0">
                                   <option value="" selected disabled>Choose a region</option>
                                   @foreach($regions as $region)
                                        <option value="{{$region['id']}}">{{$region['name']}}</option>
                                   @endforeach     
                              </select>
                         </div>
                         <div class="col-md-2 form-group mb-3">
                              <label for="name">Township Name <span class="text-danger">*</span></label>
                              @error("name")
                                   <span class="text-danger">{{ $message }}<span>
                              @enderror
                              <input type="text" name="name" id="name" class="form-control form-control-sm rounded-0" placeholder="Enter Country Name" value="{{ old('name') }}"/>
                         </div>

                         <div class="col-md-2 form-group mb-3">
                              <label for="status_id">Status</label>
                              <select name="status_id" id="status_id" class="form-control form-control-sm rounded-0">
                                   @foreach($statuses as $status)
                                        <option value="{{$status['id']}}">{{$status['name']}}</option>
                                   @endforeach     
                              </select>
                         </div>

                         <div class="col-md-2 mb-3 text-sm-end text-md-start">
                              <button type="reset" class="btn btn-secondary btn-sm rounded-0">Cancel</button>
                              <button type="submit" class="btn btn-primary btn-sm rounded-0 ms-3">Submit</button>
                         </div>
                    </div>
               </form>

               <table id="mytable" class="table table-sm table-hover border">
          
                    <thead>
                         <th>
                              <input type="checkbox" name="selectalls" id="selectalls" class="form-check-input selectalls" />
                         </th>
                         <th>No</th>
                         <th>Name</th>
                         <th>Region</th>
                         <th>City</th>
                         <th>Country</th>
                         <th>Status</th>
                         <th>By</th>
                         <th>Created At</th>
                         <th>Updated At</th>
                         <th>Action</th>
                    </thead>
          
                    <tbody>
                         @foreach($townships as $idx=>$township)
                         <tr id="tablerole_{{$township->id}}">
                              <td>
                                   <input type="checkbox" name="singlechecks" class="form-check-input singlechecks" value="{{$township->id}}"/>
                              </td>
                              <td>{{++$idx}}</td>
                              <td>{{ $township->name }}</td>
                              <td>{{ $township->region["name"] }}</td>
                              <td>{{ $township->city["name"] }}</td>
                              <td>{{ $township->country["name"] }}</td>
                              
                              <td>
                                   <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input change-btn" {{ $township->status_id === 3 ? "checked" : "" }} data-id="{{ $township->id }}"/>
                                   </div>
                              </td>
                              <td>{{ $township->user["name"] }}</td>
                              <td>{{ $township->created_at->format('d M Y') }}</td>
                              <td>{{ $township->updated_at->format('d M Y') }}</td>
                              <td>
                                   <a href="javascript:void(0);" class="text-info editform" data-bs-toggle="modal" data-bs-target="#editmodal" data-id="{{$township->id}}" data-name="{{$township->name}}" data-country="{{ $township->country_id }}" data-city="{{ $township->city_id }}" data-region="{{ $township->region_id }}" data-status="{{ $township->status_id }}"><i class="fas fa-pen"></i></a>
                                   <a href="#" class="text-danger ms-2 delete-btns" data-idx="{{$idx}}"><i class="fas fa-trash-alt"></i></a>
                              
                              </td>
                              <form id="formdelete-{{ $idx }}" class="" action="{{route('townships.destroy',$township->id)}}" method="POST">
                                   @csrf
                                   @method("DELETE")
                              </form>
                         </tr>
                         @endforeach
                    </tbody>
               </table>

               <!-- start edit modal -->
               <div id="editmodal" class="modal fade">
                    <div class="modal-dialog modal-dialog-centered">
                         <div class="modal-content">
                              <div class="modal-header">
                                   <h6 class="modal-title">Edit Form</h6>
                                   <button type="" class="btn-close" data-bs-dismiss="modal"></button>
                              </div>

                              <div class="modal-body">
                                   <form id="formaction" action="" method="POST">
                                        {{ csrf_field() }}
                                        {{ method_field('PUT') }}
                                        <div class="row align-items-end">
                                             <div class="col-md-6 form-group mb-3">
                                                  <label for="editcountry_id">Country</label>
                                                  <select name="editcountry_id" id="editcountry_id" class="form-control form-control-sm rounded-0">
                                                       @foreach($countries as $country)
                                                            <option value="{{$country['id']}}">{{$country['name']}}</option>
                                                       @endforeach     
                                                  </select>
                                             </div>

                                             <div class="col-md-6 form-group mb-3">
                                                  <label for="editcity_id">City</label>
                                                  <select name="editcity_id" id="editcity_id" class="form-control form-control-sm rounded-0">
                                                       @foreach($cities as $city)
                                                            <option value="{{$city['id']}}">{{$city['name']}}</option>
                                                       @endforeach     
                                                  </select>
                                             </div>

                                             <div class="col-md-6 form-group mb-3">
                                                  <label for="editregion_id">Region</label>
                                                  <select name="editregion_id" id="editregion_id" class="form-control form-control-sm rounded-0">
                                                       @foreach($regions as $region)
                                                            <option value="{{$region['id']}}">{{$region['name']}}</option>
                                                       @endforeach     
                                                  </select>
                                             </div>

                                             <div class="col-md-6 form-group mb-3">
                                                  <label for="editname">Name <span class="text-danger">*</span></label>
                                                  <input type="text" name="editname" id="editname" class="form-control form-control-sm rounded-0" placeholder="Enter township Name" value="{{ old('name') }}"/>
                                             </div>

                                             <div class="col-md-6 form-group mb-3">
                                                  <label for="editstatus_id">Status</label>
                                                  <select name="editstatus_id" id="editstatus_id" class="form-control form-control-sm rounded-0">
                                                       @foreach($statuses as $status)
                                                            <option value="{{$status['id']}}">{{$status['name']}}</option>
                                                       @endforeach     
                                                  </select>
                                             </div>
                    
                                             <div class="col-md-12 text-sm-end text-start mb-3">
                                                  <button type="submit" class="btn btn-primary btn-sm rounded-0">Update</button>
                                             </div>
                                        </div>
                                   </form>
                              </div>

                              <div class="modal-footer">

                              </div>
                         </div>
                    </div>
               </div>
               <!-- end edit modal -->


               // Start Edit Form
               $(document).on("click",".editform",function(e){
                    // console.log($(this).attr("data-id"),$(this).attr("data-name"));
                    
                    $("#editname").val($(this).attr("data-name"));
                    $("#editcountry_id").val($(this).attr("data-country"));
                    $("#editcity_id").val($(this).attr("data-city"));
                    $("#editregion_id").val($(this).attr("data-region"));
                    $("#editstatus_id").val($(this).attr("data-status"));

                    const getid = $(this).attr("data-id");
                    $("#formaction").attr("action",`/townships/${getid}`);

                    e.preventDefault();
               });
               // End Edit Form

     
          =In api.php 
               Route::get("/filter/cities/{filter}",[CitiesController::class,"filterbycountryid"]); // dyamic selectoption by countryid

          =In api > CitiesController.php 
               public function filterbycountryid($filter){
                    // return City::where("country_id",$filter)->where('status_id',3)->get();
                    return CitiesResource::collection(City::where("country_id",$filter)->where('status_id',3)->get());
               }

               =http://127.0.0.1:8000/api/filter/cities/154
               [
                    {
                    "id": 84,
                    "name": "Yangon",
                    "slug": "yangon",
                    "country_id": 154,
                    "status_id": 3,
                    "user_id": 1,
                    "created_at": "2024-08-10T09:23:50.000000Z",
                    "updated_at": "2024-08-10T09:23:50.000000Z"
                    },
                    {
                    "id": 85,
                    "name": "Mandalay",
                    "slug": "mandalay",
                    "country_id": 154,
                    "status_id": 3,
                    "user_id": 1,
                    "created_at": "2024-08-10T09:24:00.000000Z",
                    "updated_at": "2024-08-10T09:24:00.000000Z"
                    }
               ]

          =In regions > index.blade.php 
               <select name="city_id" id="city_id" class="form-control form-control-sm rounded-0 city_id">
                    <option value="" selected disabled>Choose a city</option>
                    {{-- @foreach($cities as $city)
                         <option value="{{$city['id']}}">{{$city['name']}}</option>
                    @endforeach --}}     
               </select>

               <!-- start edit modal -->
               <div class="col-md-6 form-group mb-3">
                    <label for="editcity_id">City</label>
                    <select name="editcity_id" id="editcity_id" class="form-control form-control-sm rounded-0 city_id">
                         {{-- @foreach($cities as $city)
                              <option value="{{$city['id']}}">{{$city['name']}}</option>
                         @endforeach --}}     
                    </select>
               </div>

               // Start Dynamic Select Option 
               $(document).on("change",".country_id",function(){
                    const getcountryid = $(this).val();
                    // console.log(getcountryid);

                    let opforcity = "";
                    $.ajax({
                         url: `/api/filter/cities/${getcountryid}`,
                         type: "GET",
                         dataType:"json",
                         success:function(response){
                              $(".city_id").empty();
                              opforcity += "<option selected disabled>Choose a city abcd</option>";
                              
                              console.log(response);
                              for(let x=0 ; x<response.data.length; x++){
                                   opforcity += `<option value="${response.data[x].id}">${response.data[x].name}</option>`;
                              }

                              $(".city_id").append(opforcity);
                         },
                         error:function(response){
                              console.log("Error:( ",response);
                         }
                    });
               });
               // End Dynamic Select Option

               *Weakness 
                    On edit, 
                         Not show the present city value.Empty city value.
                         *Can request ajax once again.

               =My solotion 
                    // Start Edit Form
                    $(document).on("click",".editform",function(e){
                         const getcountryid = $(this).attr("data-country");
                         // console.log(getcountryid);
                         let opforcity = "";

                         $.ajax({
                              url: `/api/filter/cities/${getcountryid}`,
                              type: "GET",
                              dataType:"json",
                              success:function(response){
                                   console.log(response);
                                   $(".city_id").empty();
                                   opforcity += "<option selected disabled>Choose a city abcd</option>";
                                   
                                   console.log(response);
                                   for(let x=0 ; x<response.data.length; x++){
                                        opforcity += `<option value="${response.data[x].id}">${response.data[x].name}</option>`;
                                   }

                                   $(".city_id").append(opforcity);

                                   // console.log(e.target.parentElement);
                                   $("#editcity_id").val($(e.target.parentElement).attr("data-city"));

                              },
                              error:function(response){
                                   console.log("Error:( ",response);
                              }
                         });



                         // console.log($(this).attr("data-id"),$(this).attr("data-name"));
                         
                         $("#editname").val($(this).attr("data-name"));
                         $("#editcountry_id").val($(this).attr("data-country"));
                         $("#editstatus_id").val($(this).attr("data-status"));

                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("action",`/regions/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form

          =>Region Dynamic Select (3 steps -  Country > City > Region)
               php artisan make:controller Api/RegionsController --api
               php artisan make:resource RegionsResource

               =In api.php 
                    Route::get("/filter/regions/{filter}",[RegionsController::class,"filterbycityid"]); // dyamic selectoption by cityid

               =In Api > RegionsController.php 
                    public function filterbycityid($filter){
                         // return City::where("country_id",$filter)->where('status_id',3)->get();
                         return RegionsResource::collection(Region::where("city_id",$filter)->where('status_id',3)->orderBy("name","asc")->get());

                    }

               =In RegionsResource.php 
                     public function toArray(Request $request): array
                    {
                         return [
                              "id"=>$this->id,
                              "name"=>$this->name,
                              "slug"=>$this->slug,
                              "country_id"=>$this->country_id,
                              "city_id"=>$this->city_id,
                              "status_id"=>$this->status_id,
                              "user_id"=>$this->user_id,
                              "created_at"=>$this->created_at->format("d m Y"),
                              "updated_at"=>$this->updated_at->format("d m Y"),

                              "country"=>Country::where("id",$this->country_id)->select(["id","name"])->first(),
                              "city"=>City::where("id",$this->city_id)->select(["id","name"])->first(),
                              "user"=>User::where("id",$this->user_id)->select(["id","name"])->first(),
                              "status"=>Status::where("id",$this->status_id)->select(["id","name"])->first()
                         ];
                    }


               =http://127.0.0.1:8000/api/filter/regions/83
               {
                    "data": [
                    {
                         "id": 4,
                         "name": "Asoke",
                         "slug": "asoke",
                         "country_id": 224,
                         "city_id": 83,
                         "status_id": 3,
                         "user_id": 1,
                         "created_at": "10 08 2024",
                         "updated_at": "10 08 2024",
                         "country": {
                         "id": 224,
                         "name": "Thailand"
                         },
                         "city": {
                         "id": 83,
                         "name": "Bangkok"
                         },
                         "user": {
                         "id": 1,
                         "name": "admin"
                         },
                         "status": {
                         "id": 3,
                         "name": "On"
                         }
                    },
                    {
                         "id": 3,
                         "name": "Nana",
                         "slug": "nana",
                         "country_id": 224,
                         "city_id": 83,
                         "status_id": 3,
                         "user_id": 1,
                         "created_at": "10 08 2024",
                         "updated_at": "10 08 2024",
                         "country": {
                         "id": 224,
                         "name": "Thailand"
                         },
                         "city": {
                         "id": 83,
                         "name": "Bangkok"
                         },
                         "user": {
                         "id": 1,
                         "name": "admin"
                         },
                         "status": {
                         "id": 3,
                         "name": "On"
                         }
                    },
                    {
                         "id": 8,
                         "name": "Pidi Midi",
                         "slug": "pidi-midi",
                         "country_id": 224,
                         "city_id": 83,
                         "status_id": 3,
                         "user_id": 1,
                         "created_at": "16 08 2024",
                         "updated_at": "18 08 2024",
                         "country": {
                         "id": 224,
                         "name": "Thailand"
                         },
                         "city": {
                         "id": 83,
                         "name": "Bangkok"
                         },
                         "user": {
                         "id": 1,
                         "name": "admin"
                         },
                         "status": {
                         "id": 3,
                         "name": "On"
                         }
                    }
                    ]
               }

               =In regions > index.blade.php 
                    <div class="col-md-2 form-group mb-3">
                         <label for="country_id">Country</label>
                         <select name="country_id" id="country_id" class="form-control form-control-sm rounded-0 country_id">
                              <option value="" selected disabled>Choose a country</option>
                              @foreach($countries as $country)
                                   <option value="{{$country['id']}}">{{$country['name']}}</option>
                              @endforeach     
                         </select>
                    </div>
                    <div class="col-md-2 form-group mb-3">
                         <label for="city_id">City</label>
                         <select name="city_id" id="city_id" class="form-control form-control-sm rounded-0 city_id">
                              <option value="" selected disabled>Choose a city</option>
                              {{-- @foreach($cities as $city)
                                   <option value="{{$city['id']}}">{{$city['name']}}</option>
                              @endforeach --}}     
                         </select>
                    </div>
                    <div class="col-md-2 form-group mb-3">
                         <label for="region_id">Region</label>
                         <select name="region_id" id="region_id" class="form-control form-control-sm rounded-0 region_id">
                              <option value="" selected disabled>Choose a region</option>
                              {{-- @foreach($regions as $region)
                                   <option value="{{$region['id']}}">{{$region['name']}}</option>
                              @endforeach --}}     
                         </select>
                    </div>

                    <div class="col-md-6 form-group mb-3">

                         <label for="editcountry_id">Country</label>
                         <select name="editcountry_id" id="editcountry_id" class="form-control form-control-sm rounded-0 country_id">
                              @foreach($countries as $country)
                                   <option value="{{$country['id']}}">{{$country['name']}}</option>
                              @endforeach     
                         </select>
                    </div>

                    <div class="col-md-6 form-group mb-3">
                         <label for="editcity_id">City</label>
                         <select name="editcity_id" id="editcity_id" class="form-control form-control-sm rounded-0 city_id">
                              @foreach($cities as $city)
                                   <option value="{{$city['id']}}">{{$city['name']}}</option>
                              @endforeach     
                         </select>
                    </div>

                    <div class="col-md-6 form-group mb-3">
                         <label for="editregion_id">Region</label>
                         <select name="editregion_id" id="editregion_id" class="form-control form-control-sm rounded-0 region_id">
                              @foreach($regions as $region)
                                   <option value="{{$region['id']}}">{{$region['name']}}</option>
                              @endforeach     
                         </select>
                    </div>


                    // Start Dynamic Select Option 
                    $(document).on("change",".country_id",function(){
                         const getcountryid = $(this).val();
                         // console.log(getcountryid);

                         let opforcity = "";
                         let opforregion = "";
                         $.ajax({
                              url: `/api/filter/cities/${getcountryid}`,
                              type: "GET",
                              dataType:"json",
                              success:function(response){
                                   $(".city_id").empty();
                                   $(".region_id").empty();
                                   opforcity += "<option selected disabled>Choose a city ....</option>";
                                   opforregion += "<option selected disabled>Choose a region ....</option>";
                                   
                                   console.log(response);
                                   for(let x=0 ; x<response.data.length; x++){
                                        opforcity += `<option value="${response.data[x].id}">${response.data[x].name}</option>`;
                                   }

                                   $(".city_id").append(opforcity);
                                   $(".region_id").append(opforregion);
                              },
                              error:function(response){
                                   console.log("Error:( ",response);
                              }
                         });
                    });
                    $(document).on("change",".city_id",function(){
                         const getcityid = $(this).val();
                         // console.log(getcityid);

                         let opforregion = "";
                         $.ajax({
                              url: `/api/filter/regions/${getcityid}`,
                              type: "GET",
                              dataType:"json",
                              success:function(response){
                                   // console.log(response);
                                   $(".region_id").empty();
                                   opforregion += "<option selected disabled>Choose a region ....</option>";
                                   
                                   console.log(response);
                                   for(let y=0 ; y<response.data.length; y++){
                                        opforregion += `<option value="${response.data[y].id}">${response.data[y].name}</option>`;
                                   }

                                   $(".region_id").append(opforregion);
                              },
                              error:function(response){
                                   console.log("Error:( ",response);
                                   // console.log("Error:( ",response.responseText);
                              }
                         });
                    });
                    // End Dynamic Select Option

                    // Start Edit Form
                    $(document).on("click",".editform",async function(e){
                         const getcountryid = $(this).attr("data-country");
                         // console.log(getcountryid);
                         let opforcity = "";

                         await $.ajax({
                              url: `/api/filter/cities/${getcountryid}`,
                              type: "GET",
                              dataType:"json",
                              success:function(response){
                                   console.log(response);
                                   $(".city_id").empty();
                                   opforcity += "<option selected disabled>Choose a city abcd</option>";
                                   
                                   console.log(response);
                                   for(let x=0 ; x<response.data.length; x++){
                                        opforcity += `<option value="${response.data[x].id}">${response.data[x].name}</option>`;
                                   }

                                   $(".city_id").append(opforcity);

                                   // console.log(e.target.parentElement);
                                   // $("#editcity_id").val($(e.target.parentElement).attr("data-city"));

                              },
                              error:function(response){
                                   console.log("Error:( ",response);
                              }
                         });

                         const getcityid = $(this).attr("data-city");
                         let opforregion = "";
                         await $.ajax({
                              url: `/api/filter/regions/${getcityid}`,
                              type: "GET",
                              dataType:"json",
                              success:function(response){
                                   // console.log(response);
                                   $(".region_id").empty();
                                   opforregion += "<option selected disabled>Choose a region ....</option>";
                                   
                                   console.log(response);
                                   for(let y=0 ; y<response.data.length; y++){
                                        opforregion += `<option value="${response.data[y].id}">${response.data[y].name}</option>`;
                                   }

                                   $(".region_id").append(opforregion);

                                   // $("#editregion_id").val($(e.target.parentElement).attr("data-region"));
                              },
                              error:function(response){
                                   console.log("Error:( ",response);
                                   // console.log("Error:( ",response.responseText);
                              }
                         });




                         // console.log($(this).attr("data-id"),$(this).attr("data-name"));
                         
                         $("#editname").val($(this).attr("data-name"));
                         $("#editcountry_id").val($(this).attr("data-country"));
                         $("#editcity_id").val($(this).attr("data-city"));
                         $("#editregion_id").val($(this).attr("data-region"));
                         $("#editstatus_id").val($(this).attr("data-status"));

                         const getid = $(this).attr("data-id");
                         $("#formaction").attr("action",`/townships/${getid}`);

                         e.preventDefault();
                    });
                    // End Edit Form

          =Inefficienciy in changing country 
               Thailand > Bangkok > Asoke 
               Myanmar > Choose a city > Asoke
               *Region still remain 

               Thailand > Bangkok > ____
               *Clear region options
               *Info option must put


               Thailand > Bangkok > Asoke 
               Myanmar > Choose a city > Choose a region 
               *Country change reset both city and region







